/**** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ***
** created by        :
** generated by      : Agnisys
** generated from    : D:\AgnisysProjects\git_test\Allegro_test\Merger\merg4.idsng
** IDesignSpec rev   : idsbatch v4.16.26.2

***** This code is generated with following settings ***
**---------------------------------------------------------------------------------------------------------------*/



#include "Access.h"
#include "merg45.h"

namespace DUOLOG
{
    
    /**
    * merg45 class constructor.
    * This creates instances of all objects required to represent the registers
    * and memories within the merg45 component.
    */
    merg45::merg45()
    {
        // Create register objects
        createRegisters();
        // Create memory objects
        createMemories();
        // Locate registers
        locateRegisters();
        // Locate memories
        locateMemories();
    }
    /**
    * Creates register objects
    */
    void merg45::createRegisters()
    {
        // Create a new instance of the regnam class to represent regnam register
        m_regregnam = new regnam;
        // Create a new instance of the regname2 class to represent reggroupnameregname2_0 register
        m_regreggroupnameregname2_0 = new regname2;
        return;
    }
    
    /**
    * Creates memory objects
    */
    void merg45::createMemories()
    {
        return;
    }
    /**
    * Locates register objects
    */
    void merg45::locateRegisters()
    {
        // Create a new instance of the LocatedRegister object to represent regnam register
        // at address 0x000
        m_locmerg45_intfregnam = new LocatedRegister<U32T> (
        m_regregnam->getRegister(),
        MERG45_INTF_REGNAM_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent reggroupnameregname2_0 register
        // at address 0x4
        m_locmerg45_intfreggroupnameregname2_0 = new LocatedRegister<U8T> (
        m_regreggroupnameregname2_0->getRegister(),
        MERG45_INTF_REGGROUPNAMEREGNAME2_0_ADDRESS,
        WRITE, READ);
        return;
    }
    
    /**
    * Locates memory objects
    */
    void merg45::locateMemories()
    {
        return;
    }
    /**
    * Initialises all registers within component to power-on-reset state.
    */
    void merg45::initialise()
    {
        m_regregnam->getRegister()->initialise();
        m_regreggroupnameregname2_0->getRegister()->initialise();
        return;
    }
    
    /**
    * Returns a pointer to the regnam object representing regnam
    * @return Pointer to the  regnam object representing regnam (regnam *).
    */
    regnam * merg45::getregnam()
    {
        return  m_regregnam;
    }
    
    /**
    * Returns a pointer to the reggroupnameregname2_0 object representing regname2_0
    * @return Pointer to the  reggroupnameregname2_0 object representing regname2_0 (regname2_0 *).
    */
    regname2 * merg45::getreggroupnameregname2_0()
    {
        return  m_regreggroupnameregname2_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing regnam at address 0x000
    * @return Pointer to LocatedRegister object representing regnam at address 0x000
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * merg45::getmerg45_intfregnam()
    {
        return  m_locmerg45_intfregnam;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing reggroupnameregname2_0 at address 0x4
    * @return Pointer to LocatedRegister object representing reggroupnameregname2_0 at address 0x4
    *         (LocatedRegister *).
    */
    LocatedRegister<U8T> * merg45::getmerg45_intfreggroupnameregname2_0()
    {
        return  m_locmerg45_intfreggroupnameregname2_0;
    }
    
    /**
    * Write access function for regnam at address 0x000
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void merg45::writemerg45_intfregnam(U32T data, U32T dataMask)
    {
        m_locmerg45_intfregnam->write(data, dataMask);
    }
    
    /**
    * Write access function for reggroupnameregname2_0 at address 0x4
    * @param Register data value (U8T).
    * @param Register data mask (U8T).
    */
    void merg45::writemerg45_intfreggroupnameregname2_0(U8T data, U8T dataMask)
    {
        m_locmerg45_intfreggroupnameregname2_0->write(data, dataMask);
    }
    
    /**
    * Write access function for merg45 component merg45_intf transaction target.
    * @param Register address value (U32T).
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void merg45::writemerg45_intf(U32T address, U32T data, U32T dataMask)
    {
        
        switch (address)
        {
            // merg45_intfregnam
            case MERG45_INTF_REGNAM_ADDRESS:
            writemerg45_intfregnam((U32T)data, (U32T)dataMask);
            break;
            // merg45_intfreggroupnameregname2_0
            case MERG45_INTF_REGGROUPNAMEREGNAME2_0_ADDRESS:
            writemerg45_intfreggroupnameregname2_0((U8T)data, (U8T)dataMask);
            break;
            // Default
            default:
            break;
        }
        return;
    }
    
    /**
    * Write byte lanes access function for merg45 component merg45_intf transaction target.
    * @param Register address value (U32T).
    * @param Byte lane enable (U8T).
    * @param Register data value (U32T).
    */
    void merg45::writeByteLanesmerg45_intf(U32T address, U8T BE, U32T data)
    {
        // Determine data mask
        U32T dataMask = 0;
        for (int i = 0; i < 4; i++)
        {
            if (((BE >> i) % 2) == 1)
            {
                dataMask |= (U32T)0xff << (i * 8);
            }
        }
        
        // merg45_intfregnam (in byte lanes 0 to 3)
        if ((address == (MERG45_INTF_REGNAM_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writemerg45_intfregnam((U32T)data, (U32T)dataMask);
        }
        
        // merg45_intfregname2_0 (in byte lanes 0 to 3)
        if ((address == (MERG45_INTF_REGGROUPNAMEREGNAME2_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writemerg45_intfreggroupnameregname2_0((U8T)data, (U8T)dataMask);
        }
        
        return;
    }
    
    /**
    * Write access function for merg45 component.
    * @param Register address value (U32T).
    * @param Transaction port (transactionPortType).
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void merg45::write(transactionPortType transactionPort, U32T address, U32T data, U32T dataMask)
    {
        switch (transactionPort)
        {
            // merg45_intf
            case merg45_INTF_TRANSACTION_PORT:
            writemerg45_intf(address, (U32T)data, (U32T)dataMask);
            break;
            // Default
            default:
            break;
        }
        return;
    }
    
    /**
    * Read access function for regnam at address 0x000
    * @return Register data value (U32T).
    */
    U32T merg45::readmerg45_intfregnam()
    {
        return  m_locmerg45_intfregnam->read();
    }
    
    /**
    * Read access function for reggroupnameregname2_0 at address 0x4
    * @return Register data value (U8T).
    */
    U8T merg45::readmerg45_intfreggroupnameregname2_0()
    {
        return  m_locmerg45_intfreggroupnameregname2_0->read();
    }
    
    /**
    * Read access function for merg45_intf component merg45_intf transaction target.
    * @param Register address value (U32T).
    * @retrun Register data value (U32T).
    */
    U32T merg45::readmerg45_intf(U32T address )
    {
        // Initialise return value
        U32T retVal = 0;
        switch (address)
        {
            // merg45_intfregnam
            case MERG45_INTF_REGNAM_ADDRESS:
            retVal = readmerg45_intfregnam();
            break;
            // merg45_intfreggroupnameregname2_0
            case MERG45_INTF_REGGROUPNAMEREGNAME2_0_ADDRESS:
            retVal = readmerg45_intfreggroupnameregname2_0();
            break;
            // Default
            default:
            break;
        }
        return retVal;
    }
    
    /**
    * Read byte lanes access function for merg45 component merg45_intf transaction target.
    * @param Register address value (U32T).
    * @param Byte lane enable (U8T).
    * @param Register data value (U32T).
    */
    U32T merg45::readByteLanesmerg45_intf(U32T address, U8T BE)
    {
        // Initialise return value
        U32T retVal = 0;
        
        // Determine data mask
        U32T dataMask = 0;
        for (int i = 0; i < 4; i++)
        {
            if (((BE >> i) % 2) == 1)
            {
                dataMask |= (U32T)0xff << (i * 8);
            }
        }
        
        // merg45_intfregnam (in byte lanes 0 to 3)
        if ((address == (MERG45_INTF_REGNAM_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readmerg45_intfregnam() & (U32T)dataMask);
        }
        
        // merg45_intfregname2_0 (in byte lanes 0 to 3)
        if ((address == (MERG45_INTF_REGGROUPNAMEREGNAME2_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U8T)(readmerg45_intfreggroupnameregname2_0() & (U8T)dataMask);
        }
        
        return retVal;
    }
    
    /**
    * Read access function for merg45 component.
    * @param Register address value (U32T).
    * @param Transaction port (transactionPortType).
    * @param Register data value (U32T).
    */
    U32T merg45::read(transactionPortType transactionPort, U32T address)
    {
        // Initialise return value
        U32T retVal = 0;
        switch (transactionPort)
        {
            // merg45_intf
            case merg45_INTF_TRANSACTION_PORT:
            retVal = readmerg45_intf(address);
            break;
            // Default
            default:
            break;
        }
        return retVal;
    }
    
} // namespace DUOLOG
