/**** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ***
** created by        :
** generated by      : Agnisys
** generated from    : D:\AgnisysProjects\git_test\Allegro_test\Merger\merg4.idsng
** IDesignSpec rev   : idsbatch v4.16.26.2

***** This code is generated with following settings ***
**---------------------------------------------------------------------------------------------------------------*/


#ifndef __MERG45_H
#define __MERG45_H

#include "Access.h"
#include "merg45Registers.h"
#include "LocatedRegister.h"

namespace DUOLOG
{
    
    class merg45
    {
        private:
        // ------------------------------------------------------------------------
        // Private member variables
        // ------------------------------------------------------------------------
        regnam * m_regregnam;
        regname2 * m_regreggroupnameregname2_0;
        // Pointer to LocatedRegister object representing regnam at address 0x000
        LocatedRegister<U32T> * m_locmerg45_intfregnam;
        // Pointer to LocatedRegister object representing reggroupnameregname2_0 at address 0x4
        LocatedRegister<U8T> * m_locmerg45_intfreggroupnameregname2_0;
        // ------------------------------------------------------------------------
        // Private member variables
        // ------------------------------------------------------------------------
        // Creates register objects
        void createRegisters();
        // Creates memory objects
        void createMemories();
        // Locates registers
        void locateRegisters();
        // Locates memories
        void locateMemories();
        
        public:
        // ------------------------------------------------------------------------
        // Public member variables
        // ------------------------------------------------------------------------
        // regnam register offset address definition(s)
        static const U32T MERG45_INTF_REGNAM_ADDRESS = 0x000;
        // reggroupnameregname2_0 register offset address definition(s)
        static const U8T MERG45_INTF_REGGROUPNAMEREGNAME2_0_ADDRESS = 0x4;
        
        
        
        
        // merg45 transaction port enumerations
        enum transactionPortType {
        merg45_INTF_TRANSACTION_PORT
    };
    // ------------------------------------------------------------------------
    // Public member functions
    // ------------------------------------------------------------------------
    // Class constructor
    merg45();
    // Initialises all registers in the component
    void initialise();
    // Returns a pointer to the regnam object representing regnam
    regnam * getregnam();
    // Returns a pointer to the reggroupnameregname2_0 object representing reggroupnameregname2_0
    regname2 * getreggroupnameregname2_0();
    // Returns pointer to LocatedRegister object representing regnam at address 0x000
    LocatedRegister<U32T> * getmerg45_intfregnam();
    // Returns pointer to LocatedRegister object representing reggroupnameregname2_0 at address 0x4
    LocatedRegister<U8T> * getmerg45_intfreggroupnameregname2_0();
    // Write access function for regnam at address 0x000
    void  writemerg45_intfregnam(U32T  data, U32T dataMask);
    // Write access function for reggroupnameregname2_0 at address 0x4
    void  writemerg45_intfreggroupnameregname2_0(U8T  data, U8T dataMask);
    // Write access function for merg45 component merg45_intf transaction target
    void  writemerg45_intf(U32T  address, U32T data, U32T dataMask);
    // Write byte lanes access function for merg45 component merg45_intf transaction target
    void  writeByteLanesmerg45_intf(U32T  address, U8T BE, U32T data);
    // Write access function for component
    void  write (transactionPortType transactionPort, U32T  address, U32T data, U32T dataMask);
    // Read access function for regnam at address 0x000
    U32T readmerg45_intfregnam();
    // Read access function for reggroupnameregname2_0 at address 0x4
    U8T readmerg45_intfreggroupnameregname2_0();
    // Read access function for merg45 component merg45_intf transaction target
    U32T readmerg45_intf(U32T  address);
    // Read byte lanes access function for merg45 component merg45_intf transaction target
    U32T readByteLanesmerg45_intf(U32T  address, U8T BE);
    // Read access function for component
    U32T read(transactionPortType transactionPort, U32T  address);
};

} // namespace DUOLOG
#endif /* __CTT_H */
