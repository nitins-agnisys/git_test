//Agnisys, Inc. ***** Copyright 2018 All Rights Reserved. *****
//
//*** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ***
// created by        :
// generated by      : Agnisys
// generated from    : D:\AgnisysProjects\git_test\Allegro_test\Test\Doc2.idsng
// IDesignSpec rev   : idsbatch v4.16.26.2

//*** This code is generated with following settings ***
// Reg Width                  : 32
// Address Unit               : 8
// C++ Types int              : hwint
// Bus Type                   : PROPRIETARY
// BigEndian                  : false
// LittleEndian               : false
// Dist. Decode and Readback  : false
//---------------------------------------------------------------------------------------------------------------
/*----------------------------------------------------------------------
Class       : block_name_reg_name
-----------------------------------------------------------------------*/

`ifndef CLASS_block_name_reg_name
`define CLASS_block_name_reg_name
class block_name_reg_name extends uvm_reg;
    `uvm_object_utils(block_name_reg_name)

    rand uvm_reg_field F;

    // Function : new
    function new(string name = "block_name_reg_name");
        super.new(name, 32, build_coverage(UVM_NO_COVERAGE));
        add_coverage(build_coverage(UVM_NO_COVERAGE));            //Added because build coverage in the line above doesnâ€™t work due to a bug in UVM 1.1 library

    endfunction

    // Function : build
    virtual function void build();
        this.F = uvm_reg_field::type_id::create("F");

        this.F.configure(this, 1,  1, "RW", 0, 'd0, 1, 1, 0);

    endfunction
endclass
`endif

/*----------------------------------------------------------------------
Class      : block_name_block
-----------------------------------------------------------------------*/
`ifndef CLASS_block_name_block
`define CLASS_block_name_block
class block_name_block extends uvm_reg_block;
    `uvm_object_utils(block_name_block)

    rand block_name_reg_name reg_name;

    // Function : new
    function new(string name = "block_name_block");
        super.new(name, UVM_NO_COVERAGE);
    endfunction

    // Function : build
    virtual function void build();
        //REG_NAME
        reg_name   =   block_name_reg_name::type_id::create("reg_name");
        reg_name.configure(this, null, "reg_name");
        reg_name.build();

        //define default map and add reg/regfiles
        default_map= create_map("default_map", 'h0, 4, UVM_LITTLE_ENDIAN, 1);
        default_map.add_reg( reg_name, 'h0, "RW");

        lock_model();
    endfunction

endclass : block_name_block
`endif

/*----------------------------------------------------------------------
Class      : chip_name_block
-----------------------------------------------------------------------*/
`ifndef CLASS_chip_name_block
`define CLASS_chip_name_block
class chip_name_block extends uvm_reg_block;
    `uvm_object_utils(chip_name_block)

    rand block_name_block block_name;

    // Function : new
    function new(string name = "chip_name_block");
        super.new(name, UVM_NO_COVERAGE);
    endfunction

    // Function : build
    virtual function void build();
        //BLOCK_NAME
        block_name   =   block_name_block::type_id::create("block_name");
        block_name.configure(this, "block_name");
        block_name.build();

        //define default map and add reg/regfiles
        default_map= create_map("default_map", 'h0, 4, UVM_LITTLE_ENDIAN, 1);
        default_map.add_submap( block_name.default_map, 'h0);

        lock_model();
    endfunction

endclass : chip_name_block
`endif
