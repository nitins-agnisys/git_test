/**** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ***
** created by        :
** generated by      : Agnisys
** generated from    : D:\AgnisysProjects\git_test\Allegro_test\Test\test26.idsng
** IDesignSpec rev   : idsbatch v4.16.26.2

***** This code is generated with following settings ***
**---------------------------------------------------------------------------------------------------------------*/



#include "Access.h"
#include "bkls.h"

namespace DUOLOG
{
    
    /**
    * bkls class constructor.
    * This creates instances of all objects required to represent the registers
    * and memories within the bkls component.
    */
    bkls::bkls()
    {
        // Create register objects
        createRegisters();
        // Create memory objects
        createMemories();
        // Locate registers
        locateRegisters();
        // Locate memories
        locateMemories();
    }
    /**
    * Creates register objects
    */
    void bkls::createRegisters()
    {
        // Create a new instance of the regname class to represent regname register
        m_regregname = new regname;
        return;
    }
    
    /**
    * Creates memory objects
    */
    void bkls::createMemories()
    {
        return;
    }
    /**
    * Locates register objects
    */
    void bkls::locateRegisters()
    {
        // Create a new instance of the LocatedRegister object to represent regname register
        // at address 0x000
        m_locbkls_intfregname = new LocatedRegister<U8T> (
        m_regregname->getRegister(),
        BKLS_INTF_REGNAME_ADDRESS,
        WRITE, READ);
        return;
    }
    
    /**
    * Locates memory objects
    */
    void bkls::locateMemories()
    {
        return;
    }
    /**
    * Initialises all registers within component to power-on-reset state.
    */
    void bkls::initialise()
    {
        m_regregname->getRegister()->initialise();
        return;
    }
    
    /**
    * Returns a pointer to the regname object representing regname
    * @return Pointer to the  regname object representing regname (regname *).
    */
    regname * bkls::getregname()
    {
        return  m_regregname;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing regname at address 0x000
    * @return Pointer to LocatedRegister object representing regname at address 0x000
    *         (LocatedRegister *).
    */
    LocatedRegister<U8T> * bkls::getbkls_intfregname()
    {
        return  m_locbkls_intfregname;
    }
    
    /**
    * Write access function for regname at address 0x000
    * @param Register data value (U8T).
    * @param Register data mask (U8T).
    */
    void bkls::writebkls_intfregname(U8T data, U8T dataMask)
    {
        m_locbkls_intfregname->write(data, dataMask);
    }
    
    /**
    * Write access function for bkls component bkls_intf transaction target.
    * @param Register address value ().
    * @param Register data value ().
    * @param Register data mask ().
    */
    void bkls::writebkls_intf( address,  data,  dataMask)
    {
        
        switch (address)
        {
            // bkls_intfregname
            case BKLS_INTF_REGNAME_ADDRESS:
            writebkls_intfregname((U8T)data, (U8T)dataMask);
            break;
            // Default
            default:
            break;
        }
        return;
    }
    
    /**
    * Write byte lanes access function for bkls component bkls_intf transaction target.
    * @param Register address value ().
    * @param Byte lane enable (U8T).
    * @param Register data value ().
    */
    void bkls::writeByteLanesbkls_intf( address, U8T BE,  data)
    {
        // Determine data mask
        dataMask = 0;
        for (int i = 0; i < 4; i++)
        {
            if (((BE >> i) % 2) == 1)
            {
                dataMask |= ()0xff << (i * 8);
            }
        }
        
        // bkls_intfregname (in byte lanes 0 to 3)
        if ((address == (BKLS_INTF_REGNAME_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writebkls_intfregname((U8T)data, (U8T)dataMask);
        }
        
        return;
    }
    
    /**
    * Write access function for bkls component.
    * @param Register address value ().
    * @param Transaction port (transactionPortType).
    * @param Register data value ().
    * @param Register data mask ().
    */
    void bkls::write(transactionPortType transactionPort,  address,  data,  dataMask)
    {
        switch (transactionPort)
        {
            // bkls_intf
            case bkls_INTF_TRANSACTION_PORT:
            writebkls_intf(address, ()data, ()dataMask);
            break;
            // Default
            default:
            break;
        }
        return;
    }
    
    /**
    * Read access function for regname at address 0x000
    * @return Register data value (U8T).
    */
    U8T bkls::readbkls_intfregname()
    {
        return  m_locbkls_intfregname->read();
    }
    
    /**
    * Read access function for bkls_intf component bkls_intf transaction target.
    * @param Register address value ().
    * @retrun Register data value ().
    */
    bkls::readbkls_intf( address )
    {
        // Initialise return value
        retVal = 0;
        switch (address)
        {
            // bkls_intfregname
            case BKLS_INTF_REGNAME_ADDRESS:
            retVal = readbkls_intfregname();
            break;
            // Default
            default:
            break;
        }
        return retVal;
    }
    
    /**
    * Read byte lanes access function for bkls component bkls_intf transaction target.
    * @param Register address value ().
    * @param Byte lane enable (U8T).
    * @param Register data value ().
    */
    bkls::readByteLanesbkls_intf( address, U8T BE)
    {
        // Initialise return value
        retVal = 0;
        
        // Determine data mask
        dataMask = 0;
        for (int i = 0; i < 4; i++)
        {
            if (((BE >> i) % 2) == 1)
            {
                dataMask |= ()0xff << (i * 8);
            }
        }
        
        // bkls_intfregname (in byte lanes 0 to 3)
        if ((address == (BKLS_INTF_REGNAME_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U8T)(readbkls_intfregname() & (U8T)dataMask);
        }
        
        return retVal;
    }
    
    /**
    * Read access function for bkls component.
    * @param Register address value ().
    * @param Transaction port (transactionPortType).
    * @param Register data value ().
    */
    bkls::read(transactionPortType transactionPort,  address)
    {
        // Initialise return value
        retVal = 0;
        switch (transactionPort)
        {
            // bkls_intf
            case bkls_INTF_TRANSACTION_PORT:
            retVal = readbkls_intf(address);
            break;
            // Default
            default:
            break;
        }
        return retVal;
    }
    
} // namespace DUOLOG
