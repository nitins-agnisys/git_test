/**** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ***
** created by        :
** generated by      : Agnisys
** generated from    : D:\AgnisysProjects\git_test\Allegro_test\Test\test6.idsng
** IDesignSpec rev   : idsbatch v4.16.26.2

***** This code is generated with following settings ***
**---------------------------------------------------------------------------------------------------------------*/



#include "Access.h"
#include "blk1.h"

namespace DUOLOG
{
    
    /**
    * blk1 class constructor.
    * This creates instances of all objects required to represent the registers
    * and memories within the blk1 component.
    */
    blk1::blk1()
    {
        // Create register objects
        createRegisters();
        // Create memory objects
        createMemories();
        // Locate registers
        locateRegisters();
        // Locate memories
        locateMemories();
    }
    /**
    * Creates register objects
    */
    void blk1::createRegisters()
    {
        // Create a new instance of the reg1 class to represent reg1 register
        m_regreg1 = new reg1;
        return;
    }
    
    /**
    * Creates memory objects
    */
    void blk1::createMemories()
    {
        return;
    }
    /**
    * Locates register objects
    */
    void blk1::locateRegisters()
    {
        // Create a new instance of the LocatedRegister object to represent reg1 register
        // at address 0x000
        m_locblk1_intfreg1 = new LocatedRegister<U16T> (
        m_regreg1->getRegister(),
        BLK1_INTF_REG1_ADDRESS,
        WRITE, READ);
        return;
    }
    
    /**
    * Locates memory objects
    */
    void blk1::locateMemories()
    {
        return;
    }
    /**
    * Initialises all registers within component to power-on-reset state.
    */
    void blk1::initialise()
    {
        m_regreg1->getRegister()->initialise();
        return;
    }
    
    /**
    * Returns a pointer to the reg1 object representing reg1
    * @return Pointer to the  reg1 object representing reg1 (reg1 *).
    */
    reg1 * blk1::getreg1()
    {
        return  m_regreg1;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing reg1 at address 0x000
    * @return Pointer to LocatedRegister object representing reg1 at address 0x000
    *         (LocatedRegister *).
    */
    LocatedRegister<U16T> * blk1::getblk1_intfreg1()
    {
        return  m_locblk1_intfreg1;
    }
    
    /**
    * Write access function for reg1 at address 0x000
    * @param Register data value (U16T).
    * @param Register data mask (U16T).
    */
    void blk1::writeblk1_intfreg1(U16T data, U16T dataMask)
    {
        m_locblk1_intfreg1->write(data, dataMask);
    }
    
    /**
    * Write access function for blk1 component blk1_intf transaction target.
    * @param Register address value (U32T).
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blk1::writeblk1_intf(U32T address, U32T data, U32T dataMask)
    {
        
        switch (address)
        {
            // blk1_intfreg1
            case BLK1_INTF_REG1_ADDRESS:
            writeblk1_intfreg1((U16T)data, (U16T)dataMask);
            break;
            // Default
            default:
            break;
        }
        return;
    }
    
    /**
    * Write byte lanes access function for blk1 component blk1_intf transaction target.
    * @param Register address value (U32T).
    * @param Byte lane enable (U8T).
    * @param Register data value (U32T).
    */
    void blk1::writeByteLanesblk1_intf(U32T address, U8T BE, U32T data)
    {
        // Determine data mask
        U32T dataMask = 0;
        for (int i = 0; i < 4; i++)
        {
            if (((BE >> i) % 2) == 1)
            {
                dataMask |= (U32T)0xff << (i * 8);
            }
        }
        
        // blk1_intfreg1 (in byte lanes 0 to 3)
        if ((address == (BLK1_INTF_REG1_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblk1_intfreg1((U16T)data, (U16T)dataMask);
        }
        
        return;
    }
    
    /**
    * Write access function for blk1 component.
    * @param Register address value (U32T).
    * @param Transaction port (transactionPortType).
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blk1::write(transactionPortType transactionPort, U32T address, U32T data, U32T dataMask)
    {
        switch (transactionPort)
        {
            // blk1_intf
            case blk1_INTF_TRANSACTION_PORT:
            writeblk1_intf(address, (U32T)data, (U32T)dataMask);
            break;
            // Default
            default:
            break;
        }
        return;
    }
    
    /**
    * Read access function for reg1 at address 0x000
    * @return Register data value (U16T).
    */
    U16T blk1::readblk1_intfreg1()
    {
        return  m_locblk1_intfreg1->read();
    }
    
    /**
    * Read access function for blk1_intf component blk1_intf transaction target.
    * @param Register address value (U32T).
    * @retrun Register data value (U32T).
    */
    U32T blk1::readblk1_intf(U32T address )
    {
        // Initialise return value
        U32T retVal = 0;
        switch (address)
        {
            // blk1_intfreg1
            case BLK1_INTF_REG1_ADDRESS:
            retVal = readblk1_intfreg1();
            break;
            // Default
            default:
            break;
        }
        return retVal;
    }
    
    /**
    * Read byte lanes access function for blk1 component blk1_intf transaction target.
    * @param Register address value (U32T).
    * @param Byte lane enable (U8T).
    * @param Register data value (U32T).
    */
    U32T blk1::readByteLanesblk1_intf(U32T address, U8T BE)
    {
        // Initialise return value
        U32T retVal = 0;
        
        // Determine data mask
        U32T dataMask = 0;
        for (int i = 0; i < 4; i++)
        {
            if (((BE >> i) % 2) == 1)
            {
                dataMask |= (U32T)0xff << (i * 8);
            }
        }
        
        // blk1_intfreg1 (in byte lanes 0 to 3)
        if ((address == (BLK1_INTF_REG1_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U16T)(readblk1_intfreg1() & (U16T)dataMask);
        }
        
        return retVal;
    }
    
    /**
    * Read access function for blk1 component.
    * @param Register address value (U32T).
    * @param Transaction port (transactionPortType).
    * @param Register data value (U32T).
    */
    U32T blk1::read(transactionPortType transactionPort, U32T address)
    {
        // Initialise return value
        U32T retVal = 0;
        switch (transactionPort)
        {
            // blk1_intf
            case blk1_INTF_TRANSACTION_PORT:
            retVal = readblk1_intf(address);
            break;
            // Default
            default:
            break;
        }
        return retVal;
    }
    
} // namespace DUOLOG
