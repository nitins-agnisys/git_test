/**** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ***
** created by        :
** generated by      : Agnisys
** generated from    : D:\AgnisysProjects\git_test\Allegro_test\Test\test26.idsng
** IDesignSpec rev   : idsbatch v4.16.26.2

***** This code is generated with following settings ***
**---------------------------------------------------------------------------------------------------------------*/



#include "Access.h"
#include "blockname.h"

namespace DUOLOG
{
    
    /**
    * blockname class constructor.
    * This creates instances of all objects required to represent the registers
    * and memories within the blockname component.
    */
    blockname::blockname()
    {
        // Create register objects
        createRegisters();
        // Create memory objects
        createMemories();
        // Locate registers
        locateRegisters();
        // Locate memories
        locateMemories();
    }
    /**
    * Creates register objects
    */
    void blockname::createRegisters()
    {
        // Create a new instance of the Reg0 class to represent volatileReg0_0 register
        m_regvolatileReg0_0 = new Reg0;
        // Create a new instance of the Reg1 class to represent volatileReg1_0 register
        m_regvolatileReg1_0 = new Reg1;
        // Create a new instance of the Reg2 class to represent shadowReg2_0 register
        m_regshadowReg2_0 = new Reg2;
        // Create a new instance of the Reg3 class to represent shadowReg3_0 register
        m_regshadowReg3_0 = new Reg3;
        // Create a new instance of the Reg4 class to represent shadowReg4_0 register
        m_regshadowReg4_0 = new Reg4;
        // Create a new instance of the Reg5 class to represent shadowReg5_0 register
        m_regshadowReg5_0 = new Reg5;
        // Create a new instance of the Reg6 class to represent shadowReg6_0 register
        m_regshadowReg6_0 = new Reg6;
        // Create a new instance of the Reg7 class to represent shadowReg7_0 register
        m_regshadowReg7_0 = new Reg7;
        // Create a new instance of the Reg8 class to represent shadowReg8_0 register
        m_regshadowReg8_0 = new Reg8;
        // Create a new instance of the Reg9 class to represent shadowReg9_0 register
        m_regshadowReg9_0 = new Reg9;
        // Create a new instance of the Reg10 class to represent shadowReg10_0 register
        m_regshadowReg10_0 = new Reg10;
        // Create a new instance of the Reg11 class to represent shadowReg11_0 register
        m_regshadowReg11_0 = new Reg11;
        // Create a new instance of the Reg12 class to represent shadowReg12_0 register
        m_regshadowReg12_0 = new Reg12;
        // Create a new instance of the Reg13 class to represent shadowReg13_0 register
        m_regshadowReg13_0 = new Reg13;
        // Create a new instance of the Reg14 class to represent shadowReg14_0 register
        m_regshadowReg14_0 = new Reg14;
        // Create a new instance of the Reg15 class to represent shadowReg15_0 register
        m_regshadowReg15_0 = new Reg15;
        // Create a new instance of the Reg16 class to represent shadowReg16_0 register
        m_regshadowReg16_0 = new Reg16;
        // Create a new instance of the Reg17 class to represent shadowReg17_0 register
        m_regshadowReg17_0 = new Reg17;
        // Create a new instance of the Reg18 class to represent shadowReg18_0 register
        m_regshadowReg18_0 = new Reg18;
        // Create a new instance of the Reg19 class to represent shadowReg19_0 register
        m_regshadowReg19_0 = new Reg19;
        // Create a new instance of the Reg20 class to represent shadowReg20_0 register
        m_regshadowReg20_0 = new Reg20;
        // Create a new instance of the Reg21 class to represent shadowReg21_0 register
        m_regshadowReg21_0 = new Reg21;
        // Create a new instance of the Reg22 class to represent eepromReg22_0 register
        m_regeepromReg22_0 = new Reg22;
        // Create a new instance of the Reg23 class to represent eepromReg23_0 register
        m_regeepromReg23_0 = new Reg23;
        // Create a new instance of the Reg24 class to represent eepromReg24_0 register
        m_regeepromReg24_0 = new Reg24;
        // Create a new instance of the Reg25 class to represent eepromReg25_0 register
        m_regeepromReg25_0 = new Reg25;
        // Create a new instance of the Reg26 class to represent eepromReg26_0 register
        m_regeepromReg26_0 = new Reg26;
        // Create a new instance of the Reg27 class to represent eepromReg27_0 register
        m_regeepromReg27_0 = new Reg27;
        // Create a new instance of the Reg28 class to represent eepromReg28_0 register
        m_regeepromReg28_0 = new Reg28;
        // Create a new instance of the Reg29 class to represent eepromReg29_0 register
        m_regeepromReg29_0 = new Reg29;
        // Create a new instance of the Reg30 class to represent eepromReg30_0 register
        m_regeepromReg30_0 = new Reg30;
        // Create a new instance of the Reg31 class to represent eepromReg31_0 register
        m_regeepromReg31_0 = new Reg31;
        // Create a new instance of the Reg32 class to represent eepromReg32_0 register
        m_regeepromReg32_0 = new Reg32;
        // Create a new instance of the Reg33 class to represent eepromReg33_0 register
        m_regeepromReg33_0 = new Reg33;
        // Create a new instance of the Reg34 class to represent eepromReg34_0 register
        m_regeepromReg34_0 = new Reg34;
        // Create a new instance of the Reg35 class to represent eepromReg35_0 register
        m_regeepromReg35_0 = new Reg35;
        // Create a new instance of the Reg36 class to represent eepromReg36_0 register
        m_regeepromReg36_0 = new Reg36;
        // Create a new instance of the Reg37 class to represent eepromReg37_0 register
        m_regeepromReg37_0 = new Reg37;
        // Create a new instance of the Reg38 class to represent eepromReg38_0 register
        m_regeepromReg38_0 = new Reg38;
        // Create a new instance of the Reg39 class to represent eepromReg39_0 register
        m_regeepromReg39_0 = new Reg39;
        // Create a new instance of the Reg40 class to represent eepromReg40_0 register
        m_regeepromReg40_0 = new Reg40;
        // Create a new instance of the Reg41 class to represent eepromReg41_0 register
        m_regeepromReg41_0 = new Reg41;
        return;
    }
    
    /**
    * Creates memory objects
    */
    void blockname::createMemories()
    {
        return;
    }
    /**
    * Locates register objects
    */
    void blockname::locateRegisters()
    {
        // Create a new instance of the LocatedRegister object to represent volatileReg0_0 register
        // at address 0x000
        m_locblockname_intfvolatileReg0_0 = new LocatedRegister<U32T> (
        m_regvolatileReg0_0->getRegister(),
        BLOCKNAME_INTF_VOLATILEREG0_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent volatileReg1_0 register
        // at address 0x4
        m_locblockname_intfvolatileReg1_0 = new LocatedRegister<U32T> (
        m_regvolatileReg1_0->getRegister(),
        BLOCKNAME_INTF_VOLATILEREG1_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent shadowReg2_0 register
        // at address 0x8
        m_locblockname_intfshadowReg2_0 = new LocatedRegister<U32T> (
        m_regshadowReg2_0->getRegister(),
        BLOCKNAME_INTF_SHADOWREG2_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent shadowReg3_0 register
        // at address 0xc
        m_locblockname_intfshadowReg3_0 = new LocatedRegister<U32T> (
        m_regshadowReg3_0->getRegister(),
        BLOCKNAME_INTF_SHADOWREG3_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent shadowReg4_0 register
        // at address 0x10
        m_locblockname_intfshadowReg4_0 = new LocatedRegister<U32T> (
        m_regshadowReg4_0->getRegister(),
        BLOCKNAME_INTF_SHADOWREG4_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent shadowReg5_0 register
        // at address 0x14
        m_locblockname_intfshadowReg5_0 = new LocatedRegister<U32T> (
        m_regshadowReg5_0->getRegister(),
        BLOCKNAME_INTF_SHADOWREG5_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent shadowReg6_0 register
        // at address 0x18
        m_locblockname_intfshadowReg6_0 = new LocatedRegister<U32T> (
        m_regshadowReg6_0->getRegister(),
        BLOCKNAME_INTF_SHADOWREG6_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent shadowReg7_0 register
        // at address 0x1c
        m_locblockname_intfshadowReg7_0 = new LocatedRegister<U32T> (
        m_regshadowReg7_0->getRegister(),
        BLOCKNAME_INTF_SHADOWREG7_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent shadowReg8_0 register
        // at address 0x20
        m_locblockname_intfshadowReg8_0 = new LocatedRegister<U32T> (
        m_regshadowReg8_0->getRegister(),
        BLOCKNAME_INTF_SHADOWREG8_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent shadowReg9_0 register
        // at address 0x24
        m_locblockname_intfshadowReg9_0 = new LocatedRegister<U32T> (
        m_regshadowReg9_0->getRegister(),
        BLOCKNAME_INTF_SHADOWREG9_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent shadowReg10_0 register
        // at address 0x28
        m_locblockname_intfshadowReg10_0 = new LocatedRegister<U32T> (
        m_regshadowReg10_0->getRegister(),
        BLOCKNAME_INTF_SHADOWREG10_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent shadowReg11_0 register
        // at address 0x2c
        m_locblockname_intfshadowReg11_0 = new LocatedRegister<U32T> (
        m_regshadowReg11_0->getRegister(),
        BLOCKNAME_INTF_SHADOWREG11_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent shadowReg12_0 register
        // at address 0x30
        m_locblockname_intfshadowReg12_0 = new LocatedRegister<U32T> (
        m_regshadowReg12_0->getRegister(),
        BLOCKNAME_INTF_SHADOWREG12_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent shadowReg13_0 register
        // at address 0x34
        m_locblockname_intfshadowReg13_0 = new LocatedRegister<U32T> (
        m_regshadowReg13_0->getRegister(),
        BLOCKNAME_INTF_SHADOWREG13_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent shadowReg14_0 register
        // at address 0x38
        m_locblockname_intfshadowReg14_0 = new LocatedRegister<U32T> (
        m_regshadowReg14_0->getRegister(),
        BLOCKNAME_INTF_SHADOWREG14_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent shadowReg15_0 register
        // at address 0x3c
        m_locblockname_intfshadowReg15_0 = new LocatedRegister<U32T> (
        m_regshadowReg15_0->getRegister(),
        BLOCKNAME_INTF_SHADOWREG15_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent shadowReg16_0 register
        // at address 0x40
        m_locblockname_intfshadowReg16_0 = new LocatedRegister<U32T> (
        m_regshadowReg16_0->getRegister(),
        BLOCKNAME_INTF_SHADOWREG16_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent shadowReg17_0 register
        // at address 0x44
        m_locblockname_intfshadowReg17_0 = new LocatedRegister<U32T> (
        m_regshadowReg17_0->getRegister(),
        BLOCKNAME_INTF_SHADOWREG17_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent shadowReg18_0 register
        // at address 0x48
        m_locblockname_intfshadowReg18_0 = new LocatedRegister<U32T> (
        m_regshadowReg18_0->getRegister(),
        BLOCKNAME_INTF_SHADOWREG18_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent shadowReg19_0 register
        // at address 0x4c
        m_locblockname_intfshadowReg19_0 = new LocatedRegister<U32T> (
        m_regshadowReg19_0->getRegister(),
        BLOCKNAME_INTF_SHADOWREG19_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent shadowReg20_0 register
        // at address 0x50
        m_locblockname_intfshadowReg20_0 = new LocatedRegister<U32T> (
        m_regshadowReg20_0->getRegister(),
        BLOCKNAME_INTF_SHADOWREG20_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent shadowReg21_0 register
        // at address 0x54
        m_locblockname_intfshadowReg21_0 = new LocatedRegister<U32T> (
        m_regshadowReg21_0->getRegister(),
        BLOCKNAME_INTF_SHADOWREG21_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent eepromReg22_0 register
        // at address 0x58
        m_locblockname_intfeepromReg22_0 = new LocatedRegister<U32T> (
        m_regeepromReg22_0->getRegister(),
        BLOCKNAME_INTF_EEPROMREG22_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent eepromReg23_0 register
        // at address 0x5c
        m_locblockname_intfeepromReg23_0 = new LocatedRegister<U32T> (
        m_regeepromReg23_0->getRegister(),
        BLOCKNAME_INTF_EEPROMREG23_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent eepromReg24_0 register
        // at address 0x60
        m_locblockname_intfeepromReg24_0 = new LocatedRegister<U32T> (
        m_regeepromReg24_0->getRegister(),
        BLOCKNAME_INTF_EEPROMREG24_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent eepromReg25_0 register
        // at address 0x64
        m_locblockname_intfeepromReg25_0 = new LocatedRegister<U32T> (
        m_regeepromReg25_0->getRegister(),
        BLOCKNAME_INTF_EEPROMREG25_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent eepromReg26_0 register
        // at address 0x68
        m_locblockname_intfeepromReg26_0 = new LocatedRegister<U32T> (
        m_regeepromReg26_0->getRegister(),
        BLOCKNAME_INTF_EEPROMREG26_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent eepromReg27_0 register
        // at address 0x6c
        m_locblockname_intfeepromReg27_0 = new LocatedRegister<U32T> (
        m_regeepromReg27_0->getRegister(),
        BLOCKNAME_INTF_EEPROMREG27_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent eepromReg28_0 register
        // at address 0x70
        m_locblockname_intfeepromReg28_0 = new LocatedRegister<U32T> (
        m_regeepromReg28_0->getRegister(),
        BLOCKNAME_INTF_EEPROMREG28_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent eepromReg29_0 register
        // at address 0x74
        m_locblockname_intfeepromReg29_0 = new LocatedRegister<U32T> (
        m_regeepromReg29_0->getRegister(),
        BLOCKNAME_INTF_EEPROMREG29_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent eepromReg30_0 register
        // at address 0x78
        m_locblockname_intfeepromReg30_0 = new LocatedRegister<U32T> (
        m_regeepromReg30_0->getRegister(),
        BLOCKNAME_INTF_EEPROMREG30_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent eepromReg31_0 register
        // at address 0x7c
        m_locblockname_intfeepromReg31_0 = new LocatedRegister<U32T> (
        m_regeepromReg31_0->getRegister(),
        BLOCKNAME_INTF_EEPROMREG31_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent eepromReg32_0 register
        // at address 0x80
        m_locblockname_intfeepromReg32_0 = new LocatedRegister<U32T> (
        m_regeepromReg32_0->getRegister(),
        BLOCKNAME_INTF_EEPROMREG32_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent eepromReg33_0 register
        // at address 0x84
        m_locblockname_intfeepromReg33_0 = new LocatedRegister<U32T> (
        m_regeepromReg33_0->getRegister(),
        BLOCKNAME_INTF_EEPROMREG33_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent eepromReg34_0 register
        // at address 0x88
        m_locblockname_intfeepromReg34_0 = new LocatedRegister<U32T> (
        m_regeepromReg34_0->getRegister(),
        BLOCKNAME_INTF_EEPROMREG34_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent eepromReg35_0 register
        // at address 0x8c
        m_locblockname_intfeepromReg35_0 = new LocatedRegister<U32T> (
        m_regeepromReg35_0->getRegister(),
        BLOCKNAME_INTF_EEPROMREG35_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent eepromReg36_0 register
        // at address 0x90
        m_locblockname_intfeepromReg36_0 = new LocatedRegister<U32T> (
        m_regeepromReg36_0->getRegister(),
        BLOCKNAME_INTF_EEPROMREG36_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent eepromReg37_0 register
        // at address 0x94
        m_locblockname_intfeepromReg37_0 = new LocatedRegister<U32T> (
        m_regeepromReg37_0->getRegister(),
        BLOCKNAME_INTF_EEPROMREG37_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent eepromReg38_0 register
        // at address 0x98
        m_locblockname_intfeepromReg38_0 = new LocatedRegister<U32T> (
        m_regeepromReg38_0->getRegister(),
        BLOCKNAME_INTF_EEPROMREG38_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent eepromReg39_0 register
        // at address 0x9c
        m_locblockname_intfeepromReg39_0 = new LocatedRegister<U32T> (
        m_regeepromReg39_0->getRegister(),
        BLOCKNAME_INTF_EEPROMREG39_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent eepromReg40_0 register
        // at address 0xa0
        m_locblockname_intfeepromReg40_0 = new LocatedRegister<U32T> (
        m_regeepromReg40_0->getRegister(),
        BLOCKNAME_INTF_EEPROMREG40_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent eepromReg41_0 register
        // at address 0xa4
        m_locblockname_intfeepromReg41_0 = new LocatedRegister<U32T> (
        m_regeepromReg41_0->getRegister(),
        BLOCKNAME_INTF_EEPROMREG41_0_ADDRESS,
        WRITE, READ);
        return;
    }
    
    /**
    * Locates memory objects
    */
    void blockname::locateMemories()
    {
        return;
    }
    /**
    * Initialises all registers within component to power-on-reset state.
    */
    void blockname::initialise()
    {
        m_regvolatileReg0_0->getRegister()->initialise();
        m_regvolatileReg1_0->getRegister()->initialise();
        m_regshadowReg2_0->getRegister()->initialise();
        m_regshadowReg3_0->getRegister()->initialise();
        m_regshadowReg4_0->getRegister()->initialise();
        m_regshadowReg5_0->getRegister()->initialise();
        m_regshadowReg6_0->getRegister()->initialise();
        m_regshadowReg7_0->getRegister()->initialise();
        m_regshadowReg8_0->getRegister()->initialise();
        m_regshadowReg9_0->getRegister()->initialise();
        m_regshadowReg10_0->getRegister()->initialise();
        m_regshadowReg11_0->getRegister()->initialise();
        m_regshadowReg12_0->getRegister()->initialise();
        m_regshadowReg13_0->getRegister()->initialise();
        m_regshadowReg14_0->getRegister()->initialise();
        m_regshadowReg15_0->getRegister()->initialise();
        m_regshadowReg16_0->getRegister()->initialise();
        m_regshadowReg17_0->getRegister()->initialise();
        m_regshadowReg18_0->getRegister()->initialise();
        m_regshadowReg19_0->getRegister()->initialise();
        m_regshadowReg20_0->getRegister()->initialise();
        m_regshadowReg21_0->getRegister()->initialise();
        m_regeepromReg22_0->getRegister()->initialise();
        m_regeepromReg23_0->getRegister()->initialise();
        m_regeepromReg24_0->getRegister()->initialise();
        m_regeepromReg25_0->getRegister()->initialise();
        m_regeepromReg26_0->getRegister()->initialise();
        m_regeepromReg27_0->getRegister()->initialise();
        m_regeepromReg28_0->getRegister()->initialise();
        m_regeepromReg29_0->getRegister()->initialise();
        m_regeepromReg30_0->getRegister()->initialise();
        m_regeepromReg31_0->getRegister()->initialise();
        m_regeepromReg32_0->getRegister()->initialise();
        m_regeepromReg33_0->getRegister()->initialise();
        m_regeepromReg34_0->getRegister()->initialise();
        m_regeepromReg35_0->getRegister()->initialise();
        m_regeepromReg36_0->getRegister()->initialise();
        m_regeepromReg37_0->getRegister()->initialise();
        m_regeepromReg38_0->getRegister()->initialise();
        m_regeepromReg39_0->getRegister()->initialise();
        m_regeepromReg40_0->getRegister()->initialise();
        m_regeepromReg41_0->getRegister()->initialise();
        return;
    }
    
    /**
    * Returns a pointer to the volatileReg0_0 object representing Reg0_0
    * @return Pointer to the  volatileReg0_0 object representing Reg0_0 (Reg0_0 *).
    */
    Reg0 * blockname::getvolatileReg0_0()
    {
        return  m_regvolatileReg0_0;
    }
    
    /**
    * Returns a pointer to the volatileReg1_0 object representing Reg1_0
    * @return Pointer to the  volatileReg1_0 object representing Reg1_0 (Reg1_0 *).
    */
    Reg1 * blockname::getvolatileReg1_0()
    {
        return  m_regvolatileReg1_0;
    }
    
    /**
    * Returns a pointer to the shadowReg2_0 object representing Reg2_0
    * @return Pointer to the  shadowReg2_0 object representing Reg2_0 (Reg2_0 *).
    */
    Reg2 * blockname::getshadowReg2_0()
    {
        return  m_regshadowReg2_0;
    }
    
    /**
    * Returns a pointer to the shadowReg3_0 object representing Reg3_0
    * @return Pointer to the  shadowReg3_0 object representing Reg3_0 (Reg3_0 *).
    */
    Reg3 * blockname::getshadowReg3_0()
    {
        return  m_regshadowReg3_0;
    }
    
    /**
    * Returns a pointer to the shadowReg4_0 object representing Reg4_0
    * @return Pointer to the  shadowReg4_0 object representing Reg4_0 (Reg4_0 *).
    */
    Reg4 * blockname::getshadowReg4_0()
    {
        return  m_regshadowReg4_0;
    }
    
    /**
    * Returns a pointer to the shadowReg5_0 object representing Reg5_0
    * @return Pointer to the  shadowReg5_0 object representing Reg5_0 (Reg5_0 *).
    */
    Reg5 * blockname::getshadowReg5_0()
    {
        return  m_regshadowReg5_0;
    }
    
    /**
    * Returns a pointer to the shadowReg6_0 object representing Reg6_0
    * @return Pointer to the  shadowReg6_0 object representing Reg6_0 (Reg6_0 *).
    */
    Reg6 * blockname::getshadowReg6_0()
    {
        return  m_regshadowReg6_0;
    }
    
    /**
    * Returns a pointer to the shadowReg7_0 object representing Reg7_0
    * @return Pointer to the  shadowReg7_0 object representing Reg7_0 (Reg7_0 *).
    */
    Reg7 * blockname::getshadowReg7_0()
    {
        return  m_regshadowReg7_0;
    }
    
    /**
    * Returns a pointer to the shadowReg8_0 object representing Reg8_0
    * @return Pointer to the  shadowReg8_0 object representing Reg8_0 (Reg8_0 *).
    */
    Reg8 * blockname::getshadowReg8_0()
    {
        return  m_regshadowReg8_0;
    }
    
    /**
    * Returns a pointer to the shadowReg9_0 object representing Reg9_0
    * @return Pointer to the  shadowReg9_0 object representing Reg9_0 (Reg9_0 *).
    */
    Reg9 * blockname::getshadowReg9_0()
    {
        return  m_regshadowReg9_0;
    }
    
    /**
    * Returns a pointer to the shadowReg10_0 object representing Reg10_0
    * @return Pointer to the  shadowReg10_0 object representing Reg10_0 (Reg10_0 *).
    */
    Reg10 * blockname::getshadowReg10_0()
    {
        return  m_regshadowReg10_0;
    }
    
    /**
    * Returns a pointer to the shadowReg11_0 object representing Reg11_0
    * @return Pointer to the  shadowReg11_0 object representing Reg11_0 (Reg11_0 *).
    */
    Reg11 * blockname::getshadowReg11_0()
    {
        return  m_regshadowReg11_0;
    }
    
    /**
    * Returns a pointer to the shadowReg12_0 object representing Reg12_0
    * @return Pointer to the  shadowReg12_0 object representing Reg12_0 (Reg12_0 *).
    */
    Reg12 * blockname::getshadowReg12_0()
    {
        return  m_regshadowReg12_0;
    }
    
    /**
    * Returns a pointer to the shadowReg13_0 object representing Reg13_0
    * @return Pointer to the  shadowReg13_0 object representing Reg13_0 (Reg13_0 *).
    */
    Reg13 * blockname::getshadowReg13_0()
    {
        return  m_regshadowReg13_0;
    }
    
    /**
    * Returns a pointer to the shadowReg14_0 object representing Reg14_0
    * @return Pointer to the  shadowReg14_0 object representing Reg14_0 (Reg14_0 *).
    */
    Reg14 * blockname::getshadowReg14_0()
    {
        return  m_regshadowReg14_0;
    }
    
    /**
    * Returns a pointer to the shadowReg15_0 object representing Reg15_0
    * @return Pointer to the  shadowReg15_0 object representing Reg15_0 (Reg15_0 *).
    */
    Reg15 * blockname::getshadowReg15_0()
    {
        return  m_regshadowReg15_0;
    }
    
    /**
    * Returns a pointer to the shadowReg16_0 object representing Reg16_0
    * @return Pointer to the  shadowReg16_0 object representing Reg16_0 (Reg16_0 *).
    */
    Reg16 * blockname::getshadowReg16_0()
    {
        return  m_regshadowReg16_0;
    }
    
    /**
    * Returns a pointer to the shadowReg17_0 object representing Reg17_0
    * @return Pointer to the  shadowReg17_0 object representing Reg17_0 (Reg17_0 *).
    */
    Reg17 * blockname::getshadowReg17_0()
    {
        return  m_regshadowReg17_0;
    }
    
    /**
    * Returns a pointer to the shadowReg18_0 object representing Reg18_0
    * @return Pointer to the  shadowReg18_0 object representing Reg18_0 (Reg18_0 *).
    */
    Reg18 * blockname::getshadowReg18_0()
    {
        return  m_regshadowReg18_0;
    }
    
    /**
    * Returns a pointer to the shadowReg19_0 object representing Reg19_0
    * @return Pointer to the  shadowReg19_0 object representing Reg19_0 (Reg19_0 *).
    */
    Reg19 * blockname::getshadowReg19_0()
    {
        return  m_regshadowReg19_0;
    }
    
    /**
    * Returns a pointer to the shadowReg20_0 object representing Reg20_0
    * @return Pointer to the  shadowReg20_0 object representing Reg20_0 (Reg20_0 *).
    */
    Reg20 * blockname::getshadowReg20_0()
    {
        return  m_regshadowReg20_0;
    }
    
    /**
    * Returns a pointer to the shadowReg21_0 object representing Reg21_0
    * @return Pointer to the  shadowReg21_0 object representing Reg21_0 (Reg21_0 *).
    */
    Reg21 * blockname::getshadowReg21_0()
    {
        return  m_regshadowReg21_0;
    }
    
    /**
    * Returns a pointer to the eepromReg22_0 object representing Reg22_0
    * @return Pointer to the  eepromReg22_0 object representing Reg22_0 (Reg22_0 *).
    */
    Reg22 * blockname::geteepromReg22_0()
    {
        return  m_regeepromReg22_0;
    }
    
    /**
    * Returns a pointer to the eepromReg23_0 object representing Reg23_0
    * @return Pointer to the  eepromReg23_0 object representing Reg23_0 (Reg23_0 *).
    */
    Reg23 * blockname::geteepromReg23_0()
    {
        return  m_regeepromReg23_0;
    }
    
    /**
    * Returns a pointer to the eepromReg24_0 object representing Reg24_0
    * @return Pointer to the  eepromReg24_0 object representing Reg24_0 (Reg24_0 *).
    */
    Reg24 * blockname::geteepromReg24_0()
    {
        return  m_regeepromReg24_0;
    }
    
    /**
    * Returns a pointer to the eepromReg25_0 object representing Reg25_0
    * @return Pointer to the  eepromReg25_0 object representing Reg25_0 (Reg25_0 *).
    */
    Reg25 * blockname::geteepromReg25_0()
    {
        return  m_regeepromReg25_0;
    }
    
    /**
    * Returns a pointer to the eepromReg26_0 object representing Reg26_0
    * @return Pointer to the  eepromReg26_0 object representing Reg26_0 (Reg26_0 *).
    */
    Reg26 * blockname::geteepromReg26_0()
    {
        return  m_regeepromReg26_0;
    }
    
    /**
    * Returns a pointer to the eepromReg27_0 object representing Reg27_0
    * @return Pointer to the  eepromReg27_0 object representing Reg27_0 (Reg27_0 *).
    */
    Reg27 * blockname::geteepromReg27_0()
    {
        return  m_regeepromReg27_0;
    }
    
    /**
    * Returns a pointer to the eepromReg28_0 object representing Reg28_0
    * @return Pointer to the  eepromReg28_0 object representing Reg28_0 (Reg28_0 *).
    */
    Reg28 * blockname::geteepromReg28_0()
    {
        return  m_regeepromReg28_0;
    }
    
    /**
    * Returns a pointer to the eepromReg29_0 object representing Reg29_0
    * @return Pointer to the  eepromReg29_0 object representing Reg29_0 (Reg29_0 *).
    */
    Reg29 * blockname::geteepromReg29_0()
    {
        return  m_regeepromReg29_0;
    }
    
    /**
    * Returns a pointer to the eepromReg30_0 object representing Reg30_0
    * @return Pointer to the  eepromReg30_0 object representing Reg30_0 (Reg30_0 *).
    */
    Reg30 * blockname::geteepromReg30_0()
    {
        return  m_regeepromReg30_0;
    }
    
    /**
    * Returns a pointer to the eepromReg31_0 object representing Reg31_0
    * @return Pointer to the  eepromReg31_0 object representing Reg31_0 (Reg31_0 *).
    */
    Reg31 * blockname::geteepromReg31_0()
    {
        return  m_regeepromReg31_0;
    }
    
    /**
    * Returns a pointer to the eepromReg32_0 object representing Reg32_0
    * @return Pointer to the  eepromReg32_0 object representing Reg32_0 (Reg32_0 *).
    */
    Reg32 * blockname::geteepromReg32_0()
    {
        return  m_regeepromReg32_0;
    }
    
    /**
    * Returns a pointer to the eepromReg33_0 object representing Reg33_0
    * @return Pointer to the  eepromReg33_0 object representing Reg33_0 (Reg33_0 *).
    */
    Reg33 * blockname::geteepromReg33_0()
    {
        return  m_regeepromReg33_0;
    }
    
    /**
    * Returns a pointer to the eepromReg34_0 object representing Reg34_0
    * @return Pointer to the  eepromReg34_0 object representing Reg34_0 (Reg34_0 *).
    */
    Reg34 * blockname::geteepromReg34_0()
    {
        return  m_regeepromReg34_0;
    }
    
    /**
    * Returns a pointer to the eepromReg35_0 object representing Reg35_0
    * @return Pointer to the  eepromReg35_0 object representing Reg35_0 (Reg35_0 *).
    */
    Reg35 * blockname::geteepromReg35_0()
    {
        return  m_regeepromReg35_0;
    }
    
    /**
    * Returns a pointer to the eepromReg36_0 object representing Reg36_0
    * @return Pointer to the  eepromReg36_0 object representing Reg36_0 (Reg36_0 *).
    */
    Reg36 * blockname::geteepromReg36_0()
    {
        return  m_regeepromReg36_0;
    }
    
    /**
    * Returns a pointer to the eepromReg37_0 object representing Reg37_0
    * @return Pointer to the  eepromReg37_0 object representing Reg37_0 (Reg37_0 *).
    */
    Reg37 * blockname::geteepromReg37_0()
    {
        return  m_regeepromReg37_0;
    }
    
    /**
    * Returns a pointer to the eepromReg38_0 object representing Reg38_0
    * @return Pointer to the  eepromReg38_0 object representing Reg38_0 (Reg38_0 *).
    */
    Reg38 * blockname::geteepromReg38_0()
    {
        return  m_regeepromReg38_0;
    }
    
    /**
    * Returns a pointer to the eepromReg39_0 object representing Reg39_0
    * @return Pointer to the  eepromReg39_0 object representing Reg39_0 (Reg39_0 *).
    */
    Reg39 * blockname::geteepromReg39_0()
    {
        return  m_regeepromReg39_0;
    }
    
    /**
    * Returns a pointer to the eepromReg40_0 object representing Reg40_0
    * @return Pointer to the  eepromReg40_0 object representing Reg40_0 (Reg40_0 *).
    */
    Reg40 * blockname::geteepromReg40_0()
    {
        return  m_regeepromReg40_0;
    }
    
    /**
    * Returns a pointer to the eepromReg41_0 object representing Reg41_0
    * @return Pointer to the  eepromReg41_0 object representing Reg41_0 (Reg41_0 *).
    */
    Reg41 * blockname::geteepromReg41_0()
    {
        return  m_regeepromReg41_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing volatileReg0_0 at address 0x000
    * @return Pointer to LocatedRegister object representing volatileReg0_0 at address 0x000
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfvolatileReg0_0()
    {
        return  m_locblockname_intfvolatileReg0_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing volatileReg1_0 at address 0x4
    * @return Pointer to LocatedRegister object representing volatileReg1_0 at address 0x4
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfvolatileReg1_0()
    {
        return  m_locblockname_intfvolatileReg1_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing shadowReg2_0 at address 0x8
    * @return Pointer to LocatedRegister object representing shadowReg2_0 at address 0x8
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfshadowReg2_0()
    {
        return  m_locblockname_intfshadowReg2_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing shadowReg3_0 at address 0xc
    * @return Pointer to LocatedRegister object representing shadowReg3_0 at address 0xc
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfshadowReg3_0()
    {
        return  m_locblockname_intfshadowReg3_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing shadowReg4_0 at address 0x10
    * @return Pointer to LocatedRegister object representing shadowReg4_0 at address 0x10
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfshadowReg4_0()
    {
        return  m_locblockname_intfshadowReg4_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing shadowReg5_0 at address 0x14
    * @return Pointer to LocatedRegister object representing shadowReg5_0 at address 0x14
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfshadowReg5_0()
    {
        return  m_locblockname_intfshadowReg5_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing shadowReg6_0 at address 0x18
    * @return Pointer to LocatedRegister object representing shadowReg6_0 at address 0x18
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfshadowReg6_0()
    {
        return  m_locblockname_intfshadowReg6_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing shadowReg7_0 at address 0x1c
    * @return Pointer to LocatedRegister object representing shadowReg7_0 at address 0x1c
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfshadowReg7_0()
    {
        return  m_locblockname_intfshadowReg7_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing shadowReg8_0 at address 0x20
    * @return Pointer to LocatedRegister object representing shadowReg8_0 at address 0x20
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfshadowReg8_0()
    {
        return  m_locblockname_intfshadowReg8_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing shadowReg9_0 at address 0x24
    * @return Pointer to LocatedRegister object representing shadowReg9_0 at address 0x24
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfshadowReg9_0()
    {
        return  m_locblockname_intfshadowReg9_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing shadowReg10_0 at address 0x28
    * @return Pointer to LocatedRegister object representing shadowReg10_0 at address 0x28
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfshadowReg10_0()
    {
        return  m_locblockname_intfshadowReg10_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing shadowReg11_0 at address 0x2c
    * @return Pointer to LocatedRegister object representing shadowReg11_0 at address 0x2c
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfshadowReg11_0()
    {
        return  m_locblockname_intfshadowReg11_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing shadowReg12_0 at address 0x30
    * @return Pointer to LocatedRegister object representing shadowReg12_0 at address 0x30
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfshadowReg12_0()
    {
        return  m_locblockname_intfshadowReg12_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing shadowReg13_0 at address 0x34
    * @return Pointer to LocatedRegister object representing shadowReg13_0 at address 0x34
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfshadowReg13_0()
    {
        return  m_locblockname_intfshadowReg13_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing shadowReg14_0 at address 0x38
    * @return Pointer to LocatedRegister object representing shadowReg14_0 at address 0x38
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfshadowReg14_0()
    {
        return  m_locblockname_intfshadowReg14_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing shadowReg15_0 at address 0x3c
    * @return Pointer to LocatedRegister object representing shadowReg15_0 at address 0x3c
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfshadowReg15_0()
    {
        return  m_locblockname_intfshadowReg15_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing shadowReg16_0 at address 0x40
    * @return Pointer to LocatedRegister object representing shadowReg16_0 at address 0x40
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfshadowReg16_0()
    {
        return  m_locblockname_intfshadowReg16_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing shadowReg17_0 at address 0x44
    * @return Pointer to LocatedRegister object representing shadowReg17_0 at address 0x44
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfshadowReg17_0()
    {
        return  m_locblockname_intfshadowReg17_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing shadowReg18_0 at address 0x48
    * @return Pointer to LocatedRegister object representing shadowReg18_0 at address 0x48
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfshadowReg18_0()
    {
        return  m_locblockname_intfshadowReg18_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing shadowReg19_0 at address 0x4c
    * @return Pointer to LocatedRegister object representing shadowReg19_0 at address 0x4c
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfshadowReg19_0()
    {
        return  m_locblockname_intfshadowReg19_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing shadowReg20_0 at address 0x50
    * @return Pointer to LocatedRegister object representing shadowReg20_0 at address 0x50
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfshadowReg20_0()
    {
        return  m_locblockname_intfshadowReg20_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing shadowReg21_0 at address 0x54
    * @return Pointer to LocatedRegister object representing shadowReg21_0 at address 0x54
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfshadowReg21_0()
    {
        return  m_locblockname_intfshadowReg21_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing eepromReg22_0 at address 0x58
    * @return Pointer to LocatedRegister object representing eepromReg22_0 at address 0x58
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfeepromReg22_0()
    {
        return  m_locblockname_intfeepromReg22_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing eepromReg23_0 at address 0x5c
    * @return Pointer to LocatedRegister object representing eepromReg23_0 at address 0x5c
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfeepromReg23_0()
    {
        return  m_locblockname_intfeepromReg23_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing eepromReg24_0 at address 0x60
    * @return Pointer to LocatedRegister object representing eepromReg24_0 at address 0x60
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfeepromReg24_0()
    {
        return  m_locblockname_intfeepromReg24_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing eepromReg25_0 at address 0x64
    * @return Pointer to LocatedRegister object representing eepromReg25_0 at address 0x64
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfeepromReg25_0()
    {
        return  m_locblockname_intfeepromReg25_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing eepromReg26_0 at address 0x68
    * @return Pointer to LocatedRegister object representing eepromReg26_0 at address 0x68
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfeepromReg26_0()
    {
        return  m_locblockname_intfeepromReg26_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing eepromReg27_0 at address 0x6c
    * @return Pointer to LocatedRegister object representing eepromReg27_0 at address 0x6c
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfeepromReg27_0()
    {
        return  m_locblockname_intfeepromReg27_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing eepromReg28_0 at address 0x70
    * @return Pointer to LocatedRegister object representing eepromReg28_0 at address 0x70
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfeepromReg28_0()
    {
        return  m_locblockname_intfeepromReg28_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing eepromReg29_0 at address 0x74
    * @return Pointer to LocatedRegister object representing eepromReg29_0 at address 0x74
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfeepromReg29_0()
    {
        return  m_locblockname_intfeepromReg29_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing eepromReg30_0 at address 0x78
    * @return Pointer to LocatedRegister object representing eepromReg30_0 at address 0x78
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfeepromReg30_0()
    {
        return  m_locblockname_intfeepromReg30_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing eepromReg31_0 at address 0x7c
    * @return Pointer to LocatedRegister object representing eepromReg31_0 at address 0x7c
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfeepromReg31_0()
    {
        return  m_locblockname_intfeepromReg31_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing eepromReg32_0 at address 0x80
    * @return Pointer to LocatedRegister object representing eepromReg32_0 at address 0x80
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfeepromReg32_0()
    {
        return  m_locblockname_intfeepromReg32_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing eepromReg33_0 at address 0x84
    * @return Pointer to LocatedRegister object representing eepromReg33_0 at address 0x84
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfeepromReg33_0()
    {
        return  m_locblockname_intfeepromReg33_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing eepromReg34_0 at address 0x88
    * @return Pointer to LocatedRegister object representing eepromReg34_0 at address 0x88
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfeepromReg34_0()
    {
        return  m_locblockname_intfeepromReg34_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing eepromReg35_0 at address 0x8c
    * @return Pointer to LocatedRegister object representing eepromReg35_0 at address 0x8c
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfeepromReg35_0()
    {
        return  m_locblockname_intfeepromReg35_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing eepromReg36_0 at address 0x90
    * @return Pointer to LocatedRegister object representing eepromReg36_0 at address 0x90
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfeepromReg36_0()
    {
        return  m_locblockname_intfeepromReg36_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing eepromReg37_0 at address 0x94
    * @return Pointer to LocatedRegister object representing eepromReg37_0 at address 0x94
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfeepromReg37_0()
    {
        return  m_locblockname_intfeepromReg37_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing eepromReg38_0 at address 0x98
    * @return Pointer to LocatedRegister object representing eepromReg38_0 at address 0x98
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfeepromReg38_0()
    {
        return  m_locblockname_intfeepromReg38_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing eepromReg39_0 at address 0x9c
    * @return Pointer to LocatedRegister object representing eepromReg39_0 at address 0x9c
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfeepromReg39_0()
    {
        return  m_locblockname_intfeepromReg39_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing eepromReg40_0 at address 0xa0
    * @return Pointer to LocatedRegister object representing eepromReg40_0 at address 0xa0
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfeepromReg40_0()
    {
        return  m_locblockname_intfeepromReg40_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing eepromReg41_0 at address 0xa4
    * @return Pointer to LocatedRegister object representing eepromReg41_0 at address 0xa4
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * blockname::getblockname_intfeepromReg41_0()
    {
        return  m_locblockname_intfeepromReg41_0;
    }
    
    /**
    * Write access function for volatileReg0_0 at address 0x000
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfvolatileReg0_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfvolatileReg0_0->write(data, dataMask);
    }
    
    /**
    * Write access function for volatileReg1_0 at address 0x4
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfvolatileReg1_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfvolatileReg1_0->write(data, dataMask);
    }
    
    /**
    * Write access function for shadowReg2_0 at address 0x8
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfshadowReg2_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfshadowReg2_0->write(data, dataMask);
    }
    
    /**
    * Write access function for shadowReg3_0 at address 0xc
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfshadowReg3_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfshadowReg3_0->write(data, dataMask);
    }
    
    /**
    * Write access function for shadowReg4_0 at address 0x10
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfshadowReg4_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfshadowReg4_0->write(data, dataMask);
    }
    
    /**
    * Write access function for shadowReg5_0 at address 0x14
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfshadowReg5_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfshadowReg5_0->write(data, dataMask);
    }
    
    /**
    * Write access function for shadowReg6_0 at address 0x18
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfshadowReg6_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfshadowReg6_0->write(data, dataMask);
    }
    
    /**
    * Write access function for shadowReg7_0 at address 0x1c
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfshadowReg7_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfshadowReg7_0->write(data, dataMask);
    }
    
    /**
    * Write access function for shadowReg8_0 at address 0x20
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfshadowReg8_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfshadowReg8_0->write(data, dataMask);
    }
    
    /**
    * Write access function for shadowReg9_0 at address 0x24
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfshadowReg9_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfshadowReg9_0->write(data, dataMask);
    }
    
    /**
    * Write access function for shadowReg10_0 at address 0x28
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfshadowReg10_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfshadowReg10_0->write(data, dataMask);
    }
    
    /**
    * Write access function for shadowReg11_0 at address 0x2c
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfshadowReg11_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfshadowReg11_0->write(data, dataMask);
    }
    
    /**
    * Write access function for shadowReg12_0 at address 0x30
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfshadowReg12_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfshadowReg12_0->write(data, dataMask);
    }
    
    /**
    * Write access function for shadowReg13_0 at address 0x34
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfshadowReg13_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfshadowReg13_0->write(data, dataMask);
    }
    
    /**
    * Write access function for shadowReg14_0 at address 0x38
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfshadowReg14_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfshadowReg14_0->write(data, dataMask);
    }
    
    /**
    * Write access function for shadowReg15_0 at address 0x3c
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfshadowReg15_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfshadowReg15_0->write(data, dataMask);
    }
    
    /**
    * Write access function for shadowReg16_0 at address 0x40
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfshadowReg16_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfshadowReg16_0->write(data, dataMask);
    }
    
    /**
    * Write access function for shadowReg17_0 at address 0x44
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfshadowReg17_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfshadowReg17_0->write(data, dataMask);
    }
    
    /**
    * Write access function for shadowReg18_0 at address 0x48
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfshadowReg18_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfshadowReg18_0->write(data, dataMask);
    }
    
    /**
    * Write access function for shadowReg19_0 at address 0x4c
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfshadowReg19_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfshadowReg19_0->write(data, dataMask);
    }
    
    /**
    * Write access function for shadowReg20_0 at address 0x50
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfshadowReg20_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfshadowReg20_0->write(data, dataMask);
    }
    
    /**
    * Write access function for shadowReg21_0 at address 0x54
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfshadowReg21_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfshadowReg21_0->write(data, dataMask);
    }
    
    /**
    * Write access function for eepromReg22_0 at address 0x58
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfeepromReg22_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfeepromReg22_0->write(data, dataMask);
    }
    
    /**
    * Write access function for eepromReg23_0 at address 0x5c
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfeepromReg23_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfeepromReg23_0->write(data, dataMask);
    }
    
    /**
    * Write access function for eepromReg24_0 at address 0x60
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfeepromReg24_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfeepromReg24_0->write(data, dataMask);
    }
    
    /**
    * Write access function for eepromReg25_0 at address 0x64
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfeepromReg25_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfeepromReg25_0->write(data, dataMask);
    }
    
    /**
    * Write access function for eepromReg26_0 at address 0x68
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfeepromReg26_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfeepromReg26_0->write(data, dataMask);
    }
    
    /**
    * Write access function for eepromReg27_0 at address 0x6c
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfeepromReg27_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfeepromReg27_0->write(data, dataMask);
    }
    
    /**
    * Write access function for eepromReg28_0 at address 0x70
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfeepromReg28_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfeepromReg28_0->write(data, dataMask);
    }
    
    /**
    * Write access function for eepromReg29_0 at address 0x74
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfeepromReg29_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfeepromReg29_0->write(data, dataMask);
    }
    
    /**
    * Write access function for eepromReg30_0 at address 0x78
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfeepromReg30_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfeepromReg30_0->write(data, dataMask);
    }
    
    /**
    * Write access function for eepromReg31_0 at address 0x7c
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfeepromReg31_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfeepromReg31_0->write(data, dataMask);
    }
    
    /**
    * Write access function for eepromReg32_0 at address 0x80
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfeepromReg32_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfeepromReg32_0->write(data, dataMask);
    }
    
    /**
    * Write access function for eepromReg33_0 at address 0x84
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfeepromReg33_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfeepromReg33_0->write(data, dataMask);
    }
    
    /**
    * Write access function for eepromReg34_0 at address 0x88
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfeepromReg34_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfeepromReg34_0->write(data, dataMask);
    }
    
    /**
    * Write access function for eepromReg35_0 at address 0x8c
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfeepromReg35_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfeepromReg35_0->write(data, dataMask);
    }
    
    /**
    * Write access function for eepromReg36_0 at address 0x90
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfeepromReg36_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfeepromReg36_0->write(data, dataMask);
    }
    
    /**
    * Write access function for eepromReg37_0 at address 0x94
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfeepromReg37_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfeepromReg37_0->write(data, dataMask);
    }
    
    /**
    * Write access function for eepromReg38_0 at address 0x98
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfeepromReg38_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfeepromReg38_0->write(data, dataMask);
    }
    
    /**
    * Write access function for eepromReg39_0 at address 0x9c
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfeepromReg39_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfeepromReg39_0->write(data, dataMask);
    }
    
    /**
    * Write access function for eepromReg40_0 at address 0xa0
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfeepromReg40_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfeepromReg40_0->write(data, dataMask);
    }
    
    /**
    * Write access function for eepromReg41_0 at address 0xa4
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intfeepromReg41_0(U32T data, U32T dataMask)
    {
        m_locblockname_intfeepromReg41_0->write(data, dataMask);
    }
    
    /**
    * Write access function for blockname component blockname_intf transaction target.
    * @param Register address value (U32T).
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::writeblockname_intf(U32T address, U32T data, U32T dataMask)
    {
        
        switch (address)
        {
            // blockname_intfvolatileReg0_0
            case BLOCKNAME_INTF_VOLATILEREG0_0_ADDRESS:
            writeblockname_intfvolatileReg0_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfvolatileReg1_0
            case BLOCKNAME_INTF_VOLATILEREG1_0_ADDRESS:
            writeblockname_intfvolatileReg1_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfshadowReg2_0
            case BLOCKNAME_INTF_SHADOWREG2_0_ADDRESS:
            writeblockname_intfshadowReg2_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfshadowReg3_0
            case BLOCKNAME_INTF_SHADOWREG3_0_ADDRESS:
            writeblockname_intfshadowReg3_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfshadowReg4_0
            case BLOCKNAME_INTF_SHADOWREG4_0_ADDRESS:
            writeblockname_intfshadowReg4_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfshadowReg5_0
            case BLOCKNAME_INTF_SHADOWREG5_0_ADDRESS:
            writeblockname_intfshadowReg5_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfshadowReg6_0
            case BLOCKNAME_INTF_SHADOWREG6_0_ADDRESS:
            writeblockname_intfshadowReg6_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfshadowReg7_0
            case BLOCKNAME_INTF_SHADOWREG7_0_ADDRESS:
            writeblockname_intfshadowReg7_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfshadowReg8_0
            case BLOCKNAME_INTF_SHADOWREG8_0_ADDRESS:
            writeblockname_intfshadowReg8_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfshadowReg9_0
            case BLOCKNAME_INTF_SHADOWREG9_0_ADDRESS:
            writeblockname_intfshadowReg9_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfshadowReg10_0
            case BLOCKNAME_INTF_SHADOWREG10_0_ADDRESS:
            writeblockname_intfshadowReg10_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfshadowReg11_0
            case BLOCKNAME_INTF_SHADOWREG11_0_ADDRESS:
            writeblockname_intfshadowReg11_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfshadowReg12_0
            case BLOCKNAME_INTF_SHADOWREG12_0_ADDRESS:
            writeblockname_intfshadowReg12_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfshadowReg13_0
            case BLOCKNAME_INTF_SHADOWREG13_0_ADDRESS:
            writeblockname_intfshadowReg13_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfshadowReg14_0
            case BLOCKNAME_INTF_SHADOWREG14_0_ADDRESS:
            writeblockname_intfshadowReg14_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfshadowReg15_0
            case BLOCKNAME_INTF_SHADOWREG15_0_ADDRESS:
            writeblockname_intfshadowReg15_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfshadowReg16_0
            case BLOCKNAME_INTF_SHADOWREG16_0_ADDRESS:
            writeblockname_intfshadowReg16_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfshadowReg17_0
            case BLOCKNAME_INTF_SHADOWREG17_0_ADDRESS:
            writeblockname_intfshadowReg17_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfshadowReg18_0
            case BLOCKNAME_INTF_SHADOWREG18_0_ADDRESS:
            writeblockname_intfshadowReg18_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfshadowReg19_0
            case BLOCKNAME_INTF_SHADOWREG19_0_ADDRESS:
            writeblockname_intfshadowReg19_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfshadowReg20_0
            case BLOCKNAME_INTF_SHADOWREG20_0_ADDRESS:
            writeblockname_intfshadowReg20_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfshadowReg21_0
            case BLOCKNAME_INTF_SHADOWREG21_0_ADDRESS:
            writeblockname_intfshadowReg21_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfeepromReg22_0
            case BLOCKNAME_INTF_EEPROMREG22_0_ADDRESS:
            writeblockname_intfeepromReg22_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfeepromReg23_0
            case BLOCKNAME_INTF_EEPROMREG23_0_ADDRESS:
            writeblockname_intfeepromReg23_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfeepromReg24_0
            case BLOCKNAME_INTF_EEPROMREG24_0_ADDRESS:
            writeblockname_intfeepromReg24_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfeepromReg25_0
            case BLOCKNAME_INTF_EEPROMREG25_0_ADDRESS:
            writeblockname_intfeepromReg25_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfeepromReg26_0
            case BLOCKNAME_INTF_EEPROMREG26_0_ADDRESS:
            writeblockname_intfeepromReg26_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfeepromReg27_0
            case BLOCKNAME_INTF_EEPROMREG27_0_ADDRESS:
            writeblockname_intfeepromReg27_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfeepromReg28_0
            case BLOCKNAME_INTF_EEPROMREG28_0_ADDRESS:
            writeblockname_intfeepromReg28_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfeepromReg29_0
            case BLOCKNAME_INTF_EEPROMREG29_0_ADDRESS:
            writeblockname_intfeepromReg29_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfeepromReg30_0
            case BLOCKNAME_INTF_EEPROMREG30_0_ADDRESS:
            writeblockname_intfeepromReg30_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfeepromReg31_0
            case BLOCKNAME_INTF_EEPROMREG31_0_ADDRESS:
            writeblockname_intfeepromReg31_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfeepromReg32_0
            case BLOCKNAME_INTF_EEPROMREG32_0_ADDRESS:
            writeblockname_intfeepromReg32_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfeepromReg33_0
            case BLOCKNAME_INTF_EEPROMREG33_0_ADDRESS:
            writeblockname_intfeepromReg33_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfeepromReg34_0
            case BLOCKNAME_INTF_EEPROMREG34_0_ADDRESS:
            writeblockname_intfeepromReg34_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfeepromReg35_0
            case BLOCKNAME_INTF_EEPROMREG35_0_ADDRESS:
            writeblockname_intfeepromReg35_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfeepromReg36_0
            case BLOCKNAME_INTF_EEPROMREG36_0_ADDRESS:
            writeblockname_intfeepromReg36_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfeepromReg37_0
            case BLOCKNAME_INTF_EEPROMREG37_0_ADDRESS:
            writeblockname_intfeepromReg37_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfeepromReg38_0
            case BLOCKNAME_INTF_EEPROMREG38_0_ADDRESS:
            writeblockname_intfeepromReg38_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfeepromReg39_0
            case BLOCKNAME_INTF_EEPROMREG39_0_ADDRESS:
            writeblockname_intfeepromReg39_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfeepromReg40_0
            case BLOCKNAME_INTF_EEPROMREG40_0_ADDRESS:
            writeblockname_intfeepromReg40_0((U32T)data, (U32T)dataMask);
            break;
            // blockname_intfeepromReg41_0
            case BLOCKNAME_INTF_EEPROMREG41_0_ADDRESS:
            writeblockname_intfeepromReg41_0((U32T)data, (U32T)dataMask);
            break;
            // Default
            default:
            break;
        }
        return;
    }
    
    /**
    * Write byte lanes access function for blockname component blockname_intf transaction target.
    * @param Register address value (U32T).
    * @param Byte lane enable (U8T).
    * @param Register data value (U32T).
    */
    void blockname::writeByteLanesblockname_intf(U32T address, U8T BE, U32T data)
    {
        // Determine data mask
        U32T dataMask = 0;
        for (int i = 0; i < 4; i++)
        {
            if (((BE >> i) % 2) == 1)
            {
                dataMask |= (U32T)0xff << (i * 8);
            }
        }
        
        // blockname_intfReg0_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_VOLATILEREG0_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfvolatileReg0_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg1_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_VOLATILEREG1_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfvolatileReg1_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg2_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG2_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfshadowReg2_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg3_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG3_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfshadowReg3_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg4_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG4_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfshadowReg4_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg5_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG5_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfshadowReg5_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg6_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG6_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfshadowReg6_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg7_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG7_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfshadowReg7_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg8_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG8_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfshadowReg8_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg9_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG9_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfshadowReg9_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg10_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG10_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfshadowReg10_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg11_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG11_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfshadowReg11_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg12_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG12_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfshadowReg12_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg13_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG13_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfshadowReg13_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg14_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG14_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfshadowReg14_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg15_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG15_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfshadowReg15_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg16_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG16_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfshadowReg16_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg17_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG17_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfshadowReg17_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg18_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG18_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfshadowReg18_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg19_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG19_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfshadowReg19_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg20_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG20_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfshadowReg20_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg21_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG21_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfshadowReg21_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg22_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG22_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfeepromReg22_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg23_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG23_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfeepromReg23_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg24_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG24_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfeepromReg24_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg25_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG25_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfeepromReg25_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg26_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG26_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfeepromReg26_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg27_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG27_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfeepromReg27_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg28_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG28_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfeepromReg28_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg29_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG29_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfeepromReg29_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg30_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG30_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfeepromReg30_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg31_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG31_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfeepromReg31_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg32_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG32_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfeepromReg32_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg33_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG33_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfeepromReg33_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg34_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG34_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfeepromReg34_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg35_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG35_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfeepromReg35_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg36_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG36_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfeepromReg36_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg37_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG37_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfeepromReg37_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg38_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG38_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfeepromReg38_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg39_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG39_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfeepromReg39_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg40_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG40_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfeepromReg40_0((U32T)data, (U32T)dataMask);
        }
        
        // blockname_intfReg41_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG41_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writeblockname_intfeepromReg41_0((U32T)data, (U32T)dataMask);
        }
        
        return;
    }
    
    /**
    * Write access function for blockname component.
    * @param Register address value (U32T).
    * @param Transaction port (transactionPortType).
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void blockname::write(transactionPortType transactionPort, U32T address, U32T data, U32T dataMask)
    {
        switch (transactionPort)
        {
            // blockname_intf
            case blockname_INTF_TRANSACTION_PORT:
            writeblockname_intf(address, (U32T)data, (U32T)dataMask);
            break;
            // Default
            default:
            break;
        }
        return;
    }
    
    /**
    * Read access function for volatileReg0_0 at address 0x000
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfvolatileReg0_0()
    {
        return  m_locblockname_intfvolatileReg0_0->read();
    }
    
    /**
    * Read access function for volatileReg1_0 at address 0x4
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfvolatileReg1_0()
    {
        return  m_locblockname_intfvolatileReg1_0->read();
    }
    
    /**
    * Read access function for shadowReg2_0 at address 0x8
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfshadowReg2_0()
    {
        return  m_locblockname_intfshadowReg2_0->read();
    }
    
    /**
    * Read access function for shadowReg3_0 at address 0xc
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfshadowReg3_0()
    {
        return  m_locblockname_intfshadowReg3_0->read();
    }
    
    /**
    * Read access function for shadowReg4_0 at address 0x10
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfshadowReg4_0()
    {
        return  m_locblockname_intfshadowReg4_0->read();
    }
    
    /**
    * Read access function for shadowReg5_0 at address 0x14
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfshadowReg5_0()
    {
        return  m_locblockname_intfshadowReg5_0->read();
    }
    
    /**
    * Read access function for shadowReg6_0 at address 0x18
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfshadowReg6_0()
    {
        return  m_locblockname_intfshadowReg6_0->read();
    }
    
    /**
    * Read access function for shadowReg7_0 at address 0x1c
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfshadowReg7_0()
    {
        return  m_locblockname_intfshadowReg7_0->read();
    }
    
    /**
    * Read access function for shadowReg8_0 at address 0x20
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfshadowReg8_0()
    {
        return  m_locblockname_intfshadowReg8_0->read();
    }
    
    /**
    * Read access function for shadowReg9_0 at address 0x24
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfshadowReg9_0()
    {
        return  m_locblockname_intfshadowReg9_0->read();
    }
    
    /**
    * Read access function for shadowReg10_0 at address 0x28
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfshadowReg10_0()
    {
        return  m_locblockname_intfshadowReg10_0->read();
    }
    
    /**
    * Read access function for shadowReg11_0 at address 0x2c
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfshadowReg11_0()
    {
        return  m_locblockname_intfshadowReg11_0->read();
    }
    
    /**
    * Read access function for shadowReg12_0 at address 0x30
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfshadowReg12_0()
    {
        return  m_locblockname_intfshadowReg12_0->read();
    }
    
    /**
    * Read access function for shadowReg13_0 at address 0x34
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfshadowReg13_0()
    {
        return  m_locblockname_intfshadowReg13_0->read();
    }
    
    /**
    * Read access function for shadowReg14_0 at address 0x38
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfshadowReg14_0()
    {
        return  m_locblockname_intfshadowReg14_0->read();
    }
    
    /**
    * Read access function for shadowReg15_0 at address 0x3c
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfshadowReg15_0()
    {
        return  m_locblockname_intfshadowReg15_0->read();
    }
    
    /**
    * Read access function for shadowReg16_0 at address 0x40
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfshadowReg16_0()
    {
        return  m_locblockname_intfshadowReg16_0->read();
    }
    
    /**
    * Read access function for shadowReg17_0 at address 0x44
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfshadowReg17_0()
    {
        return  m_locblockname_intfshadowReg17_0->read();
    }
    
    /**
    * Read access function for shadowReg18_0 at address 0x48
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfshadowReg18_0()
    {
        return  m_locblockname_intfshadowReg18_0->read();
    }
    
    /**
    * Read access function for shadowReg19_0 at address 0x4c
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfshadowReg19_0()
    {
        return  m_locblockname_intfshadowReg19_0->read();
    }
    
    /**
    * Read access function for shadowReg20_0 at address 0x50
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfshadowReg20_0()
    {
        return  m_locblockname_intfshadowReg20_0->read();
    }
    
    /**
    * Read access function for shadowReg21_0 at address 0x54
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfshadowReg21_0()
    {
        return  m_locblockname_intfshadowReg21_0->read();
    }
    
    /**
    * Read access function for eepromReg22_0 at address 0x58
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfeepromReg22_0()
    {
        return  m_locblockname_intfeepromReg22_0->read();
    }
    
    /**
    * Read access function for eepromReg23_0 at address 0x5c
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfeepromReg23_0()
    {
        return  m_locblockname_intfeepromReg23_0->read();
    }
    
    /**
    * Read access function for eepromReg24_0 at address 0x60
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfeepromReg24_0()
    {
        return  m_locblockname_intfeepromReg24_0->read();
    }
    
    /**
    * Read access function for eepromReg25_0 at address 0x64
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfeepromReg25_0()
    {
        return  m_locblockname_intfeepromReg25_0->read();
    }
    
    /**
    * Read access function for eepromReg26_0 at address 0x68
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfeepromReg26_0()
    {
        return  m_locblockname_intfeepromReg26_0->read();
    }
    
    /**
    * Read access function for eepromReg27_0 at address 0x6c
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfeepromReg27_0()
    {
        return  m_locblockname_intfeepromReg27_0->read();
    }
    
    /**
    * Read access function for eepromReg28_0 at address 0x70
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfeepromReg28_0()
    {
        return  m_locblockname_intfeepromReg28_0->read();
    }
    
    /**
    * Read access function for eepromReg29_0 at address 0x74
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfeepromReg29_0()
    {
        return  m_locblockname_intfeepromReg29_0->read();
    }
    
    /**
    * Read access function for eepromReg30_0 at address 0x78
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfeepromReg30_0()
    {
        return  m_locblockname_intfeepromReg30_0->read();
    }
    
    /**
    * Read access function for eepromReg31_0 at address 0x7c
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfeepromReg31_0()
    {
        return  m_locblockname_intfeepromReg31_0->read();
    }
    
    /**
    * Read access function for eepromReg32_0 at address 0x80
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfeepromReg32_0()
    {
        return  m_locblockname_intfeepromReg32_0->read();
    }
    
    /**
    * Read access function for eepromReg33_0 at address 0x84
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfeepromReg33_0()
    {
        return  m_locblockname_intfeepromReg33_0->read();
    }
    
    /**
    * Read access function for eepromReg34_0 at address 0x88
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfeepromReg34_0()
    {
        return  m_locblockname_intfeepromReg34_0->read();
    }
    
    /**
    * Read access function for eepromReg35_0 at address 0x8c
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfeepromReg35_0()
    {
        return  m_locblockname_intfeepromReg35_0->read();
    }
    
    /**
    * Read access function for eepromReg36_0 at address 0x90
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfeepromReg36_0()
    {
        return  m_locblockname_intfeepromReg36_0->read();
    }
    
    /**
    * Read access function for eepromReg37_0 at address 0x94
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfeepromReg37_0()
    {
        return  m_locblockname_intfeepromReg37_0->read();
    }
    
    /**
    * Read access function for eepromReg38_0 at address 0x98
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfeepromReg38_0()
    {
        return  m_locblockname_intfeepromReg38_0->read();
    }
    
    /**
    * Read access function for eepromReg39_0 at address 0x9c
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfeepromReg39_0()
    {
        return  m_locblockname_intfeepromReg39_0->read();
    }
    
    /**
    * Read access function for eepromReg40_0 at address 0xa0
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfeepromReg40_0()
    {
        return  m_locblockname_intfeepromReg40_0->read();
    }
    
    /**
    * Read access function for eepromReg41_0 at address 0xa4
    * @return Register data value (U32T).
    */
    U32T blockname::readblockname_intfeepromReg41_0()
    {
        return  m_locblockname_intfeepromReg41_0->read();
    }
    
    /**
    * Read access function for blockname_intf component blockname_intf transaction target.
    * @param Register address value (U32T).
    * @retrun Register data value (U32T).
    */
    U32T blockname::readblockname_intf(U32T address )
    {
        // Initialise return value
        U32T retVal = 0;
        switch (address)
        {
            // blockname_intfvolatileReg0_0
            case BLOCKNAME_INTF_VOLATILEREG0_0_ADDRESS:
            retVal = readblockname_intfvolatileReg0_0();
            break;
            // blockname_intfvolatileReg1_0
            case BLOCKNAME_INTF_VOLATILEREG1_0_ADDRESS:
            retVal = readblockname_intfvolatileReg1_0();
            break;
            // blockname_intfshadowReg2_0
            case BLOCKNAME_INTF_SHADOWREG2_0_ADDRESS:
            retVal = readblockname_intfshadowReg2_0();
            break;
            // blockname_intfshadowReg3_0
            case BLOCKNAME_INTF_SHADOWREG3_0_ADDRESS:
            retVal = readblockname_intfshadowReg3_0();
            break;
            // blockname_intfshadowReg4_0
            case BLOCKNAME_INTF_SHADOWREG4_0_ADDRESS:
            retVal = readblockname_intfshadowReg4_0();
            break;
            // blockname_intfshadowReg5_0
            case BLOCKNAME_INTF_SHADOWREG5_0_ADDRESS:
            retVal = readblockname_intfshadowReg5_0();
            break;
            // blockname_intfshadowReg6_0
            case BLOCKNAME_INTF_SHADOWREG6_0_ADDRESS:
            retVal = readblockname_intfshadowReg6_0();
            break;
            // blockname_intfshadowReg7_0
            case BLOCKNAME_INTF_SHADOWREG7_0_ADDRESS:
            retVal = readblockname_intfshadowReg7_0();
            break;
            // blockname_intfshadowReg8_0
            case BLOCKNAME_INTF_SHADOWREG8_0_ADDRESS:
            retVal = readblockname_intfshadowReg8_0();
            break;
            // blockname_intfshadowReg9_0
            case BLOCKNAME_INTF_SHADOWREG9_0_ADDRESS:
            retVal = readblockname_intfshadowReg9_0();
            break;
            // blockname_intfshadowReg10_0
            case BLOCKNAME_INTF_SHADOWREG10_0_ADDRESS:
            retVal = readblockname_intfshadowReg10_0();
            break;
            // blockname_intfshadowReg11_0
            case BLOCKNAME_INTF_SHADOWREG11_0_ADDRESS:
            retVal = readblockname_intfshadowReg11_0();
            break;
            // blockname_intfshadowReg12_0
            case BLOCKNAME_INTF_SHADOWREG12_0_ADDRESS:
            retVal = readblockname_intfshadowReg12_0();
            break;
            // blockname_intfshadowReg13_0
            case BLOCKNAME_INTF_SHADOWREG13_0_ADDRESS:
            retVal = readblockname_intfshadowReg13_0();
            break;
            // blockname_intfshadowReg14_0
            case BLOCKNAME_INTF_SHADOWREG14_0_ADDRESS:
            retVal = readblockname_intfshadowReg14_0();
            break;
            // blockname_intfshadowReg15_0
            case BLOCKNAME_INTF_SHADOWREG15_0_ADDRESS:
            retVal = readblockname_intfshadowReg15_0();
            break;
            // blockname_intfshadowReg16_0
            case BLOCKNAME_INTF_SHADOWREG16_0_ADDRESS:
            retVal = readblockname_intfshadowReg16_0();
            break;
            // blockname_intfshadowReg17_0
            case BLOCKNAME_INTF_SHADOWREG17_0_ADDRESS:
            retVal = readblockname_intfshadowReg17_0();
            break;
            // blockname_intfshadowReg18_0
            case BLOCKNAME_INTF_SHADOWREG18_0_ADDRESS:
            retVal = readblockname_intfshadowReg18_0();
            break;
            // blockname_intfshadowReg19_0
            case BLOCKNAME_INTF_SHADOWREG19_0_ADDRESS:
            retVal = readblockname_intfshadowReg19_0();
            break;
            // blockname_intfshadowReg20_0
            case BLOCKNAME_INTF_SHADOWREG20_0_ADDRESS:
            retVal = readblockname_intfshadowReg20_0();
            break;
            // blockname_intfshadowReg21_0
            case BLOCKNAME_INTF_SHADOWREG21_0_ADDRESS:
            retVal = readblockname_intfshadowReg21_0();
            break;
            // blockname_intfeepromReg22_0
            case BLOCKNAME_INTF_EEPROMREG22_0_ADDRESS:
            retVal = readblockname_intfeepromReg22_0();
            break;
            // blockname_intfeepromReg23_0
            case BLOCKNAME_INTF_EEPROMREG23_0_ADDRESS:
            retVal = readblockname_intfeepromReg23_0();
            break;
            // blockname_intfeepromReg24_0
            case BLOCKNAME_INTF_EEPROMREG24_0_ADDRESS:
            retVal = readblockname_intfeepromReg24_0();
            break;
            // blockname_intfeepromReg25_0
            case BLOCKNAME_INTF_EEPROMREG25_0_ADDRESS:
            retVal = readblockname_intfeepromReg25_0();
            break;
            // blockname_intfeepromReg26_0
            case BLOCKNAME_INTF_EEPROMREG26_0_ADDRESS:
            retVal = readblockname_intfeepromReg26_0();
            break;
            // blockname_intfeepromReg27_0
            case BLOCKNAME_INTF_EEPROMREG27_0_ADDRESS:
            retVal = readblockname_intfeepromReg27_0();
            break;
            // blockname_intfeepromReg28_0
            case BLOCKNAME_INTF_EEPROMREG28_0_ADDRESS:
            retVal = readblockname_intfeepromReg28_0();
            break;
            // blockname_intfeepromReg29_0
            case BLOCKNAME_INTF_EEPROMREG29_0_ADDRESS:
            retVal = readblockname_intfeepromReg29_0();
            break;
            // blockname_intfeepromReg30_0
            case BLOCKNAME_INTF_EEPROMREG30_0_ADDRESS:
            retVal = readblockname_intfeepromReg30_0();
            break;
            // blockname_intfeepromReg31_0
            case BLOCKNAME_INTF_EEPROMREG31_0_ADDRESS:
            retVal = readblockname_intfeepromReg31_0();
            break;
            // blockname_intfeepromReg32_0
            case BLOCKNAME_INTF_EEPROMREG32_0_ADDRESS:
            retVal = readblockname_intfeepromReg32_0();
            break;
            // blockname_intfeepromReg33_0
            case BLOCKNAME_INTF_EEPROMREG33_0_ADDRESS:
            retVal = readblockname_intfeepromReg33_0();
            break;
            // blockname_intfeepromReg34_0
            case BLOCKNAME_INTF_EEPROMREG34_0_ADDRESS:
            retVal = readblockname_intfeepromReg34_0();
            break;
            // blockname_intfeepromReg35_0
            case BLOCKNAME_INTF_EEPROMREG35_0_ADDRESS:
            retVal = readblockname_intfeepromReg35_0();
            break;
            // blockname_intfeepromReg36_0
            case BLOCKNAME_INTF_EEPROMREG36_0_ADDRESS:
            retVal = readblockname_intfeepromReg36_0();
            break;
            // blockname_intfeepromReg37_0
            case BLOCKNAME_INTF_EEPROMREG37_0_ADDRESS:
            retVal = readblockname_intfeepromReg37_0();
            break;
            // blockname_intfeepromReg38_0
            case BLOCKNAME_INTF_EEPROMREG38_0_ADDRESS:
            retVal = readblockname_intfeepromReg38_0();
            break;
            // blockname_intfeepromReg39_0
            case BLOCKNAME_INTF_EEPROMREG39_0_ADDRESS:
            retVal = readblockname_intfeepromReg39_0();
            break;
            // blockname_intfeepromReg40_0
            case BLOCKNAME_INTF_EEPROMREG40_0_ADDRESS:
            retVal = readblockname_intfeepromReg40_0();
            break;
            // blockname_intfeepromReg41_0
            case BLOCKNAME_INTF_EEPROMREG41_0_ADDRESS:
            retVal = readblockname_intfeepromReg41_0();
            break;
            // Default
            default:
            break;
        }
        return retVal;
    }
    
    /**
    * Read byte lanes access function for blockname component blockname_intf transaction target.
    * @param Register address value (U32T).
    * @param Byte lane enable (U8T).
    * @param Register data value (U32T).
    */
    U32T blockname::readByteLanesblockname_intf(U32T address, U8T BE)
    {
        // Initialise return value
        U32T retVal = 0;
        
        // Determine data mask
        U32T dataMask = 0;
        for (int i = 0; i < 4; i++)
        {
            if (((BE >> i) % 2) == 1)
            {
                dataMask |= (U32T)0xff << (i * 8);
            }
        }
        
        // blockname_intfReg0_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_VOLATILEREG0_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfvolatileReg0_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg1_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_VOLATILEREG1_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfvolatileReg1_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg2_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG2_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfshadowReg2_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg3_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG3_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfshadowReg3_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg4_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG4_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfshadowReg4_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg5_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG5_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfshadowReg5_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg6_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG6_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfshadowReg6_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg7_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG7_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfshadowReg7_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg8_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG8_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfshadowReg8_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg9_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG9_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfshadowReg9_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg10_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG10_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfshadowReg10_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg11_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG11_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfshadowReg11_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg12_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG12_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfshadowReg12_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg13_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG13_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfshadowReg13_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg14_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG14_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfshadowReg14_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg15_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG15_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfshadowReg15_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg16_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG16_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfshadowReg16_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg17_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG17_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfshadowReg17_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg18_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG18_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfshadowReg18_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg19_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG19_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfshadowReg19_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg20_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG20_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfshadowReg20_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg21_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_SHADOWREG21_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfshadowReg21_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg22_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG22_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfeepromReg22_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg23_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG23_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfeepromReg23_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg24_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG24_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfeepromReg24_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg25_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG25_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfeepromReg25_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg26_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG26_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfeepromReg26_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg27_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG27_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfeepromReg27_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg28_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG28_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfeepromReg28_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg29_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG29_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfeepromReg29_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg30_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG30_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfeepromReg30_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg31_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG31_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfeepromReg31_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg32_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG32_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfeepromReg32_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg33_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG33_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfeepromReg33_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg34_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG34_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfeepromReg34_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg35_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG35_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfeepromReg35_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg36_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG36_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfeepromReg36_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg37_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG37_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfeepromReg37_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg38_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG38_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfeepromReg38_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg39_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG39_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfeepromReg39_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg40_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG40_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfeepromReg40_0() & (U32T)dataMask);
        }
        
        // blockname_intfReg41_0 (in byte lanes 0 to 3)
        if ((address == (BLOCKNAME_INTF_EEPROMREG41_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readblockname_intfeepromReg41_0() & (U32T)dataMask);
        }
        
        return retVal;
    }
    
    /**
    * Read access function for blockname component.
    * @param Register address value (U32T).
    * @param Transaction port (transactionPortType).
    * @param Register data value (U32T).
    */
    U32T blockname::read(transactionPortType transactionPort, U32T address)
    {
        // Initialise return value
        U32T retVal = 0;
        switch (transactionPort)
        {
            // blockname_intf
            case blockname_INTF_TRANSACTION_PORT:
            retVal = readblockname_intf(address);
            break;
            // Default
            default:
            break;
        }
        return retVal;
    }
    
} // namespace DUOLOG
