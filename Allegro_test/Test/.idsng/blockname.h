/**** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ***
** created by        :
** generated by      : Agnisys
** generated from    : D:\AgnisysProjects\git_test\Allegro_test\Test\test26.idsng
** IDesignSpec rev   : idsbatch v4.16.26.2

***** This code is generated with following settings ***
**---------------------------------------------------------------------------------------------------------------*/


#ifndef __BLOCKNAME_H
#define __BLOCKNAME_H

#include "Access.h"
#include "blocknameRegisters.h"
#include "LocatedRegister.h"

namespace DUOLOG
{
    
    class blockname
    {
        private:
        // ------------------------------------------------------------------------
        // Private member variables
        // ------------------------------------------------------------------------
        Reg0 * m_regvolatileReg0_0;
        Reg1 * m_regvolatileReg1_0;
        Reg2 * m_regshadowReg2_0;
        Reg3 * m_regshadowReg3_0;
        Reg4 * m_regshadowReg4_0;
        Reg5 * m_regshadowReg5_0;
        Reg6 * m_regshadowReg6_0;
        Reg7 * m_regshadowReg7_0;
        Reg8 * m_regshadowReg8_0;
        Reg9 * m_regshadowReg9_0;
        Reg10 * m_regshadowReg10_0;
        Reg11 * m_regshadowReg11_0;
        Reg12 * m_regshadowReg12_0;
        Reg13 * m_regshadowReg13_0;
        Reg14 * m_regshadowReg14_0;
        Reg15 * m_regshadowReg15_0;
        Reg16 * m_regshadowReg16_0;
        Reg17 * m_regshadowReg17_0;
        Reg18 * m_regshadowReg18_0;
        Reg19 * m_regshadowReg19_0;
        Reg20 * m_regshadowReg20_0;
        Reg21 * m_regshadowReg21_0;
        Reg22 * m_regeepromReg22_0;
        Reg23 * m_regeepromReg23_0;
        Reg24 * m_regeepromReg24_0;
        Reg25 * m_regeepromReg25_0;
        Reg26 * m_regeepromReg26_0;
        Reg27 * m_regeepromReg27_0;
        Reg28 * m_regeepromReg28_0;
        Reg29 * m_regeepromReg29_0;
        Reg30 * m_regeepromReg30_0;
        Reg31 * m_regeepromReg31_0;
        Reg32 * m_regeepromReg32_0;
        Reg33 * m_regeepromReg33_0;
        Reg34 * m_regeepromReg34_0;
        Reg35 * m_regeepromReg35_0;
        Reg36 * m_regeepromReg36_0;
        Reg37 * m_regeepromReg37_0;
        Reg38 * m_regeepromReg38_0;
        Reg39 * m_regeepromReg39_0;
        Reg40 * m_regeepromReg40_0;
        Reg41 * m_regeepromReg41_0;
        // Pointer to LocatedRegister object representing volatileReg0_0 at address 0x000
        LocatedRegister<U32T> * m_locblockname_intfvolatileReg0_0;
        // Pointer to LocatedRegister object representing volatileReg1_0 at address 0x4
        LocatedRegister<U32T> * m_locblockname_intfvolatileReg1_0;
        // Pointer to LocatedRegister object representing shadowReg2_0 at address 0x8
        LocatedRegister<U32T> * m_locblockname_intfshadowReg2_0;
        // Pointer to LocatedRegister object representing shadowReg3_0 at address 0xc
        LocatedRegister<U32T> * m_locblockname_intfshadowReg3_0;
        // Pointer to LocatedRegister object representing shadowReg4_0 at address 0x10
        LocatedRegister<U32T> * m_locblockname_intfshadowReg4_0;
        // Pointer to LocatedRegister object representing shadowReg5_0 at address 0x14
        LocatedRegister<U32T> * m_locblockname_intfshadowReg5_0;
        // Pointer to LocatedRegister object representing shadowReg6_0 at address 0x18
        LocatedRegister<U32T> * m_locblockname_intfshadowReg6_0;
        // Pointer to LocatedRegister object representing shadowReg7_0 at address 0x1c
        LocatedRegister<U32T> * m_locblockname_intfshadowReg7_0;
        // Pointer to LocatedRegister object representing shadowReg8_0 at address 0x20
        LocatedRegister<U32T> * m_locblockname_intfshadowReg8_0;
        // Pointer to LocatedRegister object representing shadowReg9_0 at address 0x24
        LocatedRegister<U32T> * m_locblockname_intfshadowReg9_0;
        // Pointer to LocatedRegister object representing shadowReg10_0 at address 0x28
        LocatedRegister<U32T> * m_locblockname_intfshadowReg10_0;
        // Pointer to LocatedRegister object representing shadowReg11_0 at address 0x2c
        LocatedRegister<U32T> * m_locblockname_intfshadowReg11_0;
        // Pointer to LocatedRegister object representing shadowReg12_0 at address 0x30
        LocatedRegister<U32T> * m_locblockname_intfshadowReg12_0;
        // Pointer to LocatedRegister object representing shadowReg13_0 at address 0x34
        LocatedRegister<U32T> * m_locblockname_intfshadowReg13_0;
        // Pointer to LocatedRegister object representing shadowReg14_0 at address 0x38
        LocatedRegister<U32T> * m_locblockname_intfshadowReg14_0;
        // Pointer to LocatedRegister object representing shadowReg15_0 at address 0x3c
        LocatedRegister<U32T> * m_locblockname_intfshadowReg15_0;
        // Pointer to LocatedRegister object representing shadowReg16_0 at address 0x40
        LocatedRegister<U32T> * m_locblockname_intfshadowReg16_0;
        // Pointer to LocatedRegister object representing shadowReg17_0 at address 0x44
        LocatedRegister<U32T> * m_locblockname_intfshadowReg17_0;
        // Pointer to LocatedRegister object representing shadowReg18_0 at address 0x48
        LocatedRegister<U32T> * m_locblockname_intfshadowReg18_0;
        // Pointer to LocatedRegister object representing shadowReg19_0 at address 0x4c
        LocatedRegister<U32T> * m_locblockname_intfshadowReg19_0;
        // Pointer to LocatedRegister object representing shadowReg20_0 at address 0x50
        LocatedRegister<U32T> * m_locblockname_intfshadowReg20_0;
        // Pointer to LocatedRegister object representing shadowReg21_0 at address 0x54
        LocatedRegister<U32T> * m_locblockname_intfshadowReg21_0;
        // Pointer to LocatedRegister object representing eepromReg22_0 at address 0x58
        LocatedRegister<U32T> * m_locblockname_intfeepromReg22_0;
        // Pointer to LocatedRegister object representing eepromReg23_0 at address 0x5c
        LocatedRegister<U32T> * m_locblockname_intfeepromReg23_0;
        // Pointer to LocatedRegister object representing eepromReg24_0 at address 0x60
        LocatedRegister<U32T> * m_locblockname_intfeepromReg24_0;
        // Pointer to LocatedRegister object representing eepromReg25_0 at address 0x64
        LocatedRegister<U32T> * m_locblockname_intfeepromReg25_0;
        // Pointer to LocatedRegister object representing eepromReg26_0 at address 0x68
        LocatedRegister<U32T> * m_locblockname_intfeepromReg26_0;
        // Pointer to LocatedRegister object representing eepromReg27_0 at address 0x6c
        LocatedRegister<U32T> * m_locblockname_intfeepromReg27_0;
        // Pointer to LocatedRegister object representing eepromReg28_0 at address 0x70
        LocatedRegister<U32T> * m_locblockname_intfeepromReg28_0;
        // Pointer to LocatedRegister object representing eepromReg29_0 at address 0x74
        LocatedRegister<U32T> * m_locblockname_intfeepromReg29_0;
        // Pointer to LocatedRegister object representing eepromReg30_0 at address 0x78
        LocatedRegister<U32T> * m_locblockname_intfeepromReg30_0;
        // Pointer to LocatedRegister object representing eepromReg31_0 at address 0x7c
        LocatedRegister<U32T> * m_locblockname_intfeepromReg31_0;
        // Pointer to LocatedRegister object representing eepromReg32_0 at address 0x80
        LocatedRegister<U32T> * m_locblockname_intfeepromReg32_0;
        // Pointer to LocatedRegister object representing eepromReg33_0 at address 0x84
        LocatedRegister<U32T> * m_locblockname_intfeepromReg33_0;
        // Pointer to LocatedRegister object representing eepromReg34_0 at address 0x88
        LocatedRegister<U32T> * m_locblockname_intfeepromReg34_0;
        // Pointer to LocatedRegister object representing eepromReg35_0 at address 0x8c
        LocatedRegister<U32T> * m_locblockname_intfeepromReg35_0;
        // Pointer to LocatedRegister object representing eepromReg36_0 at address 0x90
        LocatedRegister<U32T> * m_locblockname_intfeepromReg36_0;
        // Pointer to LocatedRegister object representing eepromReg37_0 at address 0x94
        LocatedRegister<U32T> * m_locblockname_intfeepromReg37_0;
        // Pointer to LocatedRegister object representing eepromReg38_0 at address 0x98
        LocatedRegister<U32T> * m_locblockname_intfeepromReg38_0;
        // Pointer to LocatedRegister object representing eepromReg39_0 at address 0x9c
        LocatedRegister<U32T> * m_locblockname_intfeepromReg39_0;
        // Pointer to LocatedRegister object representing eepromReg40_0 at address 0xa0
        LocatedRegister<U32T> * m_locblockname_intfeepromReg40_0;
        // Pointer to LocatedRegister object representing eepromReg41_0 at address 0xa4
        LocatedRegister<U32T> * m_locblockname_intfeepromReg41_0;
        // ------------------------------------------------------------------------
        // Private member variables
        // ------------------------------------------------------------------------
        // Creates register objects
        void createRegisters();
        // Creates memory objects
        void createMemories();
        // Locates registers
        void locateRegisters();
        // Locates memories
        void locateMemories();
        
        public:
        // ------------------------------------------------------------------------
        // Public member variables
        // ------------------------------------------------------------------------
        // volatileReg0_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_VOLATILEREG0_0_ADDRESS = 0x000;
        // volatileReg1_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_VOLATILEREG1_0_ADDRESS = 0x4;
        // shadowReg2_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_SHADOWREG2_0_ADDRESS = 0x8;
        // shadowReg3_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_SHADOWREG3_0_ADDRESS = 0xc;
        // shadowReg4_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_SHADOWREG4_0_ADDRESS = 0x10;
        // shadowReg5_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_SHADOWREG5_0_ADDRESS = 0x14;
        // shadowReg6_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_SHADOWREG6_0_ADDRESS = 0x18;
        // shadowReg7_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_SHADOWREG7_0_ADDRESS = 0x1c;
        // shadowReg8_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_SHADOWREG8_0_ADDRESS = 0x20;
        // shadowReg9_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_SHADOWREG9_0_ADDRESS = 0x24;
        // shadowReg10_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_SHADOWREG10_0_ADDRESS = 0x28;
        // shadowReg11_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_SHADOWREG11_0_ADDRESS = 0x2c;
        // shadowReg12_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_SHADOWREG12_0_ADDRESS = 0x30;
        // shadowReg13_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_SHADOWREG13_0_ADDRESS = 0x34;
        // shadowReg14_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_SHADOWREG14_0_ADDRESS = 0x38;
        // shadowReg15_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_SHADOWREG15_0_ADDRESS = 0x3c;
        // shadowReg16_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_SHADOWREG16_0_ADDRESS = 0x40;
        // shadowReg17_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_SHADOWREG17_0_ADDRESS = 0x44;
        // shadowReg18_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_SHADOWREG18_0_ADDRESS = 0x48;
        // shadowReg19_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_SHADOWREG19_0_ADDRESS = 0x4c;
        // shadowReg20_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_SHADOWREG20_0_ADDRESS = 0x50;
        // shadowReg21_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_SHADOWREG21_0_ADDRESS = 0x54;
        // eepromReg22_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_EEPROMREG22_0_ADDRESS = 0x58;
        // eepromReg23_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_EEPROMREG23_0_ADDRESS = 0x5c;
        // eepromReg24_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_EEPROMREG24_0_ADDRESS = 0x60;
        // eepromReg25_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_EEPROMREG25_0_ADDRESS = 0x64;
        // eepromReg26_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_EEPROMREG26_0_ADDRESS = 0x68;
        // eepromReg27_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_EEPROMREG27_0_ADDRESS = 0x6c;
        // eepromReg28_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_EEPROMREG28_0_ADDRESS = 0x70;
        // eepromReg29_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_EEPROMREG29_0_ADDRESS = 0x74;
        // eepromReg30_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_EEPROMREG30_0_ADDRESS = 0x78;
        // eepromReg31_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_EEPROMREG31_0_ADDRESS = 0x7c;
        // eepromReg32_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_EEPROMREG32_0_ADDRESS = 0x80;
        // eepromReg33_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_EEPROMREG33_0_ADDRESS = 0x84;
        // eepromReg34_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_EEPROMREG34_0_ADDRESS = 0x88;
        // eepromReg35_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_EEPROMREG35_0_ADDRESS = 0x8c;
        // eepromReg36_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_EEPROMREG36_0_ADDRESS = 0x90;
        // eepromReg37_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_EEPROMREG37_0_ADDRESS = 0x94;
        // eepromReg38_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_EEPROMREG38_0_ADDRESS = 0x98;
        // eepromReg39_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_EEPROMREG39_0_ADDRESS = 0x9c;
        // eepromReg40_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_EEPROMREG40_0_ADDRESS = 0xa0;
        // eepromReg41_0 register offset address definition(s)
        static const U32T BLOCKNAME_INTF_EEPROMREG41_0_ADDRESS = 0xa4;
        
        
        
        
        // blockname transaction port enumerations
        enum transactionPortType {
        blockname_INTF_TRANSACTION_PORT
    };
    // ------------------------------------------------------------------------
    // Public member functions
    // ------------------------------------------------------------------------
    // Class constructor
    blockname();
    // Initialises all registers in the component
    void initialise();
    // Returns a pointer to the volatileReg0_0 object representing volatileReg0_0
    Reg0 * getvolatileReg0_0();
    // Returns a pointer to the volatileReg1_0 object representing volatileReg1_0
    Reg1 * getvolatileReg1_0();
    // Returns a pointer to the shadowReg2_0 object representing shadowReg2_0
    Reg2 * getshadowReg2_0();
    // Returns a pointer to the shadowReg3_0 object representing shadowReg3_0
    Reg3 * getshadowReg3_0();
    // Returns a pointer to the shadowReg4_0 object representing shadowReg4_0
    Reg4 * getshadowReg4_0();
    // Returns a pointer to the shadowReg5_0 object representing shadowReg5_0
    Reg5 * getshadowReg5_0();
    // Returns a pointer to the shadowReg6_0 object representing shadowReg6_0
    Reg6 * getshadowReg6_0();
    // Returns a pointer to the shadowReg7_0 object representing shadowReg7_0
    Reg7 * getshadowReg7_0();
    // Returns a pointer to the shadowReg8_0 object representing shadowReg8_0
    Reg8 * getshadowReg8_0();
    // Returns a pointer to the shadowReg9_0 object representing shadowReg9_0
    Reg9 * getshadowReg9_0();
    // Returns a pointer to the shadowReg10_0 object representing shadowReg10_0
    Reg10 * getshadowReg10_0();
    // Returns a pointer to the shadowReg11_0 object representing shadowReg11_0
    Reg11 * getshadowReg11_0();
    // Returns a pointer to the shadowReg12_0 object representing shadowReg12_0
    Reg12 * getshadowReg12_0();
    // Returns a pointer to the shadowReg13_0 object representing shadowReg13_0
    Reg13 * getshadowReg13_0();
    // Returns a pointer to the shadowReg14_0 object representing shadowReg14_0
    Reg14 * getshadowReg14_0();
    // Returns a pointer to the shadowReg15_0 object representing shadowReg15_0
    Reg15 * getshadowReg15_0();
    // Returns a pointer to the shadowReg16_0 object representing shadowReg16_0
    Reg16 * getshadowReg16_0();
    // Returns a pointer to the shadowReg17_0 object representing shadowReg17_0
    Reg17 * getshadowReg17_0();
    // Returns a pointer to the shadowReg18_0 object representing shadowReg18_0
    Reg18 * getshadowReg18_0();
    // Returns a pointer to the shadowReg19_0 object representing shadowReg19_0
    Reg19 * getshadowReg19_0();
    // Returns a pointer to the shadowReg20_0 object representing shadowReg20_0
    Reg20 * getshadowReg20_0();
    // Returns a pointer to the shadowReg21_0 object representing shadowReg21_0
    Reg21 * getshadowReg21_0();
    // Returns a pointer to the eepromReg22_0 object representing eepromReg22_0
    Reg22 * geteepromReg22_0();
    // Returns a pointer to the eepromReg23_0 object representing eepromReg23_0
    Reg23 * geteepromReg23_0();
    // Returns a pointer to the eepromReg24_0 object representing eepromReg24_0
    Reg24 * geteepromReg24_0();
    // Returns a pointer to the eepromReg25_0 object representing eepromReg25_0
    Reg25 * geteepromReg25_0();
    // Returns a pointer to the eepromReg26_0 object representing eepromReg26_0
    Reg26 * geteepromReg26_0();
    // Returns a pointer to the eepromReg27_0 object representing eepromReg27_0
    Reg27 * geteepromReg27_0();
    // Returns a pointer to the eepromReg28_0 object representing eepromReg28_0
    Reg28 * geteepromReg28_0();
    // Returns a pointer to the eepromReg29_0 object representing eepromReg29_0
    Reg29 * geteepromReg29_0();
    // Returns a pointer to the eepromReg30_0 object representing eepromReg30_0
    Reg30 * geteepromReg30_0();
    // Returns a pointer to the eepromReg31_0 object representing eepromReg31_0
    Reg31 * geteepromReg31_0();
    // Returns a pointer to the eepromReg32_0 object representing eepromReg32_0
    Reg32 * geteepromReg32_0();
    // Returns a pointer to the eepromReg33_0 object representing eepromReg33_0
    Reg33 * geteepromReg33_0();
    // Returns a pointer to the eepromReg34_0 object representing eepromReg34_0
    Reg34 * geteepromReg34_0();
    // Returns a pointer to the eepromReg35_0 object representing eepromReg35_0
    Reg35 * geteepromReg35_0();
    // Returns a pointer to the eepromReg36_0 object representing eepromReg36_0
    Reg36 * geteepromReg36_0();
    // Returns a pointer to the eepromReg37_0 object representing eepromReg37_0
    Reg37 * geteepromReg37_0();
    // Returns a pointer to the eepromReg38_0 object representing eepromReg38_0
    Reg38 * geteepromReg38_0();
    // Returns a pointer to the eepromReg39_0 object representing eepromReg39_0
    Reg39 * geteepromReg39_0();
    // Returns a pointer to the eepromReg40_0 object representing eepromReg40_0
    Reg40 * geteepromReg40_0();
    // Returns a pointer to the eepromReg41_0 object representing eepromReg41_0
    Reg41 * geteepromReg41_0();
    // Returns pointer to LocatedRegister object representing volatileReg0_0 at address 0x000
    LocatedRegister<U32T> * getblockname_intfvolatileReg0_0();
    // Returns pointer to LocatedRegister object representing volatileReg1_0 at address 0x4
    LocatedRegister<U32T> * getblockname_intfvolatileReg1_0();
    // Returns pointer to LocatedRegister object representing shadowReg2_0 at address 0x8
    LocatedRegister<U32T> * getblockname_intfshadowReg2_0();
    // Returns pointer to LocatedRegister object representing shadowReg3_0 at address 0xc
    LocatedRegister<U32T> * getblockname_intfshadowReg3_0();
    // Returns pointer to LocatedRegister object representing shadowReg4_0 at address 0x10
    LocatedRegister<U32T> * getblockname_intfshadowReg4_0();
    // Returns pointer to LocatedRegister object representing shadowReg5_0 at address 0x14
    LocatedRegister<U32T> * getblockname_intfshadowReg5_0();
    // Returns pointer to LocatedRegister object representing shadowReg6_0 at address 0x18
    LocatedRegister<U32T> * getblockname_intfshadowReg6_0();
    // Returns pointer to LocatedRegister object representing shadowReg7_0 at address 0x1c
    LocatedRegister<U32T> * getblockname_intfshadowReg7_0();
    // Returns pointer to LocatedRegister object representing shadowReg8_0 at address 0x20
    LocatedRegister<U32T> * getblockname_intfshadowReg8_0();
    // Returns pointer to LocatedRegister object representing shadowReg9_0 at address 0x24
    LocatedRegister<U32T> * getblockname_intfshadowReg9_0();
    // Returns pointer to LocatedRegister object representing shadowReg10_0 at address 0x28
    LocatedRegister<U32T> * getblockname_intfshadowReg10_0();
    // Returns pointer to LocatedRegister object representing shadowReg11_0 at address 0x2c
    LocatedRegister<U32T> * getblockname_intfshadowReg11_0();
    // Returns pointer to LocatedRegister object representing shadowReg12_0 at address 0x30
    LocatedRegister<U32T> * getblockname_intfshadowReg12_0();
    // Returns pointer to LocatedRegister object representing shadowReg13_0 at address 0x34
    LocatedRegister<U32T> * getblockname_intfshadowReg13_0();
    // Returns pointer to LocatedRegister object representing shadowReg14_0 at address 0x38
    LocatedRegister<U32T> * getblockname_intfshadowReg14_0();
    // Returns pointer to LocatedRegister object representing shadowReg15_0 at address 0x3c
    LocatedRegister<U32T> * getblockname_intfshadowReg15_0();
    // Returns pointer to LocatedRegister object representing shadowReg16_0 at address 0x40
    LocatedRegister<U32T> * getblockname_intfshadowReg16_0();
    // Returns pointer to LocatedRegister object representing shadowReg17_0 at address 0x44
    LocatedRegister<U32T> * getblockname_intfshadowReg17_0();
    // Returns pointer to LocatedRegister object representing shadowReg18_0 at address 0x48
    LocatedRegister<U32T> * getblockname_intfshadowReg18_0();
    // Returns pointer to LocatedRegister object representing shadowReg19_0 at address 0x4c
    LocatedRegister<U32T> * getblockname_intfshadowReg19_0();
    // Returns pointer to LocatedRegister object representing shadowReg20_0 at address 0x50
    LocatedRegister<U32T> * getblockname_intfshadowReg20_0();
    // Returns pointer to LocatedRegister object representing shadowReg21_0 at address 0x54
    LocatedRegister<U32T> * getblockname_intfshadowReg21_0();
    // Returns pointer to LocatedRegister object representing eepromReg22_0 at address 0x58
    LocatedRegister<U32T> * getblockname_intfeepromReg22_0();
    // Returns pointer to LocatedRegister object representing eepromReg23_0 at address 0x5c
    LocatedRegister<U32T> * getblockname_intfeepromReg23_0();
    // Returns pointer to LocatedRegister object representing eepromReg24_0 at address 0x60
    LocatedRegister<U32T> * getblockname_intfeepromReg24_0();
    // Returns pointer to LocatedRegister object representing eepromReg25_0 at address 0x64
    LocatedRegister<U32T> * getblockname_intfeepromReg25_0();
    // Returns pointer to LocatedRegister object representing eepromReg26_0 at address 0x68
    LocatedRegister<U32T> * getblockname_intfeepromReg26_0();
    // Returns pointer to LocatedRegister object representing eepromReg27_0 at address 0x6c
    LocatedRegister<U32T> * getblockname_intfeepromReg27_0();
    // Returns pointer to LocatedRegister object representing eepromReg28_0 at address 0x70
    LocatedRegister<U32T> * getblockname_intfeepromReg28_0();
    // Returns pointer to LocatedRegister object representing eepromReg29_0 at address 0x74
    LocatedRegister<U32T> * getblockname_intfeepromReg29_0();
    // Returns pointer to LocatedRegister object representing eepromReg30_0 at address 0x78
    LocatedRegister<U32T> * getblockname_intfeepromReg30_0();
    // Returns pointer to LocatedRegister object representing eepromReg31_0 at address 0x7c
    LocatedRegister<U32T> * getblockname_intfeepromReg31_0();
    // Returns pointer to LocatedRegister object representing eepromReg32_0 at address 0x80
    LocatedRegister<U32T> * getblockname_intfeepromReg32_0();
    // Returns pointer to LocatedRegister object representing eepromReg33_0 at address 0x84
    LocatedRegister<U32T> * getblockname_intfeepromReg33_0();
    // Returns pointer to LocatedRegister object representing eepromReg34_0 at address 0x88
    LocatedRegister<U32T> * getblockname_intfeepromReg34_0();
    // Returns pointer to LocatedRegister object representing eepromReg35_0 at address 0x8c
    LocatedRegister<U32T> * getblockname_intfeepromReg35_0();
    // Returns pointer to LocatedRegister object representing eepromReg36_0 at address 0x90
    LocatedRegister<U32T> * getblockname_intfeepromReg36_0();
    // Returns pointer to LocatedRegister object representing eepromReg37_0 at address 0x94
    LocatedRegister<U32T> * getblockname_intfeepromReg37_0();
    // Returns pointer to LocatedRegister object representing eepromReg38_0 at address 0x98
    LocatedRegister<U32T> * getblockname_intfeepromReg38_0();
    // Returns pointer to LocatedRegister object representing eepromReg39_0 at address 0x9c
    LocatedRegister<U32T> * getblockname_intfeepromReg39_0();
    // Returns pointer to LocatedRegister object representing eepromReg40_0 at address 0xa0
    LocatedRegister<U32T> * getblockname_intfeepromReg40_0();
    // Returns pointer to LocatedRegister object representing eepromReg41_0 at address 0xa4
    LocatedRegister<U32T> * getblockname_intfeepromReg41_0();
    // Write access function for volatileReg0_0 at address 0x000
    void  writeblockname_intfvolatileReg0_0(U32T  data, U32T dataMask);
    // Write access function for volatileReg1_0 at address 0x4
    void  writeblockname_intfvolatileReg1_0(U32T  data, U32T dataMask);
    // Write access function for shadowReg2_0 at address 0x8
    void  writeblockname_intfshadowReg2_0(U32T  data, U32T dataMask);
    // Write access function for shadowReg3_0 at address 0xc
    void  writeblockname_intfshadowReg3_0(U32T  data, U32T dataMask);
    // Write access function for shadowReg4_0 at address 0x10
    void  writeblockname_intfshadowReg4_0(U32T  data, U32T dataMask);
    // Write access function for shadowReg5_0 at address 0x14
    void  writeblockname_intfshadowReg5_0(U32T  data, U32T dataMask);
    // Write access function for shadowReg6_0 at address 0x18
    void  writeblockname_intfshadowReg6_0(U32T  data, U32T dataMask);
    // Write access function for shadowReg7_0 at address 0x1c
    void  writeblockname_intfshadowReg7_0(U32T  data, U32T dataMask);
    // Write access function for shadowReg8_0 at address 0x20
    void  writeblockname_intfshadowReg8_0(U32T  data, U32T dataMask);
    // Write access function for shadowReg9_0 at address 0x24
    void  writeblockname_intfshadowReg9_0(U32T  data, U32T dataMask);
    // Write access function for shadowReg10_0 at address 0x28
    void  writeblockname_intfshadowReg10_0(U32T  data, U32T dataMask);
    // Write access function for shadowReg11_0 at address 0x2c
    void  writeblockname_intfshadowReg11_0(U32T  data, U32T dataMask);
    // Write access function for shadowReg12_0 at address 0x30
    void  writeblockname_intfshadowReg12_0(U32T  data, U32T dataMask);
    // Write access function for shadowReg13_0 at address 0x34
    void  writeblockname_intfshadowReg13_0(U32T  data, U32T dataMask);
    // Write access function for shadowReg14_0 at address 0x38
    void  writeblockname_intfshadowReg14_0(U32T  data, U32T dataMask);
    // Write access function for shadowReg15_0 at address 0x3c
    void  writeblockname_intfshadowReg15_0(U32T  data, U32T dataMask);
    // Write access function for shadowReg16_0 at address 0x40
    void  writeblockname_intfshadowReg16_0(U32T  data, U32T dataMask);
    // Write access function for shadowReg17_0 at address 0x44
    void  writeblockname_intfshadowReg17_0(U32T  data, U32T dataMask);
    // Write access function for shadowReg18_0 at address 0x48
    void  writeblockname_intfshadowReg18_0(U32T  data, U32T dataMask);
    // Write access function for shadowReg19_0 at address 0x4c
    void  writeblockname_intfshadowReg19_0(U32T  data, U32T dataMask);
    // Write access function for shadowReg20_0 at address 0x50
    void  writeblockname_intfshadowReg20_0(U32T  data, U32T dataMask);
    // Write access function for shadowReg21_0 at address 0x54
    void  writeblockname_intfshadowReg21_0(U32T  data, U32T dataMask);
    // Write access function for eepromReg22_0 at address 0x58
    void  writeblockname_intfeepromReg22_0(U32T  data, U32T dataMask);
    // Write access function for eepromReg23_0 at address 0x5c
    void  writeblockname_intfeepromReg23_0(U32T  data, U32T dataMask);
    // Write access function for eepromReg24_0 at address 0x60
    void  writeblockname_intfeepromReg24_0(U32T  data, U32T dataMask);
    // Write access function for eepromReg25_0 at address 0x64
    void  writeblockname_intfeepromReg25_0(U32T  data, U32T dataMask);
    // Write access function for eepromReg26_0 at address 0x68
    void  writeblockname_intfeepromReg26_0(U32T  data, U32T dataMask);
    // Write access function for eepromReg27_0 at address 0x6c
    void  writeblockname_intfeepromReg27_0(U32T  data, U32T dataMask);
    // Write access function for eepromReg28_0 at address 0x70
    void  writeblockname_intfeepromReg28_0(U32T  data, U32T dataMask);
    // Write access function for eepromReg29_0 at address 0x74
    void  writeblockname_intfeepromReg29_0(U32T  data, U32T dataMask);
    // Write access function for eepromReg30_0 at address 0x78
    void  writeblockname_intfeepromReg30_0(U32T  data, U32T dataMask);
    // Write access function for eepromReg31_0 at address 0x7c
    void  writeblockname_intfeepromReg31_0(U32T  data, U32T dataMask);
    // Write access function for eepromReg32_0 at address 0x80
    void  writeblockname_intfeepromReg32_0(U32T  data, U32T dataMask);
    // Write access function for eepromReg33_0 at address 0x84
    void  writeblockname_intfeepromReg33_0(U32T  data, U32T dataMask);
    // Write access function for eepromReg34_0 at address 0x88
    void  writeblockname_intfeepromReg34_0(U32T  data, U32T dataMask);
    // Write access function for eepromReg35_0 at address 0x8c
    void  writeblockname_intfeepromReg35_0(U32T  data, U32T dataMask);
    // Write access function for eepromReg36_0 at address 0x90
    void  writeblockname_intfeepromReg36_0(U32T  data, U32T dataMask);
    // Write access function for eepromReg37_0 at address 0x94
    void  writeblockname_intfeepromReg37_0(U32T  data, U32T dataMask);
    // Write access function for eepromReg38_0 at address 0x98
    void  writeblockname_intfeepromReg38_0(U32T  data, U32T dataMask);
    // Write access function for eepromReg39_0 at address 0x9c
    void  writeblockname_intfeepromReg39_0(U32T  data, U32T dataMask);
    // Write access function for eepromReg40_0 at address 0xa0
    void  writeblockname_intfeepromReg40_0(U32T  data, U32T dataMask);
    // Write access function for eepromReg41_0 at address 0xa4
    void  writeblockname_intfeepromReg41_0(U32T  data, U32T dataMask);
    // Write access function for blockname component blockname_intf transaction target
    void  writeblockname_intf(U32T  address, U32T data, U32T dataMask);
    // Write byte lanes access function for blockname component blockname_intf transaction target
    void  writeByteLanesblockname_intf(U32T  address, U8T BE, U32T data);
    // Write access function for component
    void  write (transactionPortType transactionPort, U32T  address, U32T data, U32T dataMask);
    // Read access function for volatileReg0_0 at address 0x000
    U32T readblockname_intfvolatileReg0_0();
    // Read access function for volatileReg1_0 at address 0x4
    U32T readblockname_intfvolatileReg1_0();
    // Read access function for shadowReg2_0 at address 0x8
    U32T readblockname_intfshadowReg2_0();
    // Read access function for shadowReg3_0 at address 0xc
    U32T readblockname_intfshadowReg3_0();
    // Read access function for shadowReg4_0 at address 0x10
    U32T readblockname_intfshadowReg4_0();
    // Read access function for shadowReg5_0 at address 0x14
    U32T readblockname_intfshadowReg5_0();
    // Read access function for shadowReg6_0 at address 0x18
    U32T readblockname_intfshadowReg6_0();
    // Read access function for shadowReg7_0 at address 0x1c
    U32T readblockname_intfshadowReg7_0();
    // Read access function for shadowReg8_0 at address 0x20
    U32T readblockname_intfshadowReg8_0();
    // Read access function for shadowReg9_0 at address 0x24
    U32T readblockname_intfshadowReg9_0();
    // Read access function for shadowReg10_0 at address 0x28
    U32T readblockname_intfshadowReg10_0();
    // Read access function for shadowReg11_0 at address 0x2c
    U32T readblockname_intfshadowReg11_0();
    // Read access function for shadowReg12_0 at address 0x30
    U32T readblockname_intfshadowReg12_0();
    // Read access function for shadowReg13_0 at address 0x34
    U32T readblockname_intfshadowReg13_0();
    // Read access function for shadowReg14_0 at address 0x38
    U32T readblockname_intfshadowReg14_0();
    // Read access function for shadowReg15_0 at address 0x3c
    U32T readblockname_intfshadowReg15_0();
    // Read access function for shadowReg16_0 at address 0x40
    U32T readblockname_intfshadowReg16_0();
    // Read access function for shadowReg17_0 at address 0x44
    U32T readblockname_intfshadowReg17_0();
    // Read access function for shadowReg18_0 at address 0x48
    U32T readblockname_intfshadowReg18_0();
    // Read access function for shadowReg19_0 at address 0x4c
    U32T readblockname_intfshadowReg19_0();
    // Read access function for shadowReg20_0 at address 0x50
    U32T readblockname_intfshadowReg20_0();
    // Read access function for shadowReg21_0 at address 0x54
    U32T readblockname_intfshadowReg21_0();
    // Read access function for eepromReg22_0 at address 0x58
    U32T readblockname_intfeepromReg22_0();
    // Read access function for eepromReg23_0 at address 0x5c
    U32T readblockname_intfeepromReg23_0();
    // Read access function for eepromReg24_0 at address 0x60
    U32T readblockname_intfeepromReg24_0();
    // Read access function for eepromReg25_0 at address 0x64
    U32T readblockname_intfeepromReg25_0();
    // Read access function for eepromReg26_0 at address 0x68
    U32T readblockname_intfeepromReg26_0();
    // Read access function for eepromReg27_0 at address 0x6c
    U32T readblockname_intfeepromReg27_0();
    // Read access function for eepromReg28_0 at address 0x70
    U32T readblockname_intfeepromReg28_0();
    // Read access function for eepromReg29_0 at address 0x74
    U32T readblockname_intfeepromReg29_0();
    // Read access function for eepromReg30_0 at address 0x78
    U32T readblockname_intfeepromReg30_0();
    // Read access function for eepromReg31_0 at address 0x7c
    U32T readblockname_intfeepromReg31_0();
    // Read access function for eepromReg32_0 at address 0x80
    U32T readblockname_intfeepromReg32_0();
    // Read access function for eepromReg33_0 at address 0x84
    U32T readblockname_intfeepromReg33_0();
    // Read access function for eepromReg34_0 at address 0x88
    U32T readblockname_intfeepromReg34_0();
    // Read access function for eepromReg35_0 at address 0x8c
    U32T readblockname_intfeepromReg35_0();
    // Read access function for eepromReg36_0 at address 0x90
    U32T readblockname_intfeepromReg36_0();
    // Read access function for eepromReg37_0 at address 0x94
    U32T readblockname_intfeepromReg37_0();
    // Read access function for eepromReg38_0 at address 0x98
    U32T readblockname_intfeepromReg38_0();
    // Read access function for eepromReg39_0 at address 0x9c
    U32T readblockname_intfeepromReg39_0();
    // Read access function for eepromReg40_0 at address 0xa0
    U32T readblockname_intfeepromReg40_0();
    // Read access function for eepromReg41_0 at address 0xa4
    U32T readblockname_intfeepromReg41_0();
    // Read access function for blockname component blockname_intf transaction target
    U32T readblockname_intf(U32T  address);
    // Read byte lanes access function for blockname component blockname_intf transaction target
    U32T readByteLanesblockname_intf(U32T  address, U8T BE);
    // Read access function for component
    U32T read(transactionPortType transactionPort, U32T  address);
};

} // namespace DUOLOG
#endif /* __CTT_H */
