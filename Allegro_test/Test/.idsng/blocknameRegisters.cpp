/**** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ***
** created by        :
** generated by      : Agnisys
** generated from    : D:\AgnisysProjects\git_test\Allegro_test\Test\test26.idsng
** IDesignSpec rev   : idsbatch v4.16.26.2

***** This code is generated with following settings ***
**---------------------------------------------------------------------------------------------------------------*/



#include "Access.h"
#include "blocknameRegisters.h"

namespace DUOLOG
{
    
    
    /*****************************************************************************/
    
    /**
    *Reg0 class constructor.
    * This creates an instance of the Register object that is used to represent
    * the Reg0register. In addition, an instance of the Bitfield object is
    * created for each bitfield associated with the Reg0 register and is then
    * associated with the register object.
    */
    Reg0::Reg0()
    {
        // Create a new instance of the Bitfield object to represent magin  bitfield
        m_bfmagin = new Bitfield<U32T> (1, 18, WRITE, READ);
        // Create a new instance of the Bitfield object to represent afehptestchop  bitfield
        m_bfafehptestchop = new Bitfield<U32T> (23, 2, WRITE, READ);
        // Create a new instance of the Bitfield object to represent afehallphext  bitfield
        m_bfafehallphext = new Bitfield<U32T> (25, 3, WRITE, READ);
        // Create a new instance of the Bitfield object to represent water  bitfield
        m_bfwater = new Bitfield<U32T> (28, 2, WRITE, READ);
        // Create a new instance of the Bitfield object to represent magine  bitfield
        m_bfmagine = new Bitfield<U32T> (0, 1, WRITE, READ);
        // Create a new instance of the Bitfield object to represent hptesthalfscale  bitfield
        m_bfhptesthalfscale = new Bitfield<U32T> (19, 1, WRITE, READ);
        // Create a new instance of the Bitfield object to represent halldis  bitfield
        m_bfhalldis = new Bitfield<U32T> (20, 1, WRITE, READ);
        // Create a new instance of the Bitfield object to represent afezerocm  bitfield
        m_bfafezerocm = new Bitfield<U32T> (21, 1, WRITE, READ);
        // Create a new instance of the Bitfield object to represent afezero  bitfield
        m_bfafezero = new Bitfield<U32T> (22, 1, WRITE, READ);
        // Create a new instance of the Bitfield object to represent fire  bitfield
        m_bffire = new Bitfield<U32T> (30, 1, WRITE, READ);
        // Declare an array containing pointers to all bitfields associated with the
        // Reg0 register
        Bitfield<U32T> * bitfields [] = {
        m_bfmagin,
        m_bfafehptestchop,
        m_bfafehallphext,
        m_bfwater,
        m_bfmagine,
        m_bfhptesthalfscale,
        m_bfhalldis,
        m_bfafezerocm,
        m_bfafezero,
        m_bffire
    };
    // Create a new instance of the Register object to represent Reg0 register
    m_register = new Register<U32T> (32, 0x00000000, 10, bitfields);
}

/**
* Returns pointer to Reg0 Register object.
* @return Pointer to Reg0 Register object (Register *).
*/
Register<U32T> * Reg0::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the magin Bitfield Object
* @return Pointer to the magin Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg0::getmagin()
{
    return m_bfmagin;
}


/**
* Returns a pointer to the afehptestchop Bitfield Object
* @return Pointer to the afehptestchop Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg0::getafehptestchop()
{
    return m_bfafehptestchop;
}


/**
* Returns a pointer to the afehallphext Bitfield Object
* @return Pointer to the afehallphext Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg0::getafehallphext()
{
    return m_bfafehallphext;
}


/**
* Returns a pointer to the water Bitfield Object
* @return Pointer to the water Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg0::getwater()
{
    return m_bfwater;
}


/**
* Returns a pointer to the magine Bitfield Object
* @return Pointer to the magine Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg0::getmagine()
{
    return m_bfmagine;
}


/**
* Returns a pointer to the hptesthalfscale Bitfield Object
* @return Pointer to the hptesthalfscale Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg0::gethptesthalfscale()
{
    return m_bfhptesthalfscale;
}


/**
* Returns a pointer to the halldis Bitfield Object
* @return Pointer to the halldis Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg0::gethalldis()
{
    return m_bfhalldis;
}


/**
* Returns a pointer to the afezerocm Bitfield Object
* @return Pointer to the afezerocm Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg0::getafezerocm()
{
    return m_bfafezerocm;
}


/**
* Returns a pointer to the afezero Bitfield Object
* @return Pointer to the afezero Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg0::getafezero()
{
    return m_bfafezero;
}


/**
* Returns a pointer to the fire Bitfield Object
* @return Pointer to the fire Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg0::getfire()
{
    return m_bffire;
}

/*****************************************************************************/

/**
*Reg1 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg1register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg1 register and is then
* associated with the register object.
*/
Reg1::Reg1()
{
    // Create a new instance of the Bitfield object to represent tempin  bitfield
    m_bftempin = new Bitfield<U32T> (1, 12, WRITE, READ);
    // Create a new instance of the Bitfield object to represent refsigmonsel  bitfield
    m_bfrefsigmonsel = new Bitfield<U32T> (15, 3, WRITE, READ);
    // Create a new instance of the Bitfield object to represent tempine  bitfield
    m_bftempine = new Bitfield<U32T> (0, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent spdiagsingle  bitfield
    m_bfspdiagsingle = new Bitfield<U32T> (13, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent sdmorder2  bitfield
    m_bfsdmorder2 = new Bitfield<U32T> (14, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent refsigmonevalstart  bitfield
    m_bfrefsigmonevalstart = new Bitfield<U32T> (18, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent byptsentrim  bitfield
    m_bfbyptsentrim = new Bitfield<U32T> (19, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent byptrimf  bitfield
    m_bfbyptrimf = new Bitfield<U32T> (20, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent byptrimdiag  bitfield
    m_bfbyptrimdiag = new Bitfield<U32T> (21, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent byptrimc  bitfield
    m_bfbyptrimc = new Bitfield<U32T> (22, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent byptcf  bitfield
    m_bfbyptcf = new Bitfield<U32T> (23, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent byptcdiag  bitfield
    m_bfbyptcdiag = new Bitfield<U32T> (24, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent byptcc  bitfield
    m_bfbyptcc = new Bitfield<U32T> (25, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent bypplin  bitfield
    m_bfbypplin = new Bitfield<U32T> (26, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent byplin  bitfield
    m_bfbyplin = new Bitfield<U32T> (27, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent bypdiagfilt  bitfield
    m_bfbypdiagfilt = new Bitfield<U32T> (28, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent bypclamp  bitfield
    m_bfbypclamp = new Bitfield<U32T> (29, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent bypbwsel  bitfield
    m_bfbypbwsel = new Bitfield<U32T> (30, 1, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg1 register
    Bitfield<U32T> * bitfields [] = {
    m_bftempin,
    m_bfrefsigmonsel,
    m_bftempine,
    m_bfspdiagsingle,
    m_bfsdmorder2,
    m_bfrefsigmonevalstart,
    m_bfbyptsentrim,
    m_bfbyptrimf,
    m_bfbyptrimdiag,
    m_bfbyptrimc,
    m_bfbyptcf,
    m_bfbyptcdiag,
    m_bfbyptcc,
    m_bfbypplin,
    m_bfbyplin,
    m_bfbypdiagfilt,
    m_bfbypclamp,
    m_bfbypbwsel
};
// Create a new instance of the Register object to represent Reg1 register
m_register = new Register<U32T> (32, 0x00000000, 18, bitfields);
}

/**
* Returns pointer to Reg1 Register object.
* @return Pointer to Reg1 Register object (Register *).
*/
Register<U32T> * Reg1::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the tempin Bitfield Object
* @return Pointer to the tempin Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg1::gettempin()
{
    return m_bftempin;
}


/**
* Returns a pointer to the refsigmonsel Bitfield Object
* @return Pointer to the refsigmonsel Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg1::getrefsigmonsel()
{
    return m_bfrefsigmonsel;
}


/**
* Returns a pointer to the tempine Bitfield Object
* @return Pointer to the tempine Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg1::gettempine()
{
    return m_bftempine;
}


/**
* Returns a pointer to the spdiagsingle Bitfield Object
* @return Pointer to the spdiagsingle Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg1::getspdiagsingle()
{
    return m_bfspdiagsingle;
}


/**
* Returns a pointer to the sdmorder2 Bitfield Object
* @return Pointer to the sdmorder2 Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg1::getsdmorder2()
{
    return m_bfsdmorder2;
}


/**
* Returns a pointer to the refsigmonevalstart Bitfield Object
* @return Pointer to the refsigmonevalstart Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg1::getrefsigmonevalstart()
{
    return m_bfrefsigmonevalstart;
}


/**
* Returns a pointer to the byptsentrim Bitfield Object
* @return Pointer to the byptsentrim Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg1::getbyptsentrim()
{
    return m_bfbyptsentrim;
}


/**
* Returns a pointer to the byptrimf Bitfield Object
* @return Pointer to the byptrimf Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg1::getbyptrimf()
{
    return m_bfbyptrimf;
}


/**
* Returns a pointer to the byptrimdiag Bitfield Object
* @return Pointer to the byptrimdiag Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg1::getbyptrimdiag()
{
    return m_bfbyptrimdiag;
}


/**
* Returns a pointer to the byptrimc Bitfield Object
* @return Pointer to the byptrimc Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg1::getbyptrimc()
{
    return m_bfbyptrimc;
}


/**
* Returns a pointer to the byptcf Bitfield Object
* @return Pointer to the byptcf Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg1::getbyptcf()
{
    return m_bfbyptcf;
}


/**
* Returns a pointer to the byptcdiag Bitfield Object
* @return Pointer to the byptcdiag Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg1::getbyptcdiag()
{
    return m_bfbyptcdiag;
}


/**
* Returns a pointer to the byptcc Bitfield Object
* @return Pointer to the byptcc Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg1::getbyptcc()
{
    return m_bfbyptcc;
}


/**
* Returns a pointer to the bypplin Bitfield Object
* @return Pointer to the bypplin Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg1::getbypplin()
{
    return m_bfbypplin;
}


/**
* Returns a pointer to the byplin Bitfield Object
* @return Pointer to the byplin Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg1::getbyplin()
{
    return m_bfbyplin;
}


/**
* Returns a pointer to the bypdiagfilt Bitfield Object
* @return Pointer to the bypdiagfilt Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg1::getbypdiagfilt()
{
    return m_bfbypdiagfilt;
}


/**
* Returns a pointer to the bypclamp Bitfield Object
* @return Pointer to the bypclamp Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg1::getbypclamp()
{
    return m_bfbypclamp;
}


/**
* Returns a pointer to the bypbwsel Bitfield Object
* @return Pointer to the bypbwsel Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg1::getbypbwsel()
{
    return m_bfbypbwsel;
}

/*****************************************************************************/

/**
*Reg2 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg2register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg2 register and is then
* associated with the register object.
*/
Reg2::Reg2()
{
    // Create a new instance of the Bitfield object to represent lintbinhyst  bitfield
    m_bflintbinhyst = new Bitfield<U32T> (0, 8, WRITE, READ);
    // Create a new instance of the Bitfield object to represent hptestlvl  bitfield
    m_bfhptestlvl = new Bitfield<U32T> (10, 4, WRITE, READ);
    // Create a new instance of the Bitfield object to represent hallisel  bitfield
    m_bfhallisel = new Bitfield<U32T> (14, 5, WRITE, READ);
    // Create a new instance of the Bitfield object to represent bwsel  bitfield
    m_bfbwsel = new Bitfield<U32T> (19, 3, WRITE, READ);
    // Create a new instance of the Bitfield object to represent afehpdrvchop  bitfield
    m_bfafehpdrvchop = new Bitfield<U32T> (25, 2, WRITE, READ);
    // Create a new instance of the Bitfield object to represent afegain  bitfield
    m_bfafegain = new Bitfield<U32T> (27, 2, WRITE, READ);
    // Create a new instance of the Bitfield object to represent afeadcchp  bitfield
    m_bfafeadcchp = new Bitfield<U32T> (29, 2, WRITE, READ);
    // Create a new instance of the Bitfield object to represent lintbine  bitfield
    m_bflintbine = new Bitfield<U32T> (8, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent linscalar  bitfield
    m_bflinscalar = new Bitfield<U32T> (9, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent bgadcreferrmax  bitfield
    m_bfbgadcreferrmax = new Bitfield<U32T> (22, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent asilftt  bitfield
    m_bfasilftt = new Bitfield<U32T> (23, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent afezeroconfig  bitfield
    m_bfafezeroconfig = new Bitfield<U32T> (24, 1, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg2 register
    Bitfield<U32T> * bitfields [] = {
    m_bflintbinhyst,
    m_bfhptestlvl,
    m_bfhallisel,
    m_bfbwsel,
    m_bfafehpdrvchop,
    m_bfafegain,
    m_bfafeadcchp,
    m_bflintbine,
    m_bflinscalar,
    m_bfbgadcreferrmax,
    m_bfasilftt,
    m_bfafezeroconfig
};
// Create a new instance of the Register object to represent Reg2 register
m_register = new Register<U32T> (32, 0x00000000, 12, bitfields);
}

/**
* Returns pointer to Reg2 Register object.
* @return Pointer to Reg2 Register object (Register *).
*/
Register<U32T> * Reg2::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the lintbinhyst Bitfield Object
* @return Pointer to the lintbinhyst Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg2::getlintbinhyst()
{
    return m_bflintbinhyst;
}


/**
* Returns a pointer to the hptestlvl Bitfield Object
* @return Pointer to the hptestlvl Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg2::gethptestlvl()
{
    return m_bfhptestlvl;
}


/**
* Returns a pointer to the hallisel Bitfield Object
* @return Pointer to the hallisel Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg2::gethallisel()
{
    return m_bfhallisel;
}


/**
* Returns a pointer to the bwsel Bitfield Object
* @return Pointer to the bwsel Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg2::getbwsel()
{
    return m_bfbwsel;
}


/**
* Returns a pointer to the afehpdrvchop Bitfield Object
* @return Pointer to the afehpdrvchop Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg2::getafehpdrvchop()
{
    return m_bfafehpdrvchop;
}


/**
* Returns a pointer to the afegain Bitfield Object
* @return Pointer to the afegain Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg2::getafegain()
{
    return m_bfafegain;
}


/**
* Returns a pointer to the afeadcchp Bitfield Object
* @return Pointer to the afeadcchp Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg2::getafeadcchp()
{
    return m_bfafeadcchp;
}


/**
* Returns a pointer to the lintbine Bitfield Object
* @return Pointer to the lintbine Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg2::getlintbine()
{
    return m_bflintbine;
}


/**
* Returns a pointer to the linscalar Bitfield Object
* @return Pointer to the linscalar Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg2::getlinscalar()
{
    return m_bflinscalar;
}


/**
* Returns a pointer to the bgadcreferrmax Bitfield Object
* @return Pointer to the bgadcreferrmax Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg2::getbgadcreferrmax()
{
    return m_bfbgadcreferrmax;
}


/**
* Returns a pointer to the asilftt Bitfield Object
* @return Pointer to the asilftt Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg2::getasilftt()
{
    return m_bfasilftt;
}


/**
* Returns a pointer to the afezeroconfig Bitfield Object
* @return Pointer to the afezeroconfig Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg2::getafezeroconfig()
{
    return m_bfafezeroconfig;
}

/*****************************************************************************/

/**
*Reg3 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg3register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg3 register and is then
* associated with the register object.
*/
Reg3::Reg3()
{
    // Create a new instance of the Bitfield object to represent lint01  bitfield
    m_bflint01 = new Bitfield<U32T> (3, 13, WRITE, READ);
    // Create a new instance of the Bitfield object to represent lint00  bitfield
    m_bflint00 = new Bitfield<U32T> (16, 13, WRITE, READ);
    // Create a new instance of the Bitfield object to represent polf  bitfield
    m_bfpolf = new Bitfield<U32T> (0, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent poldiag  bitfield
    m_bfpoldiag = new Bitfield<U32T> (1, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent polc  bitfield
    m_bfpolc = new Bitfield<U32T> (2, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent lintoutinv  bitfield
    m_bflintoutinv = new Bitfield<U32T> (29, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent lintininv  bitfield
    m_bflintininv = new Bitfield<U32T> (30, 1, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg3 register
    Bitfield<U32T> * bitfields [] = {
    m_bflint01,
    m_bflint00,
    m_bfpolf,
    m_bfpoldiag,
    m_bfpolc,
    m_bflintoutinv,
    m_bflintininv
};
// Create a new instance of the Register object to represent Reg3 register
m_register = new Register<U32T> (32, 0x00000000, 7, bitfields);
}

/**
* Returns pointer to Reg3 Register object.
* @return Pointer to Reg3 Register object (Register *).
*/
Register<U32T> * Reg3::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the lint01 Bitfield Object
* @return Pointer to the lint01 Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg3::getlint01()
{
    return m_bflint01;
}


/**
* Returns a pointer to the lint00 Bitfield Object
* @return Pointer to the lint00 Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg3::getlint00()
{
    return m_bflint00;
}


/**
* Returns a pointer to the polf Bitfield Object
* @return Pointer to the polf Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg3::getpolf()
{
    return m_bfpolf;
}


/**
* Returns a pointer to the poldiag Bitfield Object
* @return Pointer to the poldiag Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg3::getpoldiag()
{
    return m_bfpoldiag;
}


/**
* Returns a pointer to the polc Bitfield Object
* @return Pointer to the polc Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg3::getpolc()
{
    return m_bfpolc;
}


/**
* Returns a pointer to the lintoutinv Bitfield Object
* @return Pointer to the lintoutinv Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg3::getlintoutinv()
{
    return m_bflintoutinv;
}


/**
* Returns a pointer to the lintininv Bitfield Object
* @return Pointer to the lintininv Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg3::getlintininv()
{
    return m_bflintininv;
}

/*****************************************************************************/

/**
*Reg4 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg4register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg4 register and is then
* associated with the register object.
*/
Reg4::Reg4()
{
    // Create a new instance of the Bitfield object to represent dregldoboost  bitfield
    m_bfdregldoboost = new Bitfield<U32T> (0, 2, WRITE, READ);
    // Create a new instance of the Bitfield object to represent bwselmin  bitfield
    m_bfbwselmin = new Bitfield<U32T> (2, 3, WRITE, READ);
    // Create a new instance of the Bitfield object to represent lint03  bitfield
    m_bflint03 = new Bitfield<U32T> (6, 13, WRITE, READ);
    // Create a new instance of the Bitfield object to represent lint02  bitfield
    m_bflint02 = new Bitfield<U32T> (19, 13, WRITE, READ);
    // Create a new instance of the Bitfield object to represent afehpsigphase  bitfield
    m_bfafehpsigphase = new Bitfield<U32T> (5, 1, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg4 register
    Bitfield<U32T> * bitfields [] = {
    m_bfdregldoboost,
    m_bfbwselmin,
    m_bflint03,
    m_bflint02,
    m_bfafehpsigphase
};
// Create a new instance of the Register object to represent Reg4 register
m_register = new Register<U32T> (32, 0x00000000, 5, bitfields);
}

/**
* Returns pointer to Reg4 Register object.
* @return Pointer to Reg4 Register object (Register *).
*/
Register<U32T> * Reg4::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the dregldoboost Bitfield Object
* @return Pointer to the dregldoboost Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg4::getdregldoboost()
{
    return m_bfdregldoboost;
}


/**
* Returns a pointer to the bwselmin Bitfield Object
* @return Pointer to the bwselmin Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg4::getbwselmin()
{
    return m_bfbwselmin;
}


/**
* Returns a pointer to the lint03 Bitfield Object
* @return Pointer to the lint03 Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg4::getlint03()
{
    return m_bflint03;
}


/**
* Returns a pointer to the lint02 Bitfield Object
* @return Pointer to the lint02 Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg4::getlint02()
{
    return m_bflint02;
}


/**
* Returns a pointer to the afehpsigphase Bitfield Object
* @return Pointer to the afehpsigphase Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg4::getafehpsigphase()
{
    return m_bfafehpsigphase;
}

/*****************************************************************************/

/**
*Reg5 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg5register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg5 register and is then
* associated with the register object.
*/
Reg5::Reg5()
{
    // Create a new instance of the Bitfield object to represent filtadagain  bitfield
    m_bffiltadagain = new Bitfield<U32T> (3, 3, WRITE, READ);
    // Create a new instance of the Bitfield object to represent lint05  bitfield
    m_bflint05 = new Bitfield<U32T> (6, 13, WRITE, READ);
    // Create a new instance of the Bitfield object to represent lint04  bitfield
    m_bflint04 = new Bitfield<U32T> (19, 13, WRITE, READ);
    // Create a new instance of the Bitfield object to represent regreferrmax  bitfield
    m_bfregreferrmax = new Bitfield<U32T> (0, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent refsigmonen  bitfield
    m_bfrefsigmonen = new Bitfield<U32T> (1, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent hallreferrmax  bitfield
    m_bfhallreferrmax = new Bitfield<U32T> (2, 1, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg5 register
    Bitfield<U32T> * bitfields [] = {
    m_bffiltadagain,
    m_bflint05,
    m_bflint04,
    m_bfregreferrmax,
    m_bfrefsigmonen,
    m_bfhallreferrmax
};
// Create a new instance of the Register object to represent Reg5 register
m_register = new Register<U32T> (32, 0x00000000, 6, bitfields);
}

/**
* Returns pointer to Reg5 Register object.
* @return Pointer to Reg5 Register object (Register *).
*/
Register<U32T> * Reg5::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the filtadagain Bitfield Object
* @return Pointer to the filtadagain Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg5::getfiltadagain()
{
    return m_bffiltadagain;
}


/**
* Returns a pointer to the lint05 Bitfield Object
* @return Pointer to the lint05 Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg5::getlint05()
{
    return m_bflint05;
}


/**
* Returns a pointer to the lint04 Bitfield Object
* @return Pointer to the lint04 Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg5::getlint04()
{
    return m_bflint04;
}


/**
* Returns a pointer to the regreferrmax Bitfield Object
* @return Pointer to the regreferrmax Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg5::getregreferrmax()
{
    return m_bfregreferrmax;
}


/**
* Returns a pointer to the refsigmonen Bitfield Object
* @return Pointer to the refsigmonen Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg5::getrefsigmonen()
{
    return m_bfrefsigmonen;
}


/**
* Returns a pointer to the hallreferrmax Bitfield Object
* @return Pointer to the hallreferrmax Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg5::gethallreferrmax()
{
    return m_bfhallreferrmax;
}

/*****************************************************************************/

/**
*Reg6 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg6register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg6 register and is then
* associated with the register object.
*/
Reg6::Reg6()
{
    // Create a new instance of the Bitfield object to represent sensmc  bitfield
    m_bfsensmc = new Bitfield<U32T> (2, 3, WRITE, READ);
    // Create a new instance of the Bitfield object to represent lint07  bitfield
    m_bflint07 = new Bitfield<U32T> (5, 13, WRITE, READ);
    // Create a new instance of the Bitfield object to represent lint06  bitfield
    m_bflint06 = new Bitfield<U32T> (18, 13, WRITE, READ);
    // Create a new instance of the Bitfield object to represent spdiagine  bitfield
    m_bfspdiagine = new Bitfield<U32T> (0, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent spdiagen  bitfield
    m_bfspdiagen = new Bitfield<U32T> (1, 1, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg6 register
    Bitfield<U32T> * bitfields [] = {
    m_bfsensmc,
    m_bflint07,
    m_bflint06,
    m_bfspdiagine,
    m_bfspdiagen
};
// Create a new instance of the Register object to represent Reg6 register
m_register = new Register<U32T> (32, 0x00000000, 5, bitfields);
}

/**
* Returns pointer to Reg6 Register object.
* @return Pointer to Reg6 Register object (Register *).
*/
Register<U32T> * Reg6::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the sensmc Bitfield Object
* @return Pointer to the sensmc Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg6::getsensmc()
{
    return m_bfsensmc;
}


/**
* Returns a pointer to the lint07 Bitfield Object
* @return Pointer to the lint07 Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg6::getlint07()
{
    return m_bflint07;
}


/**
* Returns a pointer to the lint06 Bitfield Object
* @return Pointer to the lint06 Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg6::getlint06()
{
    return m_bflint06;
}


/**
* Returns a pointer to the spdiagine Bitfield Object
* @return Pointer to the spdiagine Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg6::getspdiagine()
{
    return m_bfspdiagine;
}


/**
* Returns a pointer to the spdiagen Bitfield Object
* @return Pointer to the spdiagen Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg6::getspdiagen()
{
    return m_bfspdiagen;
}

/*****************************************************************************/

/**
*Reg7 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg7register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg7 register and is then
* associated with the register object.
*/
Reg7::Reg7()
{
    // Create a new instance of the Bitfield object to represent tsenchopcfg  bitfield
    m_bftsenchopcfg = new Bitfield<U32T> (0, 2, WRITE, READ);
    // Create a new instance of the Bitfield object to represent spdiagrate  bitfield
    m_bfspdiagrate = new Bitfield<U32T> (2, 2, WRITE, READ);
    // Create a new instance of the Bitfield object to represent lint09  bitfield
    m_bflint09 = new Bitfield<U32T> (4, 13, WRITE, READ);
    // Create a new instance of the Bitfield object to represent lint08  bitfield
    m_bflint08 = new Bitfield<U32T> (17, 13, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg7 register
    Bitfield<U32T> * bitfields [] = {
    m_bftsenchopcfg,
    m_bfspdiagrate,
    m_bflint09,
    m_bflint08
};
// Create a new instance of the Register object to represent Reg7 register
m_register = new Register<U32T> (32, 0x00000000, 4, bitfields);
}

/**
* Returns pointer to Reg7 Register object.
* @return Pointer to Reg7 Register object (Register *).
*/
Register<U32T> * Reg7::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the tsenchopcfg Bitfield Object
* @return Pointer to the tsenchopcfg Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg7::gettsenchopcfg()
{
    return m_bftsenchopcfg;
}


/**
* Returns a pointer to the spdiagrate Bitfield Object
* @return Pointer to the spdiagrate Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg7::getspdiagrate()
{
    return m_bfspdiagrate;
}


/**
* Returns a pointer to the lint09 Bitfield Object
* @return Pointer to the lint09 Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg7::getlint09()
{
    return m_bflint09;
}


/**
* Returns a pointer to the lint08 Bitfield Object
* @return Pointer to the lint08 Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg7::getlint08()
{
    return m_bflint08;
}

/*****************************************************************************/

/**
*Reg8 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg8register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg8 register and is then
* associated with the register object.
*/
Reg8::Reg8()
{
    // Create a new instance of the Bitfield object to represent toff  bitfield
    m_bftoff = new Bitfield<U32T> (0, 5, WRITE, READ);
    // Create a new instance of the Bitfield object to represent lint11  bitfield
    m_bflint11 = new Bitfield<U32T> (5, 13, WRITE, READ);
    // Create a new instance of the Bitfield object to represent lint10  bitfield
    m_bflint10 = new Bitfield<U32T> (18, 13, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg8 register
    Bitfield<U32T> * bitfields [] = {
    m_bftoff,
    m_bflint11,
    m_bflint10
};
// Create a new instance of the Register object to represent Reg8 register
m_register = new Register<U32T> (32, 0x00000000, 3, bitfields);
}

/**
* Returns pointer to Reg8 Register object.
* @return Pointer to Reg8 Register object (Register *).
*/
Register<U32T> * Reg8::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the toff Bitfield Object
* @return Pointer to the toff Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg8::gettoff()
{
    return m_bftoff;
}


/**
* Returns a pointer to the lint11 Bitfield Object
* @return Pointer to the lint11 Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg8::getlint11()
{
    return m_bflint11;
}


/**
* Returns a pointer to the lint10 Bitfield Object
* @return Pointer to the lint10 Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg8::getlint10()
{
    return m_bflint10;
}

/*****************************************************************************/

/**
*Reg9 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg9register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg9 register and is then
* associated with the register object.
*/
Reg9::Reg9()
{
    // Create a new instance of the Bitfield object to represent lint13  bitfield
    m_bflint13 = new Bitfield<U32T> (0, 13, WRITE, READ);
    // Create a new instance of the Bitfield object to represent lint12  bitfield
    m_bflint12 = new Bitfield<U32T> (13, 13, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg9 register
    Bitfield<U32T> * bitfields [] = {
    m_bflint13,
    m_bflint12
};
// Create a new instance of the Register object to represent Reg9 register
m_register = new Register<U32T> (32, 0x00000000, 2, bitfields);
}

/**
* Returns pointer to Reg9 Register object.
* @return Pointer to Reg9 Register object (Register *).
*/
Register<U32T> * Reg9::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the lint13 Bitfield Object
* @return Pointer to the lint13 Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg9::getlint13()
{
    return m_bflint13;
}


/**
* Returns a pointer to the lint12 Bitfield Object
* @return Pointer to the lint12 Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg9::getlint12()
{
    return m_bflint12;
}

/*****************************************************************************/

/**
*Reg10 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg10register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg10 register and is then
* associated with the register object.
*/
Reg10::Reg10()
{
    // Create a new instance of the Bitfield object to represent lint15  bitfield
    m_bflint15 = new Bitfield<U32T> (0, 13, WRITE, READ);
    // Create a new instance of the Bitfield object to represent lint14  bitfield
    m_bflint14 = new Bitfield<U32T> (13, 13, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg10 register
    Bitfield<U32T> * bitfields [] = {
    m_bflint15,
    m_bflint14
};
// Create a new instance of the Register object to represent Reg10 register
m_register = new Register<U32T> (32, 0x00000000, 2, bitfields);
}

/**
* Returns pointer to Reg10 Register object.
* @return Pointer to Reg10 Register object (Register *).
*/
Register<U32T> * Reg10::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the lint15 Bitfield Object
* @return Pointer to the lint15 Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg10::getlint15()
{
    return m_bflint15;
}


/**
* Returns a pointer to the lint14 Bitfield Object
* @return Pointer to the lint14 Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg10::getlint14()
{
    return m_bflint14;
}

/*****************************************************************************/

/**
*Reg11 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg11register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg11 register and is then
* associated with the register object.
*/
Reg11::Reg11()
{
    // Create a new instance of the Bitfield object to represent tslp  bitfield
    m_bftslp = new Bitfield<U32T> (0, 7, WRITE, READ);
    // Create a new instance of the Bitfield object to represent plinqvo  bitfield
    m_bfplinqvo = new Bitfield<U32T> (7, 12, WRITE, READ);
    // Create a new instance of the Bitfield object to represent lint16  bitfield
    m_bflint16 = new Bitfield<U32T> (19, 13, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg11 register
    Bitfield<U32T> * bitfields [] = {
    m_bftslp,
    m_bfplinqvo,
    m_bflint16
};
// Create a new instance of the Register object to represent Reg11 register
m_register = new Register<U32T> (32, 0x00000000, 3, bitfields);
}

/**
* Returns pointer to Reg11 Register object.
* @return Pointer to Reg11 Register object (Register *).
*/
Register<U32T> * Reg11::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the tslp Bitfield Object
* @return Pointer to the tslp Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg11::gettslp()
{
    return m_bftslp;
}


/**
* Returns a pointer to the plinqvo Bitfield Object
* @return Pointer to the plinqvo Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg11::getplinqvo()
{
    return m_bfplinqvo;
}


/**
* Returns a pointer to the lint16 Bitfield Object
* @return Pointer to the lint16 Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg11::getlint16()
{
    return m_bflint16;
}

/*****************************************************************************/

/**
*Reg12 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg12register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg12 register and is then
* associated with the register object.
*/
Reg12::Reg12()
{
    // Create a new instance of the Bitfield object to represent qoc  bitfield
    m_bfqoc = new Bitfield<U32T> (0, 18, WRITE, READ);
    // Create a new instance of the Bitfield object to represent plinsens  bitfield
    m_bfplinsens = new Bitfield<U32T> (18, 12, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg12 register
    Bitfield<U32T> * bitfields [] = {
    m_bfqoc,
    m_bfplinsens
};
// Create a new instance of the Register object to represent Reg12 register
m_register = new Register<U32T> (32, 0x00000000, 2, bitfields);
}

/**
* Returns pointer to Reg12 Register object.
* @return Pointer to Reg12 Register object (Register *).
*/
Register<U32T> * Reg12::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the qoc Bitfield Object
* @return Pointer to the qoc Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg12::getqoc()
{
    return m_bfqoc;
}


/**
* Returns a pointer to the plinsens Bitfield Object
* @return Pointer to the plinsens Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg12::getplinsens()
{
    return m_bfplinsens;
}

/*****************************************************************************/

/**
*Reg13 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg13register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg13 register and is then
* associated with the register object.
*/
Reg13::Reg13()
{
    // Create a new instance of the Bitfield object to represent tzero  bitfield
    m_bftzero = new Bitfield<U32T> (0, 7, WRITE, READ);
    // Create a new instance of the Bitfield object to represent qotchotc  bitfield
    m_bfqotchotc = new Bitfield<U32T> (7, 12, WRITE, READ);
    // Create a new instance of the Bitfield object to represent qotccldc  bitfield
    m_bfqotccldc = new Bitfield<U32T> (19, 12, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg13 register
    Bitfield<U32T> * bitfields [] = {
    m_bftzero,
    m_bfqotchotc,
    m_bfqotccldc
};
// Create a new instance of the Register object to represent Reg13 register
m_register = new Register<U32T> (32, 0x00000000, 3, bitfields);
}

/**
* Returns pointer to Reg13 Register object.
* @return Pointer to Reg13 Register object (Register *).
*/
Register<U32T> * Reg13::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the tzero Bitfield Object
* @return Pointer to the tzero Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg13::gettzero()
{
    return m_bftzero;
}


/**
* Returns a pointer to the qotchotc Bitfield Object
* @return Pointer to the qotchotc Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg13::getqotchotc()
{
    return m_bfqotchotc;
}


/**
* Returns a pointer to the qotccldc Bitfield Object
* @return Pointer to the qotccldc Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg13::getqotccldc()
{
    return m_bfqotccldc;
}

/*****************************************************************************/

/**
*Reg14 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg14register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg14 register and is then
* associated with the register object.
*/
Reg14::Reg14()
{
    // Create a new instance of the Bitfield object to represent refsigmonhall  bitfield
    m_bfrefsigmonhall = new Bitfield<U32T> (0, 10, WRITE, READ);
    // Create a new instance of the Bitfield object to represent clamph  bitfield
    m_bfclamph = new Bitfield<U32T> (10, 12, WRITE, READ);
    // Create a new instance of the Bitfield object to represent refsigmonbg  bitfield
    m_bfrefsigmonbg = new Bitfield<U32T> (22, 10, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg14 register
    Bitfield<U32T> * bitfields [] = {
    m_bfrefsigmonhall,
    m_bfclamph,
    m_bfrefsigmonbg
};
// Create a new instance of the Register object to represent Reg14 register
m_register = new Register<U32T> (32, 0x00000000, 3, bitfields);
}

/**
* Returns pointer to Reg14 Register object.
* @return Pointer to Reg14 Register object (Register *).
*/
Register<U32T> * Reg14::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the refsigmonhall Bitfield Object
* @return Pointer to the refsigmonhall Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg14::getrefsigmonhall()
{
    return m_bfrefsigmonhall;
}


/**
* Returns a pointer to the clamph Bitfield Object
* @return Pointer to the clamph Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg14::getclamph()
{
    return m_bfclamph;
}


/**
* Returns a pointer to the refsigmonbg Bitfield Object
* @return Pointer to the refsigmonbg Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg14::getrefsigmonbg()
{
    return m_bfrefsigmonbg;
}

/*****************************************************************************/

/**
*Reg15 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg15register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg15 register and is then
* associated with the register object.
*/
Reg15::Reg15()
{
    // Create a new instance of the Bitfield object to represent sensc  bitfield
    m_bfsensc = new Bitfield<U32T> (0, 11, WRITE, READ);
    // Create a new instance of the Bitfield object to represent clampl  bitfield
    m_bfclampl = new Bitfield<U32T> (11, 12, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg15 register
    Bitfield<U32T> * bitfields [] = {
    m_bfsensc,
    m_bfclampl
};
// Create a new instance of the Register object to represent Reg15 register
m_register = new Register<U32T> (32, 0x00000000, 2, bitfields);
}

/**
* Returns pointer to Reg15 Register object.
* @return Pointer to Reg15 Register object (Register *).
*/
Register<U32T> * Reg15::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the sensc Bitfield Object
* @return Pointer to the sensc Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg15::getsensc()
{
    return m_bfsensc;
}


/**
* Returns a pointer to the clampl Bitfield Object
* @return Pointer to the clampl Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg15::getclampl()
{
    return m_bfclampl;
}

/*****************************************************************************/

/**
*Reg16 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg16register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg16 register and is then
* associated with the register object.
*/
Reg16::Reg16()
{
    // Create a new instance of the Bitfield object to represent senstc2cldc  bitfield
    m_bfsenstc2cldc = new Bitfield<U32T> (0, 10, WRITE, READ);
    // Create a new instance of the Bitfield object to represent sensf  bitfield
    m_bfsensf = new Bitfield<U32T> (10, 11, WRITE, READ);
    // Create a new instance of the Bitfield object to represent sensdiag  bitfield
    m_bfsensdiag = new Bitfield<U32T> (21, 11, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg16 register
    Bitfield<U32T> * bitfields [] = {
    m_bfsenstc2cldc,
    m_bfsensf,
    m_bfsensdiag
};
// Create a new instance of the Register object to represent Reg16 register
m_register = new Register<U32T> (32, 0x00000000, 3, bitfields);
}

/**
* Returns pointer to Reg16 Register object.
* @return Pointer to Reg16 Register object (Register *).
*/
Register<U32T> * Reg16::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the senstc2cldc Bitfield Object
* @return Pointer to the senstc2cldc Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg16::getsenstc2cldc()
{
    return m_bfsenstc2cldc;
}


/**
* Returns a pointer to the sensf Bitfield Object
* @return Pointer to the sensf Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg16::getsensf()
{
    return m_bfsensf;
}


/**
* Returns a pointer to the sensdiag Bitfield Object
* @return Pointer to the sensdiag Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg16::getsensdiag()
{
    return m_bfsensdiag;
}

/*****************************************************************************/

/**
*Reg17 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg17register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg17 register and is then
* associated with the register object.
*/
Reg17::Reg17()
{
    // Create a new instance of the Bitfield object to represent senstc2cldf  bitfield
    m_bfsenstc2cldf = new Bitfield<U32T> (0, 10, WRITE, READ);
    // Create a new instance of the Bitfield object to represent senstc1clddiag  bitfield
    m_bfsenstc1clddiag = new Bitfield<U32T> (10, 11, WRITE, READ);
    // Create a new instance of the Bitfield object to represent senstc1cldc  bitfield
    m_bfsenstc1cldc = new Bitfield<U32T> (21, 11, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg17 register
    Bitfield<U32T> * bitfields [] = {
    m_bfsenstc2cldf,
    m_bfsenstc1clddiag,
    m_bfsenstc1cldc
};
// Create a new instance of the Register object to represent Reg17 register
m_register = new Register<U32T> (32, 0x00000000, 3, bitfields);
}

/**
* Returns pointer to Reg17 Register object.
* @return Pointer to Reg17 Register object (Register *).
*/
Register<U32T> * Reg17::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the senstc2cldf Bitfield Object
* @return Pointer to the senstc2cldf Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg17::getsenstc2cldf()
{
    return m_bfsenstc2cldf;
}


/**
* Returns a pointer to the senstc1clddiag Bitfield Object
* @return Pointer to the senstc1clddiag Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg17::getsenstc1clddiag()
{
    return m_bfsenstc1clddiag;
}


/**
* Returns a pointer to the senstc1cldc Bitfield Object
* @return Pointer to the senstc1cldc Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg17::getsenstc1cldc()
{
    return m_bfsenstc1cldc;
}

/*****************************************************************************/

/**
*Reg18 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg18register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg18 register and is then
* associated with the register object.
*/
Reg18::Reg18()
{
    // Create a new instance of the Bitfield object to represent senstc2hotc  bitfield
    m_bfsenstc2hotc = new Bitfield<U32T> (0, 10, WRITE, READ);
    // Create a new instance of the Bitfield object to represent senstc1hotc  bitfield
    m_bfsenstc1hotc = new Bitfield<U32T> (10, 11, WRITE, READ);
    // Create a new instance of the Bitfield object to represent senstc1cldf  bitfield
    m_bfsenstc1cldf = new Bitfield<U32T> (21, 11, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg18 register
    Bitfield<U32T> * bitfields [] = {
    m_bfsenstc2hotc,
    m_bfsenstc1hotc,
    m_bfsenstc1cldf
};
// Create a new instance of the Register object to represent Reg18 register
m_register = new Register<U32T> (32, 0x00000000, 3, bitfields);
}

/**
* Returns pointer to Reg18 Register object.
* @return Pointer to Reg18 Register object (Register *).
*/
Register<U32T> * Reg18::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the senstc2hotc Bitfield Object
* @return Pointer to the senstc2hotc Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg18::getsenstc2hotc()
{
    return m_bfsenstc2hotc;
}


/**
* Returns a pointer to the senstc1hotc Bitfield Object
* @return Pointer to the senstc1hotc Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg18::getsenstc1hotc()
{
    return m_bfsenstc1hotc;
}


/**
* Returns a pointer to the senstc1cldf Bitfield Object
* @return Pointer to the senstc1cldf Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg18::getsenstc1cldf()
{
    return m_bfsenstc1cldf;
}

/*****************************************************************************/

/**
*Reg19 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg19register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg19 register and is then
* associated with the register object.
*/
Reg19::Reg19()
{
    // Create a new instance of the Bitfield object to represent senstc2hotf  bitfield
    m_bfsenstc2hotf = new Bitfield<U32T> (0, 10, WRITE, READ);
    // Create a new instance of the Bitfield object to represent senstc1hotf  bitfield
    m_bfsenstc1hotf = new Bitfield<U32T> (10, 11, WRITE, READ);
    // Create a new instance of the Bitfield object to represent senstc1hotdiag  bitfield
    m_bfsenstc1hotdiag = new Bitfield<U32T> (21, 11, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg19 register
    Bitfield<U32T> * bitfields [] = {
    m_bfsenstc2hotf,
    m_bfsenstc1hotf,
    m_bfsenstc1hotdiag
};
// Create a new instance of the Register object to represent Reg19 register
m_register = new Register<U32T> (32, 0x00000000, 3, bitfields);
}

/**
* Returns pointer to Reg19 Register object.
* @return Pointer to Reg19 Register object (Register *).
*/
Register<U32T> * Reg19::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the senstc2hotf Bitfield Object
* @return Pointer to the senstc2hotf Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg19::getsenstc2hotf()
{
    return m_bfsenstc2hotf;
}


/**
* Returns a pointer to the senstc1hotf Bitfield Object
* @return Pointer to the senstc1hotf Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg19::getsenstc1hotf()
{
    return m_bfsenstc1hotf;
}


/**
* Returns a pointer to the senstc1hotdiag Bitfield Object
* @return Pointer to the senstc1hotdiag Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg19::getsenstc1hotdiag()
{
    return m_bfsenstc1hotdiag;
}

/*****************************************************************************/

/**
*Reg20 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg20register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg20 register and is then
* associated with the register object.
*/
Reg20::Reg20()
{
    // Create a new instance of the Bitfield object to represent vosf  bitfield
    m_bfvosf = new Bitfield<U32T> (0, 14, WRITE, READ);
    // Create a new instance of the Bitfield object to represent spdiagin  bitfield
    m_bfspdiagin = new Bitfield<U32T> (14, 18, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg20 register
    Bitfield<U32T> * bitfields [] = {
    m_bfvosf,
    m_bfspdiagin
};
// Create a new instance of the Register object to represent Reg20 register
m_register = new Register<U32T> (32, 0x00000000, 2, bitfields);
}

/**
* Returns pointer to Reg20 Register object.
* @return Pointer to Reg20 Register object (Register *).
*/
Register<U32T> * Reg20::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the vosf Bitfield Object
* @return Pointer to the vosf Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg20::getvosf()
{
    return m_bfvosf;
}


/**
* Returns a pointer to the spdiagin Bitfield Object
* @return Pointer to the spdiagin Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg20::getspdiagin()
{
    return m_bfspdiagin;
}

/*****************************************************************************/

/**
*Reg21 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg21register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg21 register and is then
* associated with the register object.
*/
Reg21::Reg21()
{
    // Create a new instance of the Bitfield object to represent vostchotf  bitfield
    m_bfvostchotf = new Bitfield<U32T> (0, 12, WRITE, READ);
    // Create a new instance of the Bitfield object to represent vostccldf  bitfield
    m_bfvostccldf = new Bitfield<U32T> (12, 12, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg21 register
    Bitfield<U32T> * bitfields [] = {
    m_bfvostchotf,
    m_bfvostccldf
};
// Create a new instance of the Register object to represent Reg21 register
m_register = new Register<U32T> (32, 0x00000000, 2, bitfields);
}

/**
* Returns pointer to Reg21 Register object.
* @return Pointer to Reg21 Register object (Register *).
*/
Register<U32T> * Reg21::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the vostchotf Bitfield Object
* @return Pointer to the vostchotf Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg21::getvostchotf()
{
    return m_bfvostchotf;
}


/**
* Returns a pointer to the vostccldf Bitfield Object
* @return Pointer to the vostccldf Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg21::getvostccldf()
{
    return m_bfvostccldf;
}

/*****************************************************************************/

/**
*Reg22 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg22register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg22 register and is then
* associated with the register object.
*/
Reg22::Reg22()
{
    // Create a new instance of the Bitfield object to represent lintbinhyst  bitfield
    m_bflintbinhyst = new Bitfield<U32T> (3, 8, WRITE, READ);
    // Create a new instance of the Bitfield object to represent hptestlvl  bitfield
    m_bfhptestlvl = new Bitfield<U32T> (13, 4, WRITE, READ);
    // Create a new instance of the Bitfield object to represent hallisel  bitfield
    m_bfhallisel = new Bitfield<U32T> (17, 5, WRITE, READ);
    // Create a new instance of the Bitfield object to represent bwsel  bitfield
    m_bfbwsel = new Bitfield<U32T> (22, 3, WRITE, READ);
    // Create a new instance of the Bitfield object to represent afehpdrvchop  bitfield
    m_bfafehpdrvchop = new Bitfield<U32T> (28, 2, WRITE, READ);
    // Create a new instance of the Bitfield object to represent afegain  bitfield
    m_bfafegain = new Bitfield<U32T> (30, 2, WRITE, READ);
    // Create a new instance of the Bitfield object to represent lintoutinv  bitfield
    m_bflintoutinv = new Bitfield<U32T> (0, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent lintininv  bitfield
    m_bflintininv = new Bitfield<U32T> (1, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent linte  bitfield
    m_bflinte = new Bitfield<U32T> (2, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent lintbine  bitfield
    m_bflintbine = new Bitfield<U32T> (11, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent linscalar  bitfield
    m_bflinscalar = new Bitfield<U32T> (12, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent bgadcreferrmax  bitfield
    m_bfbgadcreferrmax = new Bitfield<U32T> (25, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent asilftt  bitfield
    m_bfasilftt = new Bitfield<U32T> (26, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent afezeroconfig  bitfield
    m_bfafezeroconfig = new Bitfield<U32T> (27, 1, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg22 register
    Bitfield<U32T> * bitfields [] = {
    m_bflintbinhyst,
    m_bfhptestlvl,
    m_bfhallisel,
    m_bfbwsel,
    m_bfafehpdrvchop,
    m_bfafegain,
    m_bflintoutinv,
    m_bflintininv,
    m_bflinte,
    m_bflintbine,
    m_bflinscalar,
    m_bfbgadcreferrmax,
    m_bfasilftt,
    m_bfafezeroconfig
};
// Create a new instance of the Register object to represent Reg22 register
m_register = new Register<U32T> (32, 0x00000000, 14, bitfields);
}

/**
* Returns pointer to Reg22 Register object.
* @return Pointer to Reg22 Register object (Register *).
*/
Register<U32T> * Reg22::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the lintbinhyst Bitfield Object
* @return Pointer to the lintbinhyst Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg22::getlintbinhyst()
{
    return m_bflintbinhyst;
}


/**
* Returns a pointer to the hptestlvl Bitfield Object
* @return Pointer to the hptestlvl Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg22::gethptestlvl()
{
    return m_bfhptestlvl;
}


/**
* Returns a pointer to the hallisel Bitfield Object
* @return Pointer to the hallisel Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg22::gethallisel()
{
    return m_bfhallisel;
}


/**
* Returns a pointer to the bwsel Bitfield Object
* @return Pointer to the bwsel Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg22::getbwsel()
{
    return m_bfbwsel;
}


/**
* Returns a pointer to the afehpdrvchop Bitfield Object
* @return Pointer to the afehpdrvchop Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg22::getafehpdrvchop()
{
    return m_bfafehpdrvchop;
}


/**
* Returns a pointer to the afegain Bitfield Object
* @return Pointer to the afegain Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg22::getafegain()
{
    return m_bfafegain;
}


/**
* Returns a pointer to the lintoutinv Bitfield Object
* @return Pointer to the lintoutinv Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg22::getlintoutinv()
{
    return m_bflintoutinv;
}


/**
* Returns a pointer to the lintininv Bitfield Object
* @return Pointer to the lintininv Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg22::getlintininv()
{
    return m_bflintininv;
}


/**
* Returns a pointer to the linte Bitfield Object
* @return Pointer to the linte Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg22::getlinte()
{
    return m_bflinte;
}


/**
* Returns a pointer to the lintbine Bitfield Object
* @return Pointer to the lintbine Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg22::getlintbine()
{
    return m_bflintbine;
}


/**
* Returns a pointer to the linscalar Bitfield Object
* @return Pointer to the linscalar Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg22::getlinscalar()
{
    return m_bflinscalar;
}


/**
* Returns a pointer to the bgadcreferrmax Bitfield Object
* @return Pointer to the bgadcreferrmax Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg22::getbgadcreferrmax()
{
    return m_bfbgadcreferrmax;
}


/**
* Returns a pointer to the asilftt Bitfield Object
* @return Pointer to the asilftt Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg22::getasilftt()
{
    return m_bfasilftt;
}


/**
* Returns a pointer to the afezeroconfig Bitfield Object
* @return Pointer to the afezeroconfig Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg22::getafezeroconfig()
{
    return m_bfafezeroconfig;
}

/*****************************************************************************/

/**
*Reg23 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg23register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg23 register and is then
* associated with the register object.
*/
Reg23::Reg23()
{
    // Create a new instance of the Bitfield object to represent dregldoboost  bitfield
    m_bfdregldoboost = new Bitfield<U32T> (0, 2, WRITE, READ);
    // Create a new instance of the Bitfield object to represent lint01  bitfield
    m_bflint01 = new Bitfield<U32T> (6, 13, WRITE, READ);
    // Create a new instance of the Bitfield object to represent lint00  bitfield
    m_bflint00 = new Bitfield<U32T> (19, 13, WRITE, READ);
    // Create a new instance of the Bitfield object to represent afehpsigphase  bitfield
    m_bfafehpsigphase = new Bitfield<U32T> (2, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent polf  bitfield
    m_bfpolf = new Bitfield<U32T> (3, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent poldiag  bitfield
    m_bfpoldiag = new Bitfield<U32T> (4, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent polc  bitfield
    m_bfpolc = new Bitfield<U32T> (5, 1, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg23 register
    Bitfield<U32T> * bitfields [] = {
    m_bfdregldoboost,
    m_bflint01,
    m_bflint00,
    m_bfafehpsigphase,
    m_bfpolf,
    m_bfpoldiag,
    m_bfpolc
};
// Create a new instance of the Register object to represent Reg23 register
m_register = new Register<U32T> (32, 0x00000000, 7, bitfields);
}

/**
* Returns pointer to Reg23 Register object.
* @return Pointer to Reg23 Register object (Register *).
*/
Register<U32T> * Reg23::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the dregldoboost Bitfield Object
* @return Pointer to the dregldoboost Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg23::getdregldoboost()
{
    return m_bfdregldoboost;
}


/**
* Returns a pointer to the lint01 Bitfield Object
* @return Pointer to the lint01 Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg23::getlint01()
{
    return m_bflint01;
}


/**
* Returns a pointer to the lint00 Bitfield Object
* @return Pointer to the lint00 Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg23::getlint00()
{
    return m_bflint00;
}


/**
* Returns a pointer to the afehpsigphase Bitfield Object
* @return Pointer to the afehpsigphase Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg23::getafehpsigphase()
{
    return m_bfafehpsigphase;
}


/**
* Returns a pointer to the polf Bitfield Object
* @return Pointer to the polf Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg23::getpolf()
{
    return m_bfpolf;
}


/**
* Returns a pointer to the poldiag Bitfield Object
* @return Pointer to the poldiag Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg23::getpoldiag()
{
    return m_bfpoldiag;
}


/**
* Returns a pointer to the polc Bitfield Object
* @return Pointer to the polc Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg23::getpolc()
{
    return m_bfpolc;
}

/*****************************************************************************/

/**
*Reg24 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg24register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg24 register and is then
* associated with the register object.
*/
Reg24::Reg24()
{
    // Create a new instance of the Bitfield object to represent filtadagain  bitfield
    m_bffiltadagain = new Bitfield<U32T> (0, 3, WRITE, READ);
    // Create a new instance of the Bitfield object to represent bwselmin  bitfield
    m_bfbwselmin = new Bitfield<U32T> (3, 3, WRITE, READ);
    // Create a new instance of the Bitfield object to represent lint03  bitfield
    m_bflint03 = new Bitfield<U32T> (6, 13, WRITE, READ);
    // Create a new instance of the Bitfield object to represent lint02  bitfield
    m_bflint02 = new Bitfield<U32T> (19, 13, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg24 register
    Bitfield<U32T> * bitfields [] = {
    m_bffiltadagain,
    m_bfbwselmin,
    m_bflint03,
    m_bflint02
};
// Create a new instance of the Register object to represent Reg24 register
m_register = new Register<U32T> (32, 0x00000000, 4, bitfields);
}

/**
* Returns pointer to Reg24 Register object.
* @return Pointer to Reg24 Register object (Register *).
*/
Register<U32T> * Reg24::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the filtadagain Bitfield Object
* @return Pointer to the filtadagain Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg24::getfiltadagain()
{
    return m_bffiltadagain;
}


/**
* Returns a pointer to the bwselmin Bitfield Object
* @return Pointer to the bwselmin Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg24::getbwselmin()
{
    return m_bfbwselmin;
}


/**
* Returns a pointer to the lint03 Bitfield Object
* @return Pointer to the lint03 Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg24::getlint03()
{
    return m_bflint03;
}


/**
* Returns a pointer to the lint02 Bitfield Object
* @return Pointer to the lint02 Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg24::getlint02()
{
    return m_bflint02;
}

/*****************************************************************************/

/**
*Reg25 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg25register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg25 register and is then
* associated with the register object.
*/
Reg25::Reg25()
{
    // Create a new instance of the Bitfield object to represent sensmc  bitfield
    m_bfsensmc = new Bitfield<U32T> (0, 3, WRITE, READ);
    // Create a new instance of the Bitfield object to represent lint05  bitfield
    m_bflint05 = new Bitfield<U32T> (6, 13, WRITE, READ);
    // Create a new instance of the Bitfield object to represent lint04  bitfield
    m_bflint04 = new Bitfield<U32T> (19, 13, WRITE, READ);
    // Create a new instance of the Bitfield object to represent regreferrmax  bitfield
    m_bfregreferrmax = new Bitfield<U32T> (3, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent refsigmonen  bitfield
    m_bfrefsigmonen = new Bitfield<U32T> (4, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent hallreferrmax  bitfield
    m_bfhallreferrmax = new Bitfield<U32T> (5, 1, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg25 register
    Bitfield<U32T> * bitfields [] = {
    m_bfsensmc,
    m_bflint05,
    m_bflint04,
    m_bfregreferrmax,
    m_bfrefsigmonen,
    m_bfhallreferrmax
};
// Create a new instance of the Register object to represent Reg25 register
m_register = new Register<U32T> (32, 0x00000000, 6, bitfields);
}

/**
* Returns pointer to Reg25 Register object.
* @return Pointer to Reg25 Register object (Register *).
*/
Register<U32T> * Reg25::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the sensmc Bitfield Object
* @return Pointer to the sensmc Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg25::getsensmc()
{
    return m_bfsensmc;
}


/**
* Returns a pointer to the lint05 Bitfield Object
* @return Pointer to the lint05 Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg25::getlint05()
{
    return m_bflint05;
}


/**
* Returns a pointer to the lint04 Bitfield Object
* @return Pointer to the lint04 Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg25::getlint04()
{
    return m_bflint04;
}


/**
* Returns a pointer to the regreferrmax Bitfield Object
* @return Pointer to the regreferrmax Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg25::getregreferrmax()
{
    return m_bfregreferrmax;
}


/**
* Returns a pointer to the refsigmonen Bitfield Object
* @return Pointer to the refsigmonen Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg25::getrefsigmonen()
{
    return m_bfrefsigmonen;
}


/**
* Returns a pointer to the hallreferrmax Bitfield Object
* @return Pointer to the hallreferrmax Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg25::gethallreferrmax()
{
    return m_bfhallreferrmax;
}

/*****************************************************************************/

/**
*Reg26 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg26register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg26 register and is then
* associated with the register object.
*/
Reg26::Reg26()
{
    // Create a new instance of the Bitfield object to represent tsenchopcfg  bitfield
    m_bftsenchopcfg = new Bitfield<U32T> (0, 2, WRITE, READ);
    // Create a new instance of the Bitfield object to represent spdiagrate  bitfield
    m_bfspdiagrate = new Bitfield<U32T> (2, 2, WRITE, READ);
    // Create a new instance of the Bitfield object to represent lint07  bitfield
    m_bflint07 = new Bitfield<U32T> (6, 13, WRITE, READ);
    // Create a new instance of the Bitfield object to represent lint06  bitfield
    m_bflint06 = new Bitfield<U32T> (19, 13, WRITE, READ);
    // Create a new instance of the Bitfield object to represent spdiagine  bitfield
    m_bfspdiagine = new Bitfield<U32T> (4, 1, WRITE, READ);
    // Create a new instance of the Bitfield object to represent spdiagen  bitfield
    m_bfspdiagen = new Bitfield<U32T> (5, 1, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg26 register
    Bitfield<U32T> * bitfields [] = {
    m_bftsenchopcfg,
    m_bfspdiagrate,
    m_bflint07,
    m_bflint06,
    m_bfspdiagine,
    m_bfspdiagen
};
// Create a new instance of the Register object to represent Reg26 register
m_register = new Register<U32T> (32, 0x00000000, 6, bitfields);
}

/**
* Returns pointer to Reg26 Register object.
* @return Pointer to Reg26 Register object (Register *).
*/
Register<U32T> * Reg26::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the tsenchopcfg Bitfield Object
* @return Pointer to the tsenchopcfg Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg26::gettsenchopcfg()
{
    return m_bftsenchopcfg;
}


/**
* Returns a pointer to the spdiagrate Bitfield Object
* @return Pointer to the spdiagrate Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg26::getspdiagrate()
{
    return m_bfspdiagrate;
}


/**
* Returns a pointer to the lint07 Bitfield Object
* @return Pointer to the lint07 Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg26::getlint07()
{
    return m_bflint07;
}


/**
* Returns a pointer to the lint06 Bitfield Object
* @return Pointer to the lint06 Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg26::getlint06()
{
    return m_bflint06;
}


/**
* Returns a pointer to the spdiagine Bitfield Object
* @return Pointer to the spdiagine Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg26::getspdiagine()
{
    return m_bfspdiagine;
}


/**
* Returns a pointer to the spdiagen Bitfield Object
* @return Pointer to the spdiagen Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg26::getspdiagen()
{
    return m_bfspdiagen;
}

/*****************************************************************************/

/**
*Reg27 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg27register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg27 register and is then
* associated with the register object.
*/
Reg27::Reg27()
{
    // Create a new instance of the Bitfield object to represent toff  bitfield
    m_bftoff = new Bitfield<U32T> (0, 5, WRITE, READ);
    // Create a new instance of the Bitfield object to represent lint09  bitfield
    m_bflint09 = new Bitfield<U32T> (5, 13, WRITE, READ);
    // Create a new instance of the Bitfield object to represent lint08  bitfield
    m_bflint08 = new Bitfield<U32T> (18, 13, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg27 register
    Bitfield<U32T> * bitfields [] = {
    m_bftoff,
    m_bflint09,
    m_bflint08
};
// Create a new instance of the Register object to represent Reg27 register
m_register = new Register<U32T> (32, 0x00000000, 3, bitfields);
}

/**
* Returns pointer to Reg27 Register object.
* @return Pointer to Reg27 Register object (Register *).
*/
Register<U32T> * Reg27::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the toff Bitfield Object
* @return Pointer to the toff Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg27::gettoff()
{
    return m_bftoff;
}


/**
* Returns a pointer to the lint09 Bitfield Object
* @return Pointer to the lint09 Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg27::getlint09()
{
    return m_bflint09;
}


/**
* Returns a pointer to the lint08 Bitfield Object
* @return Pointer to the lint08 Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg27::getlint08()
{
    return m_bflint08;
}

/*****************************************************************************/

/**
*Reg28 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg28register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg28 register and is then
* associated with the register object.
*/
Reg28::Reg28()
{
    // Create a new instance of the Bitfield object to represent lint11  bitfield
    m_bflint11 = new Bitfield<U32T> (0, 13, WRITE, READ);
    // Create a new instance of the Bitfield object to represent lint10  bitfield
    m_bflint10 = new Bitfield<U32T> (13, 13, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg28 register
    Bitfield<U32T> * bitfields [] = {
    m_bflint11,
    m_bflint10
};
// Create a new instance of the Register object to represent Reg28 register
m_register = new Register<U32T> (32, 0x00000000, 2, bitfields);
}

/**
* Returns pointer to Reg28 Register object.
* @return Pointer to Reg28 Register object (Register *).
*/
Register<U32T> * Reg28::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the lint11 Bitfield Object
* @return Pointer to the lint11 Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg28::getlint11()
{
    return m_bflint11;
}


/**
* Returns a pointer to the lint10 Bitfield Object
* @return Pointer to the lint10 Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg28::getlint10()
{
    return m_bflint10;
}

/*****************************************************************************/

/**
*Reg29 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg29register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg29 register and is then
* associated with the register object.
*/
Reg29::Reg29()
{
    // Create a new instance of the Bitfield object to represent lint13  bitfield
    m_bflint13 = new Bitfield<U32T> (0, 13, WRITE, READ);
    // Create a new instance of the Bitfield object to represent lint12  bitfield
    m_bflint12 = new Bitfield<U32T> (13, 13, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg29 register
    Bitfield<U32T> * bitfields [] = {
    m_bflint13,
    m_bflint12
};
// Create a new instance of the Register object to represent Reg29 register
m_register = new Register<U32T> (32, 0x00000000, 2, bitfields);
}

/**
* Returns pointer to Reg29 Register object.
* @return Pointer to Reg29 Register object (Register *).
*/
Register<U32T> * Reg29::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the lint13 Bitfield Object
* @return Pointer to the lint13 Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg29::getlint13()
{
    return m_bflint13;
}


/**
* Returns a pointer to the lint12 Bitfield Object
* @return Pointer to the lint12 Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg29::getlint12()
{
    return m_bflint12;
}

/*****************************************************************************/

/**
*Reg30 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg30register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg30 register and is then
* associated with the register object.
*/
Reg30::Reg30()
{
    // Create a new instance of the Bitfield object to represent lint15  bitfield
    m_bflint15 = new Bitfield<U32T> (0, 13, WRITE, READ);
    // Create a new instance of the Bitfield object to represent lint14  bitfield
    m_bflint14 = new Bitfield<U32T> (13, 13, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg30 register
    Bitfield<U32T> * bitfields [] = {
    m_bflint15,
    m_bflint14
};
// Create a new instance of the Register object to represent Reg30 register
m_register = new Register<U32T> (32, 0x00000000, 2, bitfields);
}

/**
* Returns pointer to Reg30 Register object.
* @return Pointer to Reg30 Register object (Register *).
*/
Register<U32T> * Reg30::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the lint15 Bitfield Object
* @return Pointer to the lint15 Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg30::getlint15()
{
    return m_bflint15;
}


/**
* Returns a pointer to the lint14 Bitfield Object
* @return Pointer to the lint14 Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg30::getlint14()
{
    return m_bflint14;
}

/*****************************************************************************/

/**
*Reg31 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg31register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg31 register and is then
* associated with the register object.
*/
Reg31::Reg31()
{
    // Create a new instance of the Bitfield object to represent tslp  bitfield
    m_bftslp = new Bitfield<U32T> (0, 7, WRITE, READ);
    // Create a new instance of the Bitfield object to represent plinqvo  bitfield
    m_bfplinqvo = new Bitfield<U32T> (7, 12, WRITE, READ);
    // Create a new instance of the Bitfield object to represent lint16  bitfield
    m_bflint16 = new Bitfield<U32T> (19, 13, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg31 register
    Bitfield<U32T> * bitfields [] = {
    m_bftslp,
    m_bfplinqvo,
    m_bflint16
};
// Create a new instance of the Register object to represent Reg31 register
m_register = new Register<U32T> (32, 0x00000000, 3, bitfields);
}

/**
* Returns pointer to Reg31 Register object.
* @return Pointer to Reg31 Register object (Register *).
*/
Register<U32T> * Reg31::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the tslp Bitfield Object
* @return Pointer to the tslp Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg31::gettslp()
{
    return m_bftslp;
}


/**
* Returns a pointer to the plinqvo Bitfield Object
* @return Pointer to the plinqvo Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg31::getplinqvo()
{
    return m_bfplinqvo;
}


/**
* Returns a pointer to the lint16 Bitfield Object
* @return Pointer to the lint16 Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg31::getlint16()
{
    return m_bflint16;
}

/*****************************************************************************/

/**
*Reg32 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg32register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg32 register and is then
* associated with the register object.
*/
Reg32::Reg32()
{
    // Create a new instance of the Bitfield object to represent qoc  bitfield
    m_bfqoc = new Bitfield<U32T> (0, 18, WRITE, READ);
    // Create a new instance of the Bitfield object to represent plinsens  bitfield
    m_bfplinsens = new Bitfield<U32T> (18, 12, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg32 register
    Bitfield<U32T> * bitfields [] = {
    m_bfqoc,
    m_bfplinsens
};
// Create a new instance of the Register object to represent Reg32 register
m_register = new Register<U32T> (32, 0x00000000, 2, bitfields);
}

/**
* Returns pointer to Reg32 Register object.
* @return Pointer to Reg32 Register object (Register *).
*/
Register<U32T> * Reg32::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the qoc Bitfield Object
* @return Pointer to the qoc Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg32::getqoc()
{
    return m_bfqoc;
}


/**
* Returns a pointer to the plinsens Bitfield Object
* @return Pointer to the plinsens Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg32::getplinsens()
{
    return m_bfplinsens;
}

/*****************************************************************************/

/**
*Reg33 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg33register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg33 register and is then
* associated with the register object.
*/
Reg33::Reg33()
{
    // Create a new instance of the Bitfield object to represent tzero  bitfield
    m_bftzero = new Bitfield<U32T> (0, 7, WRITE, READ);
    // Create a new instance of the Bitfield object to represent qotchotc  bitfield
    m_bfqotchotc = new Bitfield<U32T> (7, 12, WRITE, READ);
    // Create a new instance of the Bitfield object to represent qotccldc  bitfield
    m_bfqotccldc = new Bitfield<U32T> (19, 12, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg33 register
    Bitfield<U32T> * bitfields [] = {
    m_bftzero,
    m_bfqotchotc,
    m_bfqotccldc
};
// Create a new instance of the Register object to represent Reg33 register
m_register = new Register<U32T> (32, 0x00000000, 3, bitfields);
}

/**
* Returns pointer to Reg33 Register object.
* @return Pointer to Reg33 Register object (Register *).
*/
Register<U32T> * Reg33::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the tzero Bitfield Object
* @return Pointer to the tzero Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg33::gettzero()
{
    return m_bftzero;
}


/**
* Returns a pointer to the qotchotc Bitfield Object
* @return Pointer to the qotchotc Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg33::getqotchotc()
{
    return m_bfqotchotc;
}


/**
* Returns a pointer to the qotccldc Bitfield Object
* @return Pointer to the qotccldc Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg33::getqotccldc()
{
    return m_bfqotccldc;
}

/*****************************************************************************/

/**
*Reg34 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg34register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg34 register and is then
* associated with the register object.
*/
Reg34::Reg34()
{
    // Create a new instance of the Bitfield object to represent refsigmonhall  bitfield
    m_bfrefsigmonhall = new Bitfield<U32T> (0, 10, WRITE, READ);
    // Create a new instance of the Bitfield object to represent clamph  bitfield
    m_bfclamph = new Bitfield<U32T> (10, 12, WRITE, READ);
    // Create a new instance of the Bitfield object to represent refsigmonbg  bitfield
    m_bfrefsigmonbg = new Bitfield<U32T> (22, 10, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg34 register
    Bitfield<U32T> * bitfields [] = {
    m_bfrefsigmonhall,
    m_bfclamph,
    m_bfrefsigmonbg
};
// Create a new instance of the Register object to represent Reg34 register
m_register = new Register<U32T> (32, 0x00000000, 3, bitfields);
}

/**
* Returns pointer to Reg34 Register object.
* @return Pointer to Reg34 Register object (Register *).
*/
Register<U32T> * Reg34::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the refsigmonhall Bitfield Object
* @return Pointer to the refsigmonhall Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg34::getrefsigmonhall()
{
    return m_bfrefsigmonhall;
}


/**
* Returns a pointer to the clamph Bitfield Object
* @return Pointer to the clamph Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg34::getclamph()
{
    return m_bfclamph;
}


/**
* Returns a pointer to the refsigmonbg Bitfield Object
* @return Pointer to the refsigmonbg Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg34::getrefsigmonbg()
{
    return m_bfrefsigmonbg;
}

/*****************************************************************************/

/**
*Reg35 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg35register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg35 register and is then
* associated with the register object.
*/
Reg35::Reg35()
{
    // Create a new instance of the Bitfield object to represent sensc  bitfield
    m_bfsensc = new Bitfield<U32T> (0, 11, WRITE, READ);
    // Create a new instance of the Bitfield object to represent clampl  bitfield
    m_bfclampl = new Bitfield<U32T> (11, 12, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg35 register
    Bitfield<U32T> * bitfields [] = {
    m_bfsensc,
    m_bfclampl
};
// Create a new instance of the Register object to represent Reg35 register
m_register = new Register<U32T> (32, 0x00000000, 2, bitfields);
}

/**
* Returns pointer to Reg35 Register object.
* @return Pointer to Reg35 Register object (Register *).
*/
Register<U32T> * Reg35::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the sensc Bitfield Object
* @return Pointer to the sensc Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg35::getsensc()
{
    return m_bfsensc;
}


/**
* Returns a pointer to the clampl Bitfield Object
* @return Pointer to the clampl Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg35::getclampl()
{
    return m_bfclampl;
}

/*****************************************************************************/

/**
*Reg36 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg36register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg36 register and is then
* associated with the register object.
*/
Reg36::Reg36()
{
    // Create a new instance of the Bitfield object to represent senstc2cldc  bitfield
    m_bfsenstc2cldc = new Bitfield<U32T> (0, 10, WRITE, READ);
    // Create a new instance of the Bitfield object to represent sensf  bitfield
    m_bfsensf = new Bitfield<U32T> (10, 11, WRITE, READ);
    // Create a new instance of the Bitfield object to represent sensdiag  bitfield
    m_bfsensdiag = new Bitfield<U32T> (21, 11, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg36 register
    Bitfield<U32T> * bitfields [] = {
    m_bfsenstc2cldc,
    m_bfsensf,
    m_bfsensdiag
};
// Create a new instance of the Register object to represent Reg36 register
m_register = new Register<U32T> (32, 0x00000000, 3, bitfields);
}

/**
* Returns pointer to Reg36 Register object.
* @return Pointer to Reg36 Register object (Register *).
*/
Register<U32T> * Reg36::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the senstc2cldc Bitfield Object
* @return Pointer to the senstc2cldc Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg36::getsenstc2cldc()
{
    return m_bfsenstc2cldc;
}


/**
* Returns a pointer to the sensf Bitfield Object
* @return Pointer to the sensf Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg36::getsensf()
{
    return m_bfsensf;
}


/**
* Returns a pointer to the sensdiag Bitfield Object
* @return Pointer to the sensdiag Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg36::getsensdiag()
{
    return m_bfsensdiag;
}

/*****************************************************************************/

/**
*Reg37 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg37register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg37 register and is then
* associated with the register object.
*/
Reg37::Reg37()
{
    // Create a new instance of the Bitfield object to represent senstc2cldf  bitfield
    m_bfsenstc2cldf = new Bitfield<U32T> (0, 10, WRITE, READ);
    // Create a new instance of the Bitfield object to represent senstc1clddiag  bitfield
    m_bfsenstc1clddiag = new Bitfield<U32T> (10, 11, WRITE, READ);
    // Create a new instance of the Bitfield object to represent senstc1cldc  bitfield
    m_bfsenstc1cldc = new Bitfield<U32T> (21, 11, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg37 register
    Bitfield<U32T> * bitfields [] = {
    m_bfsenstc2cldf,
    m_bfsenstc1clddiag,
    m_bfsenstc1cldc
};
// Create a new instance of the Register object to represent Reg37 register
m_register = new Register<U32T> (32, 0x00000000, 3, bitfields);
}

/**
* Returns pointer to Reg37 Register object.
* @return Pointer to Reg37 Register object (Register *).
*/
Register<U32T> * Reg37::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the senstc2cldf Bitfield Object
* @return Pointer to the senstc2cldf Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg37::getsenstc2cldf()
{
    return m_bfsenstc2cldf;
}


/**
* Returns a pointer to the senstc1clddiag Bitfield Object
* @return Pointer to the senstc1clddiag Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg37::getsenstc1clddiag()
{
    return m_bfsenstc1clddiag;
}


/**
* Returns a pointer to the senstc1cldc Bitfield Object
* @return Pointer to the senstc1cldc Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg37::getsenstc1cldc()
{
    return m_bfsenstc1cldc;
}

/*****************************************************************************/

/**
*Reg38 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg38register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg38 register and is then
* associated with the register object.
*/
Reg38::Reg38()
{
    // Create a new instance of the Bitfield object to represent senstc2hotc  bitfield
    m_bfsenstc2hotc = new Bitfield<U32T> (0, 10, WRITE, READ);
    // Create a new instance of the Bitfield object to represent senstc1hotc  bitfield
    m_bfsenstc1hotc = new Bitfield<U32T> (10, 11, WRITE, READ);
    // Create a new instance of the Bitfield object to represent senstc1cldf  bitfield
    m_bfsenstc1cldf = new Bitfield<U32T> (21, 11, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg38 register
    Bitfield<U32T> * bitfields [] = {
    m_bfsenstc2hotc,
    m_bfsenstc1hotc,
    m_bfsenstc1cldf
};
// Create a new instance of the Register object to represent Reg38 register
m_register = new Register<U32T> (32, 0x00000000, 3, bitfields);
}

/**
* Returns pointer to Reg38 Register object.
* @return Pointer to Reg38 Register object (Register *).
*/
Register<U32T> * Reg38::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the senstc2hotc Bitfield Object
* @return Pointer to the senstc2hotc Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg38::getsenstc2hotc()
{
    return m_bfsenstc2hotc;
}


/**
* Returns a pointer to the senstc1hotc Bitfield Object
* @return Pointer to the senstc1hotc Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg38::getsenstc1hotc()
{
    return m_bfsenstc1hotc;
}


/**
* Returns a pointer to the senstc1cldf Bitfield Object
* @return Pointer to the senstc1cldf Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg38::getsenstc1cldf()
{
    return m_bfsenstc1cldf;
}

/*****************************************************************************/

/**
*Reg39 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg39register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg39 register and is then
* associated with the register object.
*/
Reg39::Reg39()
{
    // Create a new instance of the Bitfield object to represent senstc2hotf  bitfield
    m_bfsenstc2hotf = new Bitfield<U32T> (0, 10, WRITE, READ);
    // Create a new instance of the Bitfield object to represent senstc1hotf  bitfield
    m_bfsenstc1hotf = new Bitfield<U32T> (10, 11, WRITE, READ);
    // Create a new instance of the Bitfield object to represent senstc1hotdiag  bitfield
    m_bfsenstc1hotdiag = new Bitfield<U32T> (21, 11, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg39 register
    Bitfield<U32T> * bitfields [] = {
    m_bfsenstc2hotf,
    m_bfsenstc1hotf,
    m_bfsenstc1hotdiag
};
// Create a new instance of the Register object to represent Reg39 register
m_register = new Register<U32T> (32, 0x00000000, 3, bitfields);
}

/**
* Returns pointer to Reg39 Register object.
* @return Pointer to Reg39 Register object (Register *).
*/
Register<U32T> * Reg39::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the senstc2hotf Bitfield Object
* @return Pointer to the senstc2hotf Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg39::getsenstc2hotf()
{
    return m_bfsenstc2hotf;
}


/**
* Returns a pointer to the senstc1hotf Bitfield Object
* @return Pointer to the senstc1hotf Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg39::getsenstc1hotf()
{
    return m_bfsenstc1hotf;
}


/**
* Returns a pointer to the senstc1hotdiag Bitfield Object
* @return Pointer to the senstc1hotdiag Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg39::getsenstc1hotdiag()
{
    return m_bfsenstc1hotdiag;
}

/*****************************************************************************/

/**
*Reg40 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg40register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg40 register and is then
* associated with the register object.
*/
Reg40::Reg40()
{
    // Create a new instance of the Bitfield object to represent vosf  bitfield
    m_bfvosf = new Bitfield<U32T> (0, 14, WRITE, READ);
    // Create a new instance of the Bitfield object to represent spdiagin  bitfield
    m_bfspdiagin = new Bitfield<U32T> (14, 18, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg40 register
    Bitfield<U32T> * bitfields [] = {
    m_bfvosf,
    m_bfspdiagin
};
// Create a new instance of the Register object to represent Reg40 register
m_register = new Register<U32T> (32, 0x00000000, 2, bitfields);
}

/**
* Returns pointer to Reg40 Register object.
* @return Pointer to Reg40 Register object (Register *).
*/
Register<U32T> * Reg40::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the vosf Bitfield Object
* @return Pointer to the vosf Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg40::getvosf()
{
    return m_bfvosf;
}


/**
* Returns a pointer to the spdiagin Bitfield Object
* @return Pointer to the spdiagin Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg40::getspdiagin()
{
    return m_bfspdiagin;
}

/*****************************************************************************/

/**
*Reg41 class constructor.
* This creates an instance of the Register object that is used to represent
* the Reg41register. In addition, an instance of the Bitfield object is
* created for each bitfield associated with the Reg41 register and is then
* associated with the register object.
*/
Reg41::Reg41()
{
    // Create a new instance of the Bitfield object to represent vostchotf  bitfield
    m_bfvostchotf = new Bitfield<U32T> (0, 12, WRITE, READ);
    // Create a new instance of the Bitfield object to represent vostccldf  bitfield
    m_bfvostccldf = new Bitfield<U32T> (12, 12, WRITE, READ);
    // Declare an array containing pointers to all bitfields associated with the
    // Reg41 register
    Bitfield<U32T> * bitfields [] = {
    m_bfvostchotf,
    m_bfvostccldf
};
// Create a new instance of the Register object to represent Reg41 register
m_register = new Register<U32T> (32, 0x00000000, 2, bitfields);
}

/**
* Returns pointer to Reg41 Register object.
* @return Pointer to Reg41 Register object (Register *).
*/
Register<U32T> * Reg41::getRegister()
{
    return m_register;
}


/**
* Returns a pointer to the vostchotf Bitfield Object
* @return Pointer to the vostchotf Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg41::getvostchotf()
{
    return m_bfvostchotf;
}


/**
* Returns a pointer to the vostccldf Bitfield Object
* @return Pointer to the vostccldf Bitfield Object (Bitfield *).
*/
Bitfield<U32T> * Reg41::getvostccldf()
{
    return m_bfvostccldf;
}

} // namespace DUOLOG
