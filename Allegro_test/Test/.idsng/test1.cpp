/**** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ***
** created by        :
** generated by      : Agnisys
** generated from    : D:\AgnisysProjects\git_test\Allegro_test\Test\test1.idsng
** IDesignSpec rev   : idsbatch v4.16.26.2

***** This code is generated with following settings ***
**---------------------------------------------------------------------------------------------------------------*/



#include "Access.h"
#include "test1.h"

namespace DUOLOG
{
    
    /**
    * test1 class constructor.
    * This creates instances of all objects required to represent the registers
    * and memories within the test1 component.
    */
    test1::test1()
    {
        // Create register objects
        createRegisters();
        // Create memory objects
        createMemories();
        // Locate registers
        locateRegisters();
        // Locate memories
        locateMemories();
    }
    /**
    * Creates register objects
    */
    void test1::createRegisters()
    {
        // Create a new instance of the regname223 class to represent regname223 register
        m_regregname223 = new regname223;
        // Create a new instance of the regname2 class to represent regname2 register
        m_regregname2 = new regname2;
        // Create a new instance of the regname22222 class to represent regname22222 register
        m_regregname22222 = new regname22222;
        // Create a new instance of the regname22 class to represent regname22 register
        m_regregname22 = new regname22;
        // Create a new instance of the regname class to represent sec1regname_0 register
        m_regsec1regname_0 = new regname;
        // Create a new instance of the regname class to represent sec1regname_1 register
        m_regsec1regname_1 = new regname;
        // Create a new instance of the regname class to represent sec1regname_2 register
        m_regsec1regname_2 = new regname;
        // Create a new instance of the regname class to represent sec1regname_3 register
        m_regsec1regname_3 = new regname;
        // Create a new instance of the regname class to represent sec1regname_4 register
        m_regsec1regname_4 = new regname;
        // Create a new instance of the regname class to represent sec1regname_5 register
        m_regsec1regname_5 = new regname;
        // Create a new instance of the regname class to represent sec1regname_6 register
        m_regsec1regname_6 = new regname;
        // Create a new instance of the regname class to represent sec1regname_7 register
        m_regsec1regname_7 = new regname;
        // Create a new instance of the regname class to represent sec1regname_8 register
        m_regsec1regname_8 = new regname;
        // Create a new instance of the regname class to represent sec1regname_9 register
        m_regsec1regname_9 = new regname;
        // Create a new instance of the regname class to represent sec1regname_10 register
        m_regsec1regname_10 = new regname;
        // Create a new instance of the regname class to represent sec1regname_11 register
        m_regsec1regname_11 = new regname;
        // Create a new instance of the regname class to represent sec1regname_12 register
        m_regsec1regname_12 = new regname;
        // Create a new instance of the regname class to represent sec1regname_13 register
        m_regsec1regname_13 = new regname;
        // Create a new instance of the regname class to represent sec1regname_14 register
        m_regsec1regname_14 = new regname;
        // Create a new instance of the regname class to represent sec1regname_15 register
        m_regsec1regname_15 = new regname;
        // Create a new instance of the regname class to represent sec1regname_16 register
        m_regsec1regname_16 = new regname;
        // Create a new instance of the regname class to represent sec1regname_17 register
        m_regsec1regname_17 = new regname;
        // Create a new instance of the regname class to represent sec1regname_18 register
        m_regsec1regname_18 = new regname;
        // Create a new instance of the regname class to represent sec1regname_19 register
        m_regsec1regname_19 = new regname;
        // Create a new instance of the regname class to represent sec1regname_20 register
        m_regsec1regname_20 = new regname;
        // Create a new instance of the regname class to represent sec1regname_21 register
        m_regsec1regname_21 = new regname;
        // Create a new instance of the regname class to represent sec1regname_22 register
        m_regsec1regname_22 = new regname;
        // Create a new instance of the regname class to represent sec1regname_23 register
        m_regsec1regname_23 = new regname;
        // Create a new instance of the regname class to represent sec1regname_24 register
        m_regsec1regname_24 = new regname;
        // Create a new instance of the regname class to represent sec1regname_25 register
        m_regsec1regname_25 = new regname;
        // Create a new instance of the regname class to represent sec1regname_26 register
        m_regsec1regname_26 = new regname;
        // Create a new instance of the regname class to represent sec1regname_27 register
        m_regsec1regname_27 = new regname;
        // Create a new instance of the regname class to represent sec1regname_28 register
        m_regsec1regname_28 = new regname;
        // Create a new instance of the regname class to represent sec1regname_29 register
        m_regsec1regname_29 = new regname;
        // Create a new instance of the regname class to represent sec1regname_30 register
        m_regsec1regname_30 = new regname;
        // Create a new instance of the regname class to represent sec1regname_31 register
        m_regsec1regname_31 = new regname;
        // Create a new instance of the regname class to represent sec1regname_32 register
        m_regsec1regname_32 = new regname;
        // Create a new instance of the regname class to represent sec1regname_33 register
        m_regsec1regname_33 = new regname;
        // Create a new instance of the regname class to represent sec1regname_34 register
        m_regsec1regname_34 = new regname;
        // Create a new instance of the regname class to represent sec1regname_35 register
        m_regsec1regname_35 = new regname;
        // Create a new instance of the regname class to represent sec1regname_36 register
        m_regsec1regname_36 = new regname;
        // Create a new instance of the regname class to represent sec1regname_37 register
        m_regsec1regname_37 = new regname;
        // Create a new instance of the regname class to represent sec1regname_38 register
        m_regsec1regname_38 = new regname;
        // Create a new instance of the regname class to represent sec1regname_39 register
        m_regsec1regname_39 = new regname;
        // Create a new instance of the regname class to represent sec1regname_40 register
        m_regsec1regname_40 = new regname;
        // Create a new instance of the regname class to represent sec1regname_41 register
        m_regsec1regname_41 = new regname;
        // Create a new instance of the regname class to represent sec1regname_42 register
        m_regsec1regname_42 = new regname;
        // Create a new instance of the regname class to represent sec1regname_43 register
        m_regsec1regname_43 = new regname;
        // Create a new instance of the regname class to represent sec1regname_44 register
        m_regsec1regname_44 = new regname;
        // Create a new instance of the regname class to represent sec1regname_45 register
        m_regsec1regname_45 = new regname;
        // Create a new instance of the regname class to represent sec1regname_46 register
        m_regsec1regname_46 = new regname;
        // Create a new instance of the regname class to represent sec1regname_47 register
        m_regsec1regname_47 = new regname;
        // Create a new instance of the regname class to represent sec1regname_48 register
        m_regsec1regname_48 = new regname;
        // Create a new instance of the regname class to represent sec1regname_49 register
        m_regsec1regname_49 = new regname;
        // Create a new instance of the regname class to represent sec1regname_50 register
        m_regsec1regname_50 = new regname;
        // Create a new instance of the regname class to represent sec1regname_51 register
        m_regsec1regname_51 = new regname;
        // Create a new instance of the regname class to represent sec1regname_52 register
        m_regsec1regname_52 = new regname;
        // Create a new instance of the regname class to represent sec1regname_53 register
        m_regsec1regname_53 = new regname;
        // Create a new instance of the regname class to represent sec1regname_54 register
        m_regsec1regname_54 = new regname;
        // Create a new instance of the regname class to represent sec1regname_55 register
        m_regsec1regname_55 = new regname;
        // Create a new instance of the regname class to represent sec1regname_56 register
        m_regsec1regname_56 = new regname;
        // Create a new instance of the regname class to represent sec1regname_57 register
        m_regsec1regname_57 = new regname;
        // Create a new instance of the regname class to represent sec1regname_58 register
        m_regsec1regname_58 = new regname;
        // Create a new instance of the regname class to represent sec1regname_59 register
        m_regsec1regname_59 = new regname;
        // Create a new instance of the regname class to represent sec1regname_60 register
        m_regsec1regname_60 = new regname;
        // Create a new instance of the regname class to represent sec1regname_61 register
        m_regsec1regname_61 = new regname;
        // Create a new instance of the regname class to represent sec1regname_62 register
        m_regsec1regname_62 = new regname;
        // Create a new instance of the regname class to represent sec1regname_63 register
        m_regsec1regname_63 = new regname;
        // Create a new instance of the regname class to represent shadowregname_0 register
        m_regshadowregname_0 = new regname;
        return;
    }
    
    /**
    * Creates memory objects
    */
    void test1::createMemories()
    {
        return;
    }
    /**
    * Locates register objects
    */
    void test1::locateRegisters()
    {
        // Create a new instance of the LocatedRegister object to represent regname223 register
        // at address 0x100
        m_loctest1_intfregname223 = new LocatedRegister<U8T> (
        m_regregname223->getRegister(),
        TEST1_INTF_REGNAME223_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent regname2 register
        // at address 0x101
        m_loctest1_intfregname2 = new LocatedRegister<U8T> (
        m_regregname2->getRegister(),
        TEST1_INTF_REGNAME2_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent regname22222 register
        // at address 0x102
        m_loctest1_intfregname22222 = new LocatedRegister<U8T> (
        m_regregname22222->getRegister(),
        TEST1_INTF_REGNAME22222_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent regname22 register
        // at address 0x103
        m_loctest1_intfregname22 = new LocatedRegister<U8T> (
        m_regregname22->getRegister(),
        TEST1_INTF_REGNAME22_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_0 register
        // at address 0x0
        m_loctest1_intfsec1regname_0 = new LocatedRegister<U32T> (
        m_regsec1regname_0->getRegister(),
        TEST1_INTF_SEC1REGNAME_0_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_1 register
        // at address 0x4
        m_loctest1_intfsec1regname_1 = new LocatedRegister<U32T> (
        m_regsec1regname_1->getRegister(),
        TEST1_INTF_SEC1REGNAME_1_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_2 register
        // at address 0x8
        m_loctest1_intfsec1regname_2 = new LocatedRegister<U32T> (
        m_regsec1regname_2->getRegister(),
        TEST1_INTF_SEC1REGNAME_2_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_3 register
        // at address 0xc
        m_loctest1_intfsec1regname_3 = new LocatedRegister<U32T> (
        m_regsec1regname_3->getRegister(),
        TEST1_INTF_SEC1REGNAME_3_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_4 register
        // at address 0x10
        m_loctest1_intfsec1regname_4 = new LocatedRegister<U32T> (
        m_regsec1regname_4->getRegister(),
        TEST1_INTF_SEC1REGNAME_4_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_5 register
        // at address 0x14
        m_loctest1_intfsec1regname_5 = new LocatedRegister<U32T> (
        m_regsec1regname_5->getRegister(),
        TEST1_INTF_SEC1REGNAME_5_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_6 register
        // at address 0x18
        m_loctest1_intfsec1regname_6 = new LocatedRegister<U32T> (
        m_regsec1regname_6->getRegister(),
        TEST1_INTF_SEC1REGNAME_6_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_7 register
        // at address 0x1c
        m_loctest1_intfsec1regname_7 = new LocatedRegister<U32T> (
        m_regsec1regname_7->getRegister(),
        TEST1_INTF_SEC1REGNAME_7_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_8 register
        // at address 0x20
        m_loctest1_intfsec1regname_8 = new LocatedRegister<U32T> (
        m_regsec1regname_8->getRegister(),
        TEST1_INTF_SEC1REGNAME_8_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_9 register
        // at address 0x24
        m_loctest1_intfsec1regname_9 = new LocatedRegister<U32T> (
        m_regsec1regname_9->getRegister(),
        TEST1_INTF_SEC1REGNAME_9_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_10 register
        // at address 0x28
        m_loctest1_intfsec1regname_10 = new LocatedRegister<U32T> (
        m_regsec1regname_10->getRegister(),
        TEST1_INTF_SEC1REGNAME_10_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_11 register
        // at address 0x2c
        m_loctest1_intfsec1regname_11 = new LocatedRegister<U32T> (
        m_regsec1regname_11->getRegister(),
        TEST1_INTF_SEC1REGNAME_11_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_12 register
        // at address 0x30
        m_loctest1_intfsec1regname_12 = new LocatedRegister<U32T> (
        m_regsec1regname_12->getRegister(),
        TEST1_INTF_SEC1REGNAME_12_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_13 register
        // at address 0x34
        m_loctest1_intfsec1regname_13 = new LocatedRegister<U32T> (
        m_regsec1regname_13->getRegister(),
        TEST1_INTF_SEC1REGNAME_13_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_14 register
        // at address 0x38
        m_loctest1_intfsec1regname_14 = new LocatedRegister<U32T> (
        m_regsec1regname_14->getRegister(),
        TEST1_INTF_SEC1REGNAME_14_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_15 register
        // at address 0x3c
        m_loctest1_intfsec1regname_15 = new LocatedRegister<U32T> (
        m_regsec1regname_15->getRegister(),
        TEST1_INTF_SEC1REGNAME_15_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_16 register
        // at address 0x40
        m_loctest1_intfsec1regname_16 = new LocatedRegister<U32T> (
        m_regsec1regname_16->getRegister(),
        TEST1_INTF_SEC1REGNAME_16_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_17 register
        // at address 0x44
        m_loctest1_intfsec1regname_17 = new LocatedRegister<U32T> (
        m_regsec1regname_17->getRegister(),
        TEST1_INTF_SEC1REGNAME_17_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_18 register
        // at address 0x48
        m_loctest1_intfsec1regname_18 = new LocatedRegister<U32T> (
        m_regsec1regname_18->getRegister(),
        TEST1_INTF_SEC1REGNAME_18_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_19 register
        // at address 0x4c
        m_loctest1_intfsec1regname_19 = new LocatedRegister<U32T> (
        m_regsec1regname_19->getRegister(),
        TEST1_INTF_SEC1REGNAME_19_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_20 register
        // at address 0x50
        m_loctest1_intfsec1regname_20 = new LocatedRegister<U32T> (
        m_regsec1regname_20->getRegister(),
        TEST1_INTF_SEC1REGNAME_20_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_21 register
        // at address 0x54
        m_loctest1_intfsec1regname_21 = new LocatedRegister<U32T> (
        m_regsec1regname_21->getRegister(),
        TEST1_INTF_SEC1REGNAME_21_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_22 register
        // at address 0x58
        m_loctest1_intfsec1regname_22 = new LocatedRegister<U32T> (
        m_regsec1regname_22->getRegister(),
        TEST1_INTF_SEC1REGNAME_22_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_23 register
        // at address 0x5c
        m_loctest1_intfsec1regname_23 = new LocatedRegister<U32T> (
        m_regsec1regname_23->getRegister(),
        TEST1_INTF_SEC1REGNAME_23_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_24 register
        // at address 0x60
        m_loctest1_intfsec1regname_24 = new LocatedRegister<U32T> (
        m_regsec1regname_24->getRegister(),
        TEST1_INTF_SEC1REGNAME_24_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_25 register
        // at address 0x64
        m_loctest1_intfsec1regname_25 = new LocatedRegister<U32T> (
        m_regsec1regname_25->getRegister(),
        TEST1_INTF_SEC1REGNAME_25_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_26 register
        // at address 0x68
        m_loctest1_intfsec1regname_26 = new LocatedRegister<U32T> (
        m_regsec1regname_26->getRegister(),
        TEST1_INTF_SEC1REGNAME_26_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_27 register
        // at address 0x6c
        m_loctest1_intfsec1regname_27 = new LocatedRegister<U32T> (
        m_regsec1regname_27->getRegister(),
        TEST1_INTF_SEC1REGNAME_27_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_28 register
        // at address 0x70
        m_loctest1_intfsec1regname_28 = new LocatedRegister<U32T> (
        m_regsec1regname_28->getRegister(),
        TEST1_INTF_SEC1REGNAME_28_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_29 register
        // at address 0x74
        m_loctest1_intfsec1regname_29 = new LocatedRegister<U32T> (
        m_regsec1regname_29->getRegister(),
        TEST1_INTF_SEC1REGNAME_29_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_30 register
        // at address 0x78
        m_loctest1_intfsec1regname_30 = new LocatedRegister<U32T> (
        m_regsec1regname_30->getRegister(),
        TEST1_INTF_SEC1REGNAME_30_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_31 register
        // at address 0x7c
        m_loctest1_intfsec1regname_31 = new LocatedRegister<U32T> (
        m_regsec1regname_31->getRegister(),
        TEST1_INTF_SEC1REGNAME_31_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_32 register
        // at address 0x80
        m_loctest1_intfsec1regname_32 = new LocatedRegister<U32T> (
        m_regsec1regname_32->getRegister(),
        TEST1_INTF_SEC1REGNAME_32_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_33 register
        // at address 0x84
        m_loctest1_intfsec1regname_33 = new LocatedRegister<U32T> (
        m_regsec1regname_33->getRegister(),
        TEST1_INTF_SEC1REGNAME_33_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_34 register
        // at address 0x88
        m_loctest1_intfsec1regname_34 = new LocatedRegister<U32T> (
        m_regsec1regname_34->getRegister(),
        TEST1_INTF_SEC1REGNAME_34_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_35 register
        // at address 0x8c
        m_loctest1_intfsec1regname_35 = new LocatedRegister<U32T> (
        m_regsec1regname_35->getRegister(),
        TEST1_INTF_SEC1REGNAME_35_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_36 register
        // at address 0x90
        m_loctest1_intfsec1regname_36 = new LocatedRegister<U32T> (
        m_regsec1regname_36->getRegister(),
        TEST1_INTF_SEC1REGNAME_36_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_37 register
        // at address 0x94
        m_loctest1_intfsec1regname_37 = new LocatedRegister<U32T> (
        m_regsec1regname_37->getRegister(),
        TEST1_INTF_SEC1REGNAME_37_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_38 register
        // at address 0x98
        m_loctest1_intfsec1regname_38 = new LocatedRegister<U32T> (
        m_regsec1regname_38->getRegister(),
        TEST1_INTF_SEC1REGNAME_38_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_39 register
        // at address 0x9c
        m_loctest1_intfsec1regname_39 = new LocatedRegister<U32T> (
        m_regsec1regname_39->getRegister(),
        TEST1_INTF_SEC1REGNAME_39_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_40 register
        // at address 0xa0
        m_loctest1_intfsec1regname_40 = new LocatedRegister<U32T> (
        m_regsec1regname_40->getRegister(),
        TEST1_INTF_SEC1REGNAME_40_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_41 register
        // at address 0xa4
        m_loctest1_intfsec1regname_41 = new LocatedRegister<U32T> (
        m_regsec1regname_41->getRegister(),
        TEST1_INTF_SEC1REGNAME_41_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_42 register
        // at address 0xa8
        m_loctest1_intfsec1regname_42 = new LocatedRegister<U32T> (
        m_regsec1regname_42->getRegister(),
        TEST1_INTF_SEC1REGNAME_42_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_43 register
        // at address 0xac
        m_loctest1_intfsec1regname_43 = new LocatedRegister<U32T> (
        m_regsec1regname_43->getRegister(),
        TEST1_INTF_SEC1REGNAME_43_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_44 register
        // at address 0xb0
        m_loctest1_intfsec1regname_44 = new LocatedRegister<U32T> (
        m_regsec1regname_44->getRegister(),
        TEST1_INTF_SEC1REGNAME_44_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_45 register
        // at address 0xb4
        m_loctest1_intfsec1regname_45 = new LocatedRegister<U32T> (
        m_regsec1regname_45->getRegister(),
        TEST1_INTF_SEC1REGNAME_45_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_46 register
        // at address 0xb8
        m_loctest1_intfsec1regname_46 = new LocatedRegister<U32T> (
        m_regsec1regname_46->getRegister(),
        TEST1_INTF_SEC1REGNAME_46_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_47 register
        // at address 0xbc
        m_loctest1_intfsec1regname_47 = new LocatedRegister<U32T> (
        m_regsec1regname_47->getRegister(),
        TEST1_INTF_SEC1REGNAME_47_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_48 register
        // at address 0xc0
        m_loctest1_intfsec1regname_48 = new LocatedRegister<U32T> (
        m_regsec1regname_48->getRegister(),
        TEST1_INTF_SEC1REGNAME_48_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_49 register
        // at address 0xc4
        m_loctest1_intfsec1regname_49 = new LocatedRegister<U32T> (
        m_regsec1regname_49->getRegister(),
        TEST1_INTF_SEC1REGNAME_49_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_50 register
        // at address 0xc8
        m_loctest1_intfsec1regname_50 = new LocatedRegister<U32T> (
        m_regsec1regname_50->getRegister(),
        TEST1_INTF_SEC1REGNAME_50_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_51 register
        // at address 0xcc
        m_loctest1_intfsec1regname_51 = new LocatedRegister<U32T> (
        m_regsec1regname_51->getRegister(),
        TEST1_INTF_SEC1REGNAME_51_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_52 register
        // at address 0xd0
        m_loctest1_intfsec1regname_52 = new LocatedRegister<U32T> (
        m_regsec1regname_52->getRegister(),
        TEST1_INTF_SEC1REGNAME_52_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_53 register
        // at address 0xd4
        m_loctest1_intfsec1regname_53 = new LocatedRegister<U32T> (
        m_regsec1regname_53->getRegister(),
        TEST1_INTF_SEC1REGNAME_53_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_54 register
        // at address 0xd8
        m_loctest1_intfsec1regname_54 = new LocatedRegister<U32T> (
        m_regsec1regname_54->getRegister(),
        TEST1_INTF_SEC1REGNAME_54_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_55 register
        // at address 0xdc
        m_loctest1_intfsec1regname_55 = new LocatedRegister<U32T> (
        m_regsec1regname_55->getRegister(),
        TEST1_INTF_SEC1REGNAME_55_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_56 register
        // at address 0xe0
        m_loctest1_intfsec1regname_56 = new LocatedRegister<U32T> (
        m_regsec1regname_56->getRegister(),
        TEST1_INTF_SEC1REGNAME_56_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_57 register
        // at address 0xe4
        m_loctest1_intfsec1regname_57 = new LocatedRegister<U32T> (
        m_regsec1regname_57->getRegister(),
        TEST1_INTF_SEC1REGNAME_57_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_58 register
        // at address 0xe8
        m_loctest1_intfsec1regname_58 = new LocatedRegister<U32T> (
        m_regsec1regname_58->getRegister(),
        TEST1_INTF_SEC1REGNAME_58_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_59 register
        // at address 0xec
        m_loctest1_intfsec1regname_59 = new LocatedRegister<U32T> (
        m_regsec1regname_59->getRegister(),
        TEST1_INTF_SEC1REGNAME_59_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_60 register
        // at address 0xf0
        m_loctest1_intfsec1regname_60 = new LocatedRegister<U32T> (
        m_regsec1regname_60->getRegister(),
        TEST1_INTF_SEC1REGNAME_60_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_61 register
        // at address 0xf4
        m_loctest1_intfsec1regname_61 = new LocatedRegister<U32T> (
        m_regsec1regname_61->getRegister(),
        TEST1_INTF_SEC1REGNAME_61_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_62 register
        // at address 0xf8
        m_loctest1_intfsec1regname_62 = new LocatedRegister<U32T> (
        m_regsec1regname_62->getRegister(),
        TEST1_INTF_SEC1REGNAME_62_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent sec1regname_63 register
        // at address 0xfc
        m_loctest1_intfsec1regname_63 = new LocatedRegister<U32T> (
        m_regsec1regname_63->getRegister(),
        TEST1_INTF_SEC1REGNAME_63_ADDRESS,
        WRITE, READ);
        // Create a new instance of the LocatedRegister object to represent shadowregname_0 register
        // at address 0x104
        m_loctest1_intfshadowregname_0 = new LocatedRegister<U16T> (
        m_regshadowregname_0->getRegister(),
        TEST1_INTF_SHADOWREGNAME_0_ADDRESS,
        WRITE, READ);
        return;
    }
    
    /**
    * Locates memory objects
    */
    void test1::locateMemories()
    {
        return;
    }
    /**
    * Initialises all registers within component to power-on-reset state.
    */
    void test1::initialise()
    {
        m_regsec1regname_0->getRegister()->initialise();
        m_regsec1regname_1->getRegister()->initialise();
        m_regsec1regname_2->getRegister()->initialise();
        m_regsec1regname_3->getRegister()->initialise();
        m_regsec1regname_4->getRegister()->initialise();
        m_regsec1regname_5->getRegister()->initialise();
        m_regsec1regname_6->getRegister()->initialise();
        m_regsec1regname_7->getRegister()->initialise();
        m_regsec1regname_8->getRegister()->initialise();
        m_regsec1regname_9->getRegister()->initialise();
        m_regsec1regname_10->getRegister()->initialise();
        m_regsec1regname_11->getRegister()->initialise();
        m_regsec1regname_12->getRegister()->initialise();
        m_regsec1regname_13->getRegister()->initialise();
        m_regsec1regname_14->getRegister()->initialise();
        m_regsec1regname_15->getRegister()->initialise();
        m_regsec1regname_16->getRegister()->initialise();
        m_regsec1regname_17->getRegister()->initialise();
        m_regsec1regname_18->getRegister()->initialise();
        m_regsec1regname_19->getRegister()->initialise();
        m_regsec1regname_20->getRegister()->initialise();
        m_regsec1regname_21->getRegister()->initialise();
        m_regsec1regname_22->getRegister()->initialise();
        m_regsec1regname_23->getRegister()->initialise();
        m_regsec1regname_24->getRegister()->initialise();
        m_regsec1regname_25->getRegister()->initialise();
        m_regsec1regname_26->getRegister()->initialise();
        m_regsec1regname_27->getRegister()->initialise();
        m_regsec1regname_28->getRegister()->initialise();
        m_regsec1regname_29->getRegister()->initialise();
        m_regsec1regname_30->getRegister()->initialise();
        m_regsec1regname_31->getRegister()->initialise();
        m_regsec1regname_32->getRegister()->initialise();
        m_regsec1regname_33->getRegister()->initialise();
        m_regsec1regname_34->getRegister()->initialise();
        m_regsec1regname_35->getRegister()->initialise();
        m_regsec1regname_36->getRegister()->initialise();
        m_regsec1regname_37->getRegister()->initialise();
        m_regsec1regname_38->getRegister()->initialise();
        m_regsec1regname_39->getRegister()->initialise();
        m_regsec1regname_40->getRegister()->initialise();
        m_regsec1regname_41->getRegister()->initialise();
        m_regsec1regname_42->getRegister()->initialise();
        m_regsec1regname_43->getRegister()->initialise();
        m_regsec1regname_44->getRegister()->initialise();
        m_regsec1regname_45->getRegister()->initialise();
        m_regsec1regname_46->getRegister()->initialise();
        m_regsec1regname_47->getRegister()->initialise();
        m_regsec1regname_48->getRegister()->initialise();
        m_regsec1regname_49->getRegister()->initialise();
        m_regsec1regname_50->getRegister()->initialise();
        m_regsec1regname_51->getRegister()->initialise();
        m_regsec1regname_52->getRegister()->initialise();
        m_regsec1regname_53->getRegister()->initialise();
        m_regsec1regname_54->getRegister()->initialise();
        m_regsec1regname_55->getRegister()->initialise();
        m_regsec1regname_56->getRegister()->initialise();
        m_regsec1regname_57->getRegister()->initialise();
        m_regsec1regname_58->getRegister()->initialise();
        m_regsec1regname_59->getRegister()->initialise();
        m_regsec1regname_60->getRegister()->initialise();
        m_regsec1regname_61->getRegister()->initialise();
        m_regsec1regname_62->getRegister()->initialise();
        m_regsec1regname_63->getRegister()->initialise();
        m_regregname223->getRegister()->initialise();
        m_regregname2->getRegister()->initialise();
        m_regregname22222->getRegister()->initialise();
        m_regregname22->getRegister()->initialise();
        m_regshadowregname_0->getRegister()->initialise();
        return;
    }
    
    /**
    * Returns a pointer to the sec1regname_0 object representing regname_0
    * @return Pointer to the  sec1regname_0 object representing regname_0 (regname_0 *).
    */
    regname * test1::getsec1regname_0()
    {
        return  m_regsec1regname_0;
    }
    
    /**
    * Returns a pointer to the sec1regname_1 object representing regname_1
    * @return Pointer to the  sec1regname_1 object representing regname_1 (regname_1 *).
    */
    regname * test1::getsec1regname_1()
    {
        return  m_regsec1regname_1;
    }
    
    /**
    * Returns a pointer to the sec1regname_2 object representing regname_2
    * @return Pointer to the  sec1regname_2 object representing regname_2 (regname_2 *).
    */
    regname * test1::getsec1regname_2()
    {
        return  m_regsec1regname_2;
    }
    
    /**
    * Returns a pointer to the sec1regname_3 object representing regname_3
    * @return Pointer to the  sec1regname_3 object representing regname_3 (regname_3 *).
    */
    regname * test1::getsec1regname_3()
    {
        return  m_regsec1regname_3;
    }
    
    /**
    * Returns a pointer to the sec1regname_4 object representing regname_4
    * @return Pointer to the  sec1regname_4 object representing regname_4 (regname_4 *).
    */
    regname * test1::getsec1regname_4()
    {
        return  m_regsec1regname_4;
    }
    
    /**
    * Returns a pointer to the sec1regname_5 object representing regname_5
    * @return Pointer to the  sec1regname_5 object representing regname_5 (regname_5 *).
    */
    regname * test1::getsec1regname_5()
    {
        return  m_regsec1regname_5;
    }
    
    /**
    * Returns a pointer to the sec1regname_6 object representing regname_6
    * @return Pointer to the  sec1regname_6 object representing regname_6 (regname_6 *).
    */
    regname * test1::getsec1regname_6()
    {
        return  m_regsec1regname_6;
    }
    
    /**
    * Returns a pointer to the sec1regname_7 object representing regname_7
    * @return Pointer to the  sec1regname_7 object representing regname_7 (regname_7 *).
    */
    regname * test1::getsec1regname_7()
    {
        return  m_regsec1regname_7;
    }
    
    /**
    * Returns a pointer to the sec1regname_8 object representing regname_8
    * @return Pointer to the  sec1regname_8 object representing regname_8 (regname_8 *).
    */
    regname * test1::getsec1regname_8()
    {
        return  m_regsec1regname_8;
    }
    
    /**
    * Returns a pointer to the sec1regname_9 object representing regname_9
    * @return Pointer to the  sec1regname_9 object representing regname_9 (regname_9 *).
    */
    regname * test1::getsec1regname_9()
    {
        return  m_regsec1regname_9;
    }
    
    /**
    * Returns a pointer to the sec1regname_10 object representing regname_10
    * @return Pointer to the  sec1regname_10 object representing regname_10 (regname_10 *).
    */
    regname * test1::getsec1regname_10()
    {
        return  m_regsec1regname_10;
    }
    
    /**
    * Returns a pointer to the sec1regname_11 object representing regname_11
    * @return Pointer to the  sec1regname_11 object representing regname_11 (regname_11 *).
    */
    regname * test1::getsec1regname_11()
    {
        return  m_regsec1regname_11;
    }
    
    /**
    * Returns a pointer to the sec1regname_12 object representing regname_12
    * @return Pointer to the  sec1regname_12 object representing regname_12 (regname_12 *).
    */
    regname * test1::getsec1regname_12()
    {
        return  m_regsec1regname_12;
    }
    
    /**
    * Returns a pointer to the sec1regname_13 object representing regname_13
    * @return Pointer to the  sec1regname_13 object representing regname_13 (regname_13 *).
    */
    regname * test1::getsec1regname_13()
    {
        return  m_regsec1regname_13;
    }
    
    /**
    * Returns a pointer to the sec1regname_14 object representing regname_14
    * @return Pointer to the  sec1regname_14 object representing regname_14 (regname_14 *).
    */
    regname * test1::getsec1regname_14()
    {
        return  m_regsec1regname_14;
    }
    
    /**
    * Returns a pointer to the sec1regname_15 object representing regname_15
    * @return Pointer to the  sec1regname_15 object representing regname_15 (regname_15 *).
    */
    regname * test1::getsec1regname_15()
    {
        return  m_regsec1regname_15;
    }
    
    /**
    * Returns a pointer to the sec1regname_16 object representing regname_16
    * @return Pointer to the  sec1regname_16 object representing regname_16 (regname_16 *).
    */
    regname * test1::getsec1regname_16()
    {
        return  m_regsec1regname_16;
    }
    
    /**
    * Returns a pointer to the sec1regname_17 object representing regname_17
    * @return Pointer to the  sec1regname_17 object representing regname_17 (regname_17 *).
    */
    regname * test1::getsec1regname_17()
    {
        return  m_regsec1regname_17;
    }
    
    /**
    * Returns a pointer to the sec1regname_18 object representing regname_18
    * @return Pointer to the  sec1regname_18 object representing regname_18 (regname_18 *).
    */
    regname * test1::getsec1regname_18()
    {
        return  m_regsec1regname_18;
    }
    
    /**
    * Returns a pointer to the sec1regname_19 object representing regname_19
    * @return Pointer to the  sec1regname_19 object representing regname_19 (regname_19 *).
    */
    regname * test1::getsec1regname_19()
    {
        return  m_regsec1regname_19;
    }
    
    /**
    * Returns a pointer to the sec1regname_20 object representing regname_20
    * @return Pointer to the  sec1regname_20 object representing regname_20 (regname_20 *).
    */
    regname * test1::getsec1regname_20()
    {
        return  m_regsec1regname_20;
    }
    
    /**
    * Returns a pointer to the sec1regname_21 object representing regname_21
    * @return Pointer to the  sec1regname_21 object representing regname_21 (regname_21 *).
    */
    regname * test1::getsec1regname_21()
    {
        return  m_regsec1regname_21;
    }
    
    /**
    * Returns a pointer to the sec1regname_22 object representing regname_22
    * @return Pointer to the  sec1regname_22 object representing regname_22 (regname_22 *).
    */
    regname * test1::getsec1regname_22()
    {
        return  m_regsec1regname_22;
    }
    
    /**
    * Returns a pointer to the sec1regname_23 object representing regname_23
    * @return Pointer to the  sec1regname_23 object representing regname_23 (regname_23 *).
    */
    regname * test1::getsec1regname_23()
    {
        return  m_regsec1regname_23;
    }
    
    /**
    * Returns a pointer to the sec1regname_24 object representing regname_24
    * @return Pointer to the  sec1regname_24 object representing regname_24 (regname_24 *).
    */
    regname * test1::getsec1regname_24()
    {
        return  m_regsec1regname_24;
    }
    
    /**
    * Returns a pointer to the sec1regname_25 object representing regname_25
    * @return Pointer to the  sec1regname_25 object representing regname_25 (regname_25 *).
    */
    regname * test1::getsec1regname_25()
    {
        return  m_regsec1regname_25;
    }
    
    /**
    * Returns a pointer to the sec1regname_26 object representing regname_26
    * @return Pointer to the  sec1regname_26 object representing regname_26 (regname_26 *).
    */
    regname * test1::getsec1regname_26()
    {
        return  m_regsec1regname_26;
    }
    
    /**
    * Returns a pointer to the sec1regname_27 object representing regname_27
    * @return Pointer to the  sec1regname_27 object representing regname_27 (regname_27 *).
    */
    regname * test1::getsec1regname_27()
    {
        return  m_regsec1regname_27;
    }
    
    /**
    * Returns a pointer to the sec1regname_28 object representing regname_28
    * @return Pointer to the  sec1regname_28 object representing regname_28 (regname_28 *).
    */
    regname * test1::getsec1regname_28()
    {
        return  m_regsec1regname_28;
    }
    
    /**
    * Returns a pointer to the sec1regname_29 object representing regname_29
    * @return Pointer to the  sec1regname_29 object representing regname_29 (regname_29 *).
    */
    regname * test1::getsec1regname_29()
    {
        return  m_regsec1regname_29;
    }
    
    /**
    * Returns a pointer to the sec1regname_30 object representing regname_30
    * @return Pointer to the  sec1regname_30 object representing regname_30 (regname_30 *).
    */
    regname * test1::getsec1regname_30()
    {
        return  m_regsec1regname_30;
    }
    
    /**
    * Returns a pointer to the sec1regname_31 object representing regname_31
    * @return Pointer to the  sec1regname_31 object representing regname_31 (regname_31 *).
    */
    regname * test1::getsec1regname_31()
    {
        return  m_regsec1regname_31;
    }
    
    /**
    * Returns a pointer to the sec1regname_32 object representing regname_32
    * @return Pointer to the  sec1regname_32 object representing regname_32 (regname_32 *).
    */
    regname * test1::getsec1regname_32()
    {
        return  m_regsec1regname_32;
    }
    
    /**
    * Returns a pointer to the sec1regname_33 object representing regname_33
    * @return Pointer to the  sec1regname_33 object representing regname_33 (regname_33 *).
    */
    regname * test1::getsec1regname_33()
    {
        return  m_regsec1regname_33;
    }
    
    /**
    * Returns a pointer to the sec1regname_34 object representing regname_34
    * @return Pointer to the  sec1regname_34 object representing regname_34 (regname_34 *).
    */
    regname * test1::getsec1regname_34()
    {
        return  m_regsec1regname_34;
    }
    
    /**
    * Returns a pointer to the sec1regname_35 object representing regname_35
    * @return Pointer to the  sec1regname_35 object representing regname_35 (regname_35 *).
    */
    regname * test1::getsec1regname_35()
    {
        return  m_regsec1regname_35;
    }
    
    /**
    * Returns a pointer to the sec1regname_36 object representing regname_36
    * @return Pointer to the  sec1regname_36 object representing regname_36 (regname_36 *).
    */
    regname * test1::getsec1regname_36()
    {
        return  m_regsec1regname_36;
    }
    
    /**
    * Returns a pointer to the sec1regname_37 object representing regname_37
    * @return Pointer to the  sec1regname_37 object representing regname_37 (regname_37 *).
    */
    regname * test1::getsec1regname_37()
    {
        return  m_regsec1regname_37;
    }
    
    /**
    * Returns a pointer to the sec1regname_38 object representing regname_38
    * @return Pointer to the  sec1regname_38 object representing regname_38 (regname_38 *).
    */
    regname * test1::getsec1regname_38()
    {
        return  m_regsec1regname_38;
    }
    
    /**
    * Returns a pointer to the sec1regname_39 object representing regname_39
    * @return Pointer to the  sec1regname_39 object representing regname_39 (regname_39 *).
    */
    regname * test1::getsec1regname_39()
    {
        return  m_regsec1regname_39;
    }
    
    /**
    * Returns a pointer to the sec1regname_40 object representing regname_40
    * @return Pointer to the  sec1regname_40 object representing regname_40 (regname_40 *).
    */
    regname * test1::getsec1regname_40()
    {
        return  m_regsec1regname_40;
    }
    
    /**
    * Returns a pointer to the sec1regname_41 object representing regname_41
    * @return Pointer to the  sec1regname_41 object representing regname_41 (regname_41 *).
    */
    regname * test1::getsec1regname_41()
    {
        return  m_regsec1regname_41;
    }
    
    /**
    * Returns a pointer to the sec1regname_42 object representing regname_42
    * @return Pointer to the  sec1regname_42 object representing regname_42 (regname_42 *).
    */
    regname * test1::getsec1regname_42()
    {
        return  m_regsec1regname_42;
    }
    
    /**
    * Returns a pointer to the sec1regname_43 object representing regname_43
    * @return Pointer to the  sec1regname_43 object representing regname_43 (regname_43 *).
    */
    regname * test1::getsec1regname_43()
    {
        return  m_regsec1regname_43;
    }
    
    /**
    * Returns a pointer to the sec1regname_44 object representing regname_44
    * @return Pointer to the  sec1regname_44 object representing regname_44 (regname_44 *).
    */
    regname * test1::getsec1regname_44()
    {
        return  m_regsec1regname_44;
    }
    
    /**
    * Returns a pointer to the sec1regname_45 object representing regname_45
    * @return Pointer to the  sec1regname_45 object representing regname_45 (regname_45 *).
    */
    regname * test1::getsec1regname_45()
    {
        return  m_regsec1regname_45;
    }
    
    /**
    * Returns a pointer to the sec1regname_46 object representing regname_46
    * @return Pointer to the  sec1regname_46 object representing regname_46 (regname_46 *).
    */
    regname * test1::getsec1regname_46()
    {
        return  m_regsec1regname_46;
    }
    
    /**
    * Returns a pointer to the sec1regname_47 object representing regname_47
    * @return Pointer to the  sec1regname_47 object representing regname_47 (regname_47 *).
    */
    regname * test1::getsec1regname_47()
    {
        return  m_regsec1regname_47;
    }
    
    /**
    * Returns a pointer to the sec1regname_48 object representing regname_48
    * @return Pointer to the  sec1regname_48 object representing regname_48 (regname_48 *).
    */
    regname * test1::getsec1regname_48()
    {
        return  m_regsec1regname_48;
    }
    
    /**
    * Returns a pointer to the sec1regname_49 object representing regname_49
    * @return Pointer to the  sec1regname_49 object representing regname_49 (regname_49 *).
    */
    regname * test1::getsec1regname_49()
    {
        return  m_regsec1regname_49;
    }
    
    /**
    * Returns a pointer to the sec1regname_50 object representing regname_50
    * @return Pointer to the  sec1regname_50 object representing regname_50 (regname_50 *).
    */
    regname * test1::getsec1regname_50()
    {
        return  m_regsec1regname_50;
    }
    
    /**
    * Returns a pointer to the sec1regname_51 object representing regname_51
    * @return Pointer to the  sec1regname_51 object representing regname_51 (regname_51 *).
    */
    regname * test1::getsec1regname_51()
    {
        return  m_regsec1regname_51;
    }
    
    /**
    * Returns a pointer to the sec1regname_52 object representing regname_52
    * @return Pointer to the  sec1regname_52 object representing regname_52 (regname_52 *).
    */
    regname * test1::getsec1regname_52()
    {
        return  m_regsec1regname_52;
    }
    
    /**
    * Returns a pointer to the sec1regname_53 object representing regname_53
    * @return Pointer to the  sec1regname_53 object representing regname_53 (regname_53 *).
    */
    regname * test1::getsec1regname_53()
    {
        return  m_regsec1regname_53;
    }
    
    /**
    * Returns a pointer to the sec1regname_54 object representing regname_54
    * @return Pointer to the  sec1regname_54 object representing regname_54 (regname_54 *).
    */
    regname * test1::getsec1regname_54()
    {
        return  m_regsec1regname_54;
    }
    
    /**
    * Returns a pointer to the sec1regname_55 object representing regname_55
    * @return Pointer to the  sec1regname_55 object representing regname_55 (regname_55 *).
    */
    regname * test1::getsec1regname_55()
    {
        return  m_regsec1regname_55;
    }
    
    /**
    * Returns a pointer to the sec1regname_56 object representing regname_56
    * @return Pointer to the  sec1regname_56 object representing regname_56 (regname_56 *).
    */
    regname * test1::getsec1regname_56()
    {
        return  m_regsec1regname_56;
    }
    
    /**
    * Returns a pointer to the sec1regname_57 object representing regname_57
    * @return Pointer to the  sec1regname_57 object representing regname_57 (regname_57 *).
    */
    regname * test1::getsec1regname_57()
    {
        return  m_regsec1regname_57;
    }
    
    /**
    * Returns a pointer to the sec1regname_58 object representing regname_58
    * @return Pointer to the  sec1regname_58 object representing regname_58 (regname_58 *).
    */
    regname * test1::getsec1regname_58()
    {
        return  m_regsec1regname_58;
    }
    
    /**
    * Returns a pointer to the sec1regname_59 object representing regname_59
    * @return Pointer to the  sec1regname_59 object representing regname_59 (regname_59 *).
    */
    regname * test1::getsec1regname_59()
    {
        return  m_regsec1regname_59;
    }
    
    /**
    * Returns a pointer to the sec1regname_60 object representing regname_60
    * @return Pointer to the  sec1regname_60 object representing regname_60 (regname_60 *).
    */
    regname * test1::getsec1regname_60()
    {
        return  m_regsec1regname_60;
    }
    
    /**
    * Returns a pointer to the sec1regname_61 object representing regname_61
    * @return Pointer to the  sec1regname_61 object representing regname_61 (regname_61 *).
    */
    regname * test1::getsec1regname_61()
    {
        return  m_regsec1regname_61;
    }
    
    /**
    * Returns a pointer to the sec1regname_62 object representing regname_62
    * @return Pointer to the  sec1regname_62 object representing regname_62 (regname_62 *).
    */
    regname * test1::getsec1regname_62()
    {
        return  m_regsec1regname_62;
    }
    
    /**
    * Returns a pointer to the sec1regname_63 object representing regname_63
    * @return Pointer to the  sec1regname_63 object representing regname_63 (regname_63 *).
    */
    regname * test1::getsec1regname_63()
    {
        return  m_regsec1regname_63;
    }
    
    /**
    * Returns a pointer to the regname223 object representing regname223
    * @return Pointer to the  regname223 object representing regname223 (regname223 *).
    */
    regname223 * test1::getregname223()
    {
        return  m_regregname223;
    }
    
    /**
    * Returns a pointer to the regname2 object representing regname2
    * @return Pointer to the  regname2 object representing regname2 (regname2 *).
    */
    regname2 * test1::getregname2()
    {
        return  m_regregname2;
    }
    
    /**
    * Returns a pointer to the regname22222 object representing regname22222
    * @return Pointer to the  regname22222 object representing regname22222 (regname22222 *).
    */
    regname22222 * test1::getregname22222()
    {
        return  m_regregname22222;
    }
    
    /**
    * Returns a pointer to the regname22 object representing regname22
    * @return Pointer to the  regname22 object representing regname22 (regname22 *).
    */
    regname22 * test1::getregname22()
    {
        return  m_regregname22;
    }
    
    /**
    * Returns a pointer to the shadowregname_0 object representing regname_0
    * @return Pointer to the  shadowregname_0 object representing regname_0 (regname_0 *).
    */
    regname * test1::getshadowregname_0()
    {
        return  m_regshadowregname_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_0 at address 0x0
    * @return Pointer to LocatedRegister object representing sec1regname_0 at address 0x0
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_0()
    {
        return  m_loctest1_intfsec1regname_0;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_1 at address 0x4
    * @return Pointer to LocatedRegister object representing sec1regname_1 at address 0x4
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_1()
    {
        return  m_loctest1_intfsec1regname_1;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_2 at address 0x8
    * @return Pointer to LocatedRegister object representing sec1regname_2 at address 0x8
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_2()
    {
        return  m_loctest1_intfsec1regname_2;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_3 at address 0xc
    * @return Pointer to LocatedRegister object representing sec1regname_3 at address 0xc
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_3()
    {
        return  m_loctest1_intfsec1regname_3;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_4 at address 0x10
    * @return Pointer to LocatedRegister object representing sec1regname_4 at address 0x10
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_4()
    {
        return  m_loctest1_intfsec1regname_4;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_5 at address 0x14
    * @return Pointer to LocatedRegister object representing sec1regname_5 at address 0x14
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_5()
    {
        return  m_loctest1_intfsec1regname_5;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_6 at address 0x18
    * @return Pointer to LocatedRegister object representing sec1regname_6 at address 0x18
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_6()
    {
        return  m_loctest1_intfsec1regname_6;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_7 at address 0x1c
    * @return Pointer to LocatedRegister object representing sec1regname_7 at address 0x1c
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_7()
    {
        return  m_loctest1_intfsec1regname_7;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_8 at address 0x20
    * @return Pointer to LocatedRegister object representing sec1regname_8 at address 0x20
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_8()
    {
        return  m_loctest1_intfsec1regname_8;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_9 at address 0x24
    * @return Pointer to LocatedRegister object representing sec1regname_9 at address 0x24
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_9()
    {
        return  m_loctest1_intfsec1regname_9;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_10 at address 0x28
    * @return Pointer to LocatedRegister object representing sec1regname_10 at address 0x28
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_10()
    {
        return  m_loctest1_intfsec1regname_10;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_11 at address 0x2c
    * @return Pointer to LocatedRegister object representing sec1regname_11 at address 0x2c
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_11()
    {
        return  m_loctest1_intfsec1regname_11;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_12 at address 0x30
    * @return Pointer to LocatedRegister object representing sec1regname_12 at address 0x30
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_12()
    {
        return  m_loctest1_intfsec1regname_12;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_13 at address 0x34
    * @return Pointer to LocatedRegister object representing sec1regname_13 at address 0x34
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_13()
    {
        return  m_loctest1_intfsec1regname_13;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_14 at address 0x38
    * @return Pointer to LocatedRegister object representing sec1regname_14 at address 0x38
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_14()
    {
        return  m_loctest1_intfsec1regname_14;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_15 at address 0x3c
    * @return Pointer to LocatedRegister object representing sec1regname_15 at address 0x3c
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_15()
    {
        return  m_loctest1_intfsec1regname_15;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_16 at address 0x40
    * @return Pointer to LocatedRegister object representing sec1regname_16 at address 0x40
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_16()
    {
        return  m_loctest1_intfsec1regname_16;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_17 at address 0x44
    * @return Pointer to LocatedRegister object representing sec1regname_17 at address 0x44
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_17()
    {
        return  m_loctest1_intfsec1regname_17;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_18 at address 0x48
    * @return Pointer to LocatedRegister object representing sec1regname_18 at address 0x48
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_18()
    {
        return  m_loctest1_intfsec1regname_18;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_19 at address 0x4c
    * @return Pointer to LocatedRegister object representing sec1regname_19 at address 0x4c
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_19()
    {
        return  m_loctest1_intfsec1regname_19;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_20 at address 0x50
    * @return Pointer to LocatedRegister object representing sec1regname_20 at address 0x50
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_20()
    {
        return  m_loctest1_intfsec1regname_20;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_21 at address 0x54
    * @return Pointer to LocatedRegister object representing sec1regname_21 at address 0x54
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_21()
    {
        return  m_loctest1_intfsec1regname_21;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_22 at address 0x58
    * @return Pointer to LocatedRegister object representing sec1regname_22 at address 0x58
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_22()
    {
        return  m_loctest1_intfsec1regname_22;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_23 at address 0x5c
    * @return Pointer to LocatedRegister object representing sec1regname_23 at address 0x5c
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_23()
    {
        return  m_loctest1_intfsec1regname_23;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_24 at address 0x60
    * @return Pointer to LocatedRegister object representing sec1regname_24 at address 0x60
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_24()
    {
        return  m_loctest1_intfsec1regname_24;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_25 at address 0x64
    * @return Pointer to LocatedRegister object representing sec1regname_25 at address 0x64
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_25()
    {
        return  m_loctest1_intfsec1regname_25;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_26 at address 0x68
    * @return Pointer to LocatedRegister object representing sec1regname_26 at address 0x68
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_26()
    {
        return  m_loctest1_intfsec1regname_26;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_27 at address 0x6c
    * @return Pointer to LocatedRegister object representing sec1regname_27 at address 0x6c
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_27()
    {
        return  m_loctest1_intfsec1regname_27;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_28 at address 0x70
    * @return Pointer to LocatedRegister object representing sec1regname_28 at address 0x70
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_28()
    {
        return  m_loctest1_intfsec1regname_28;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_29 at address 0x74
    * @return Pointer to LocatedRegister object representing sec1regname_29 at address 0x74
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_29()
    {
        return  m_loctest1_intfsec1regname_29;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_30 at address 0x78
    * @return Pointer to LocatedRegister object representing sec1regname_30 at address 0x78
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_30()
    {
        return  m_loctest1_intfsec1regname_30;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_31 at address 0x7c
    * @return Pointer to LocatedRegister object representing sec1regname_31 at address 0x7c
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_31()
    {
        return  m_loctest1_intfsec1regname_31;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_32 at address 0x80
    * @return Pointer to LocatedRegister object representing sec1regname_32 at address 0x80
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_32()
    {
        return  m_loctest1_intfsec1regname_32;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_33 at address 0x84
    * @return Pointer to LocatedRegister object representing sec1regname_33 at address 0x84
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_33()
    {
        return  m_loctest1_intfsec1regname_33;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_34 at address 0x88
    * @return Pointer to LocatedRegister object representing sec1regname_34 at address 0x88
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_34()
    {
        return  m_loctest1_intfsec1regname_34;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_35 at address 0x8c
    * @return Pointer to LocatedRegister object representing sec1regname_35 at address 0x8c
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_35()
    {
        return  m_loctest1_intfsec1regname_35;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_36 at address 0x90
    * @return Pointer to LocatedRegister object representing sec1regname_36 at address 0x90
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_36()
    {
        return  m_loctest1_intfsec1regname_36;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_37 at address 0x94
    * @return Pointer to LocatedRegister object representing sec1regname_37 at address 0x94
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_37()
    {
        return  m_loctest1_intfsec1regname_37;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_38 at address 0x98
    * @return Pointer to LocatedRegister object representing sec1regname_38 at address 0x98
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_38()
    {
        return  m_loctest1_intfsec1regname_38;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_39 at address 0x9c
    * @return Pointer to LocatedRegister object representing sec1regname_39 at address 0x9c
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_39()
    {
        return  m_loctest1_intfsec1regname_39;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_40 at address 0xa0
    * @return Pointer to LocatedRegister object representing sec1regname_40 at address 0xa0
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_40()
    {
        return  m_loctest1_intfsec1regname_40;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_41 at address 0xa4
    * @return Pointer to LocatedRegister object representing sec1regname_41 at address 0xa4
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_41()
    {
        return  m_loctest1_intfsec1regname_41;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_42 at address 0xa8
    * @return Pointer to LocatedRegister object representing sec1regname_42 at address 0xa8
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_42()
    {
        return  m_loctest1_intfsec1regname_42;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_43 at address 0xac
    * @return Pointer to LocatedRegister object representing sec1regname_43 at address 0xac
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_43()
    {
        return  m_loctest1_intfsec1regname_43;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_44 at address 0xb0
    * @return Pointer to LocatedRegister object representing sec1regname_44 at address 0xb0
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_44()
    {
        return  m_loctest1_intfsec1regname_44;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_45 at address 0xb4
    * @return Pointer to LocatedRegister object representing sec1regname_45 at address 0xb4
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_45()
    {
        return  m_loctest1_intfsec1regname_45;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_46 at address 0xb8
    * @return Pointer to LocatedRegister object representing sec1regname_46 at address 0xb8
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_46()
    {
        return  m_loctest1_intfsec1regname_46;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_47 at address 0xbc
    * @return Pointer to LocatedRegister object representing sec1regname_47 at address 0xbc
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_47()
    {
        return  m_loctest1_intfsec1regname_47;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_48 at address 0xc0
    * @return Pointer to LocatedRegister object representing sec1regname_48 at address 0xc0
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_48()
    {
        return  m_loctest1_intfsec1regname_48;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_49 at address 0xc4
    * @return Pointer to LocatedRegister object representing sec1regname_49 at address 0xc4
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_49()
    {
        return  m_loctest1_intfsec1regname_49;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_50 at address 0xc8
    * @return Pointer to LocatedRegister object representing sec1regname_50 at address 0xc8
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_50()
    {
        return  m_loctest1_intfsec1regname_50;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_51 at address 0xcc
    * @return Pointer to LocatedRegister object representing sec1regname_51 at address 0xcc
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_51()
    {
        return  m_loctest1_intfsec1regname_51;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_52 at address 0xd0
    * @return Pointer to LocatedRegister object representing sec1regname_52 at address 0xd0
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_52()
    {
        return  m_loctest1_intfsec1regname_52;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_53 at address 0xd4
    * @return Pointer to LocatedRegister object representing sec1regname_53 at address 0xd4
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_53()
    {
        return  m_loctest1_intfsec1regname_53;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_54 at address 0xd8
    * @return Pointer to LocatedRegister object representing sec1regname_54 at address 0xd8
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_54()
    {
        return  m_loctest1_intfsec1regname_54;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_55 at address 0xdc
    * @return Pointer to LocatedRegister object representing sec1regname_55 at address 0xdc
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_55()
    {
        return  m_loctest1_intfsec1regname_55;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_56 at address 0xe0
    * @return Pointer to LocatedRegister object representing sec1regname_56 at address 0xe0
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_56()
    {
        return  m_loctest1_intfsec1regname_56;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_57 at address 0xe4
    * @return Pointer to LocatedRegister object representing sec1regname_57 at address 0xe4
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_57()
    {
        return  m_loctest1_intfsec1regname_57;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_58 at address 0xe8
    * @return Pointer to LocatedRegister object representing sec1regname_58 at address 0xe8
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_58()
    {
        return  m_loctest1_intfsec1regname_58;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_59 at address 0xec
    * @return Pointer to LocatedRegister object representing sec1regname_59 at address 0xec
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_59()
    {
        return  m_loctest1_intfsec1regname_59;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_60 at address 0xf0
    * @return Pointer to LocatedRegister object representing sec1regname_60 at address 0xf0
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_60()
    {
        return  m_loctest1_intfsec1regname_60;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_61 at address 0xf4
    * @return Pointer to LocatedRegister object representing sec1regname_61 at address 0xf4
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_61()
    {
        return  m_loctest1_intfsec1regname_61;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_62 at address 0xf8
    * @return Pointer to LocatedRegister object representing sec1regname_62 at address 0xf8
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_62()
    {
        return  m_loctest1_intfsec1regname_62;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing sec1regname_63 at address 0xfc
    * @return Pointer to LocatedRegister object representing sec1regname_63 at address 0xfc
    *         (LocatedRegister *).
    */
    LocatedRegister<U32T> * test1::gettest1_intfsec1regname_63()
    {
        return  m_loctest1_intfsec1regname_63;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing regname223 at address 0x100
    * @return Pointer to LocatedRegister object representing regname223 at address 0x100
    *         (LocatedRegister *).
    */
    LocatedRegister<U8T> * test1::gettest1_intfregname223()
    {
        return  m_loctest1_intfregname223;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing regname2 at address 0x101
    * @return Pointer to LocatedRegister object representing regname2 at address 0x101
    *         (LocatedRegister *).
    */
    LocatedRegister<U8T> * test1::gettest1_intfregname2()
    {
        return  m_loctest1_intfregname2;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing regname22222 at address 0x102
    * @return Pointer to LocatedRegister object representing regname22222 at address 0x102
    *         (LocatedRegister *).
    */
    LocatedRegister<U8T> * test1::gettest1_intfregname22222()
    {
        return  m_loctest1_intfregname22222;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing regname22 at address 0x103
    * @return Pointer to LocatedRegister object representing regname22 at address 0x103
    *         (LocatedRegister *).
    */
    LocatedRegister<U8T> * test1::gettest1_intfregname22()
    {
        return  m_loctest1_intfregname22;
    }
    
    /**
    * Returns pointer to LocatedRegister object representing shadowregname_0 at address 0x104
    * @return Pointer to LocatedRegister object representing shadowregname_0 at address 0x104
    *         (LocatedRegister *).
    */
    LocatedRegister<U16T> * test1::gettest1_intfshadowregname_0()
    {
        return  m_loctest1_intfshadowregname_0;
    }
    
    /**
    * Write access function for sec1regname_0 at address 0x0
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_0(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_0->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_1 at address 0x4
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_1(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_1->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_2 at address 0x8
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_2(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_2->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_3 at address 0xc
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_3(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_3->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_4 at address 0x10
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_4(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_4->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_5 at address 0x14
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_5(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_5->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_6 at address 0x18
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_6(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_6->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_7 at address 0x1c
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_7(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_7->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_8 at address 0x20
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_8(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_8->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_9 at address 0x24
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_9(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_9->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_10 at address 0x28
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_10(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_10->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_11 at address 0x2c
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_11(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_11->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_12 at address 0x30
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_12(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_12->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_13 at address 0x34
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_13(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_13->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_14 at address 0x38
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_14(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_14->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_15 at address 0x3c
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_15(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_15->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_16 at address 0x40
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_16(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_16->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_17 at address 0x44
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_17(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_17->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_18 at address 0x48
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_18(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_18->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_19 at address 0x4c
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_19(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_19->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_20 at address 0x50
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_20(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_20->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_21 at address 0x54
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_21(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_21->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_22 at address 0x58
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_22(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_22->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_23 at address 0x5c
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_23(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_23->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_24 at address 0x60
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_24(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_24->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_25 at address 0x64
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_25(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_25->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_26 at address 0x68
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_26(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_26->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_27 at address 0x6c
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_27(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_27->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_28 at address 0x70
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_28(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_28->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_29 at address 0x74
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_29(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_29->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_30 at address 0x78
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_30(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_30->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_31 at address 0x7c
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_31(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_31->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_32 at address 0x80
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_32(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_32->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_33 at address 0x84
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_33(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_33->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_34 at address 0x88
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_34(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_34->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_35 at address 0x8c
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_35(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_35->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_36 at address 0x90
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_36(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_36->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_37 at address 0x94
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_37(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_37->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_38 at address 0x98
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_38(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_38->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_39 at address 0x9c
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_39(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_39->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_40 at address 0xa0
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_40(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_40->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_41 at address 0xa4
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_41(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_41->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_42 at address 0xa8
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_42(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_42->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_43 at address 0xac
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_43(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_43->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_44 at address 0xb0
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_44(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_44->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_45 at address 0xb4
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_45(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_45->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_46 at address 0xb8
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_46(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_46->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_47 at address 0xbc
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_47(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_47->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_48 at address 0xc0
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_48(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_48->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_49 at address 0xc4
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_49(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_49->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_50 at address 0xc8
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_50(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_50->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_51 at address 0xcc
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_51(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_51->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_52 at address 0xd0
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_52(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_52->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_53 at address 0xd4
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_53(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_53->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_54 at address 0xd8
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_54(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_54->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_55 at address 0xdc
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_55(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_55->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_56 at address 0xe0
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_56(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_56->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_57 at address 0xe4
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_57(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_57->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_58 at address 0xe8
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_58(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_58->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_59 at address 0xec
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_59(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_59->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_60 at address 0xf0
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_60(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_60->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_61 at address 0xf4
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_61(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_61->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_62 at address 0xf8
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_62(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_62->write(data, dataMask);
    }
    
    /**
    * Write access function for sec1regname_63 at address 0xfc
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intfsec1regname_63(U32T data, U32T dataMask)
    {
        m_loctest1_intfsec1regname_63->write(data, dataMask);
    }
    
    /**
    * Write access function for regname223 at address 0x100
    * @param Register data value (U8T).
    * @param Register data mask (U8T).
    */
    void test1::writetest1_intfregname223(U8T data, U8T dataMask)
    {
        m_loctest1_intfregname223->write(data, dataMask);
    }
    
    /**
    * Write access function for regname2 at address 0x101
    * @param Register data value (U8T).
    * @param Register data mask (U8T).
    */
    void test1::writetest1_intfregname2(U8T data, U8T dataMask)
    {
        m_loctest1_intfregname2->write(data, dataMask);
    }
    
    /**
    * Write access function for regname22222 at address 0x102
    * @param Register data value (U8T).
    * @param Register data mask (U8T).
    */
    void test1::writetest1_intfregname22222(U8T data, U8T dataMask)
    {
        m_loctest1_intfregname22222->write(data, dataMask);
    }
    
    /**
    * Write access function for regname22 at address 0x103
    * @param Register data value (U8T).
    * @param Register data mask (U8T).
    */
    void test1::writetest1_intfregname22(U8T data, U8T dataMask)
    {
        m_loctest1_intfregname22->write(data, dataMask);
    }
    
    /**
    * Write access function for shadowregname_0 at address 0x104
    * @param Register data value (U16T).
    * @param Register data mask (U16T).
    */
    void test1::writetest1_intfshadowregname_0(U16T data, U16T dataMask)
    {
        m_loctest1_intfshadowregname_0->write(data, dataMask);
    }
    
    /**
    * Write access function for test1 component test1_intf transaction target.
    * @param Register address value (U32T).
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::writetest1_intf(U32T address, U32T data, U32T dataMask)
    {
        
        switch (address)
        {
            // test1_intfsec1regname_0
            case TEST1_INTF_SEC1REGNAME_0_ADDRESS:
            writetest1_intfsec1regname_0((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_1
            case TEST1_INTF_SEC1REGNAME_1_ADDRESS:
            writetest1_intfsec1regname_1((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_2
            case TEST1_INTF_SEC1REGNAME_2_ADDRESS:
            writetest1_intfsec1regname_2((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_3
            case TEST1_INTF_SEC1REGNAME_3_ADDRESS:
            writetest1_intfsec1regname_3((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_4
            case TEST1_INTF_SEC1REGNAME_4_ADDRESS:
            writetest1_intfsec1regname_4((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_5
            case TEST1_INTF_SEC1REGNAME_5_ADDRESS:
            writetest1_intfsec1regname_5((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_6
            case TEST1_INTF_SEC1REGNAME_6_ADDRESS:
            writetest1_intfsec1regname_6((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_7
            case TEST1_INTF_SEC1REGNAME_7_ADDRESS:
            writetest1_intfsec1regname_7((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_8
            case TEST1_INTF_SEC1REGNAME_8_ADDRESS:
            writetest1_intfsec1regname_8((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_9
            case TEST1_INTF_SEC1REGNAME_9_ADDRESS:
            writetest1_intfsec1regname_9((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_10
            case TEST1_INTF_SEC1REGNAME_10_ADDRESS:
            writetest1_intfsec1regname_10((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_11
            case TEST1_INTF_SEC1REGNAME_11_ADDRESS:
            writetest1_intfsec1regname_11((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_12
            case TEST1_INTF_SEC1REGNAME_12_ADDRESS:
            writetest1_intfsec1regname_12((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_13
            case TEST1_INTF_SEC1REGNAME_13_ADDRESS:
            writetest1_intfsec1regname_13((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_14
            case TEST1_INTF_SEC1REGNAME_14_ADDRESS:
            writetest1_intfsec1regname_14((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_15
            case TEST1_INTF_SEC1REGNAME_15_ADDRESS:
            writetest1_intfsec1regname_15((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_16
            case TEST1_INTF_SEC1REGNAME_16_ADDRESS:
            writetest1_intfsec1regname_16((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_17
            case TEST1_INTF_SEC1REGNAME_17_ADDRESS:
            writetest1_intfsec1regname_17((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_18
            case TEST1_INTF_SEC1REGNAME_18_ADDRESS:
            writetest1_intfsec1regname_18((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_19
            case TEST1_INTF_SEC1REGNAME_19_ADDRESS:
            writetest1_intfsec1regname_19((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_20
            case TEST1_INTF_SEC1REGNAME_20_ADDRESS:
            writetest1_intfsec1regname_20((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_21
            case TEST1_INTF_SEC1REGNAME_21_ADDRESS:
            writetest1_intfsec1regname_21((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_22
            case TEST1_INTF_SEC1REGNAME_22_ADDRESS:
            writetest1_intfsec1regname_22((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_23
            case TEST1_INTF_SEC1REGNAME_23_ADDRESS:
            writetest1_intfsec1regname_23((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_24
            case TEST1_INTF_SEC1REGNAME_24_ADDRESS:
            writetest1_intfsec1regname_24((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_25
            case TEST1_INTF_SEC1REGNAME_25_ADDRESS:
            writetest1_intfsec1regname_25((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_26
            case TEST1_INTF_SEC1REGNAME_26_ADDRESS:
            writetest1_intfsec1regname_26((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_27
            case TEST1_INTF_SEC1REGNAME_27_ADDRESS:
            writetest1_intfsec1regname_27((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_28
            case TEST1_INTF_SEC1REGNAME_28_ADDRESS:
            writetest1_intfsec1regname_28((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_29
            case TEST1_INTF_SEC1REGNAME_29_ADDRESS:
            writetest1_intfsec1regname_29((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_30
            case TEST1_INTF_SEC1REGNAME_30_ADDRESS:
            writetest1_intfsec1regname_30((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_31
            case TEST1_INTF_SEC1REGNAME_31_ADDRESS:
            writetest1_intfsec1regname_31((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_32
            case TEST1_INTF_SEC1REGNAME_32_ADDRESS:
            writetest1_intfsec1regname_32((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_33
            case TEST1_INTF_SEC1REGNAME_33_ADDRESS:
            writetest1_intfsec1regname_33((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_34
            case TEST1_INTF_SEC1REGNAME_34_ADDRESS:
            writetest1_intfsec1regname_34((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_35
            case TEST1_INTF_SEC1REGNAME_35_ADDRESS:
            writetest1_intfsec1regname_35((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_36
            case TEST1_INTF_SEC1REGNAME_36_ADDRESS:
            writetest1_intfsec1regname_36((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_37
            case TEST1_INTF_SEC1REGNAME_37_ADDRESS:
            writetest1_intfsec1regname_37((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_38
            case TEST1_INTF_SEC1REGNAME_38_ADDRESS:
            writetest1_intfsec1regname_38((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_39
            case TEST1_INTF_SEC1REGNAME_39_ADDRESS:
            writetest1_intfsec1regname_39((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_40
            case TEST1_INTF_SEC1REGNAME_40_ADDRESS:
            writetest1_intfsec1regname_40((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_41
            case TEST1_INTF_SEC1REGNAME_41_ADDRESS:
            writetest1_intfsec1regname_41((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_42
            case TEST1_INTF_SEC1REGNAME_42_ADDRESS:
            writetest1_intfsec1regname_42((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_43
            case TEST1_INTF_SEC1REGNAME_43_ADDRESS:
            writetest1_intfsec1regname_43((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_44
            case TEST1_INTF_SEC1REGNAME_44_ADDRESS:
            writetest1_intfsec1regname_44((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_45
            case TEST1_INTF_SEC1REGNAME_45_ADDRESS:
            writetest1_intfsec1regname_45((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_46
            case TEST1_INTF_SEC1REGNAME_46_ADDRESS:
            writetest1_intfsec1regname_46((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_47
            case TEST1_INTF_SEC1REGNAME_47_ADDRESS:
            writetest1_intfsec1regname_47((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_48
            case TEST1_INTF_SEC1REGNAME_48_ADDRESS:
            writetest1_intfsec1regname_48((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_49
            case TEST1_INTF_SEC1REGNAME_49_ADDRESS:
            writetest1_intfsec1regname_49((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_50
            case TEST1_INTF_SEC1REGNAME_50_ADDRESS:
            writetest1_intfsec1regname_50((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_51
            case TEST1_INTF_SEC1REGNAME_51_ADDRESS:
            writetest1_intfsec1regname_51((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_52
            case TEST1_INTF_SEC1REGNAME_52_ADDRESS:
            writetest1_intfsec1regname_52((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_53
            case TEST1_INTF_SEC1REGNAME_53_ADDRESS:
            writetest1_intfsec1regname_53((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_54
            case TEST1_INTF_SEC1REGNAME_54_ADDRESS:
            writetest1_intfsec1regname_54((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_55
            case TEST1_INTF_SEC1REGNAME_55_ADDRESS:
            writetest1_intfsec1regname_55((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_56
            case TEST1_INTF_SEC1REGNAME_56_ADDRESS:
            writetest1_intfsec1regname_56((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_57
            case TEST1_INTF_SEC1REGNAME_57_ADDRESS:
            writetest1_intfsec1regname_57((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_58
            case TEST1_INTF_SEC1REGNAME_58_ADDRESS:
            writetest1_intfsec1regname_58((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_59
            case TEST1_INTF_SEC1REGNAME_59_ADDRESS:
            writetest1_intfsec1regname_59((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_60
            case TEST1_INTF_SEC1REGNAME_60_ADDRESS:
            writetest1_intfsec1regname_60((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_61
            case TEST1_INTF_SEC1REGNAME_61_ADDRESS:
            writetest1_intfsec1regname_61((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_62
            case TEST1_INTF_SEC1REGNAME_62_ADDRESS:
            writetest1_intfsec1regname_62((U32T)data, (U32T)dataMask);
            break;
            // test1_intfsec1regname_63
            case TEST1_INTF_SEC1REGNAME_63_ADDRESS:
            writetest1_intfsec1regname_63((U32T)data, (U32T)dataMask);
            break;
            // test1_intfregname223
            case TEST1_INTF_REGNAME223_ADDRESS:
            writetest1_intfregname223((U8T)data, (U8T)dataMask);
            break;
            // test1_intfregname2
            case TEST1_INTF_REGNAME2_ADDRESS:
            writetest1_intfregname2((U8T)data, (U8T)dataMask);
            break;
            // test1_intfregname22222
            case TEST1_INTF_REGNAME22222_ADDRESS:
            writetest1_intfregname22222((U8T)data, (U8T)dataMask);
            break;
            // test1_intfregname22
            case TEST1_INTF_REGNAME22_ADDRESS:
            writetest1_intfregname22((U8T)data, (U8T)dataMask);
            break;
            // test1_intfshadowregname_0
            case TEST1_INTF_SHADOWREGNAME_0_ADDRESS:
            writetest1_intfshadowregname_0((U16T)data, (U16T)dataMask);
            break;
            // Default
            default:
            break;
        }
        return;
    }
    
    /**
    * Write byte lanes access function for test1 component test1_intf transaction target.
    * @param Register address value (U32T).
    * @param Byte lane enable (U8T).
    * @param Register data value (U32T).
    */
    void test1::writeByteLanestest1_intf(U32T address, U8T BE, U32T data)
    {
        // Determine data mask
        U32T dataMask = 0;
        for (int i = 0; i < 4; i++)
        {
            if (((BE >> i) % 2) == 1)
            {
                dataMask |= (U32T)0xff << (i * 8);
            }
        }
        
        // test1_intfregname_0 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_0((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_1 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_1_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_1((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_2 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_2_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_2((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_3 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_3_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_3((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_4 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_4_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_4((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_5 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_5_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_5((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_6 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_6_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_6((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_7 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_7_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_7((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_8 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_8_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_8((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_9 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_9_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_9((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_10 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_10_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_10((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_11 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_11_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_11((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_12 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_12_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_12((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_13 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_13_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_13((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_14 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_14_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_14((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_15 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_15_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_15((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_16 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_16_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_16((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_17 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_17_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_17((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_18 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_18_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_18((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_19 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_19_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_19((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_20 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_20_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_20((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_21 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_21_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_21((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_22 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_22_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_22((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_23 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_23_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_23((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_24 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_24_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_24((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_25 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_25_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_25((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_26 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_26_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_26((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_27 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_27_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_27((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_28 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_28_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_28((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_29 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_29_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_29((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_30 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_30_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_30((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_31 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_31_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_31((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_32 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_32_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_32((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_33 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_33_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_33((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_34 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_34_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_34((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_35 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_35_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_35((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_36 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_36_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_36((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_37 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_37_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_37((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_38 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_38_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_38((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_39 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_39_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_39((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_40 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_40_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_40((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_41 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_41_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_41((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_42 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_42_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_42((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_43 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_43_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_43((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_44 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_44_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_44((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_45 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_45_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_45((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_46 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_46_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_46((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_47 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_47_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_47((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_48 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_48_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_48((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_49 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_49_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_49((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_50 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_50_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_50((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_51 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_51_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_51((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_52 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_52_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_52((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_53 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_53_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_53((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_54 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_54_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_54((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_55 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_55_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_55((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_56 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_56_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_56((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_57 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_57_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_57((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_58 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_58_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_58((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_59 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_59_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_59((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_60 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_60_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_60((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_61 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_61_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_61((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_62 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_62_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_62((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname_63 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_63_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfsec1regname_63((U32T)data, (U32T)dataMask);
        }
        
        // test1_intfregname223 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_REGNAME223_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfregname223((U8T)data, (U8T)dataMask);
        }
        
        // test1_intfregname2 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_REGNAME2_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfregname2((U8T)data, (U8T)dataMask);
        }
        
        // test1_intfregname22222 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_REGNAME22222_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfregname22222((U8T)data, (U8T)dataMask);
        }
        
        // test1_intfregname22 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_REGNAME22_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfregname22((U8T)data, (U8T)dataMask);
        }
        
        // test1_intfregname_0 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SHADOWREGNAME_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            writetest1_intfshadowregname_0((U16T)data, (U16T)dataMask);
        }
        
        return;
    }
    
    /**
    * Write access function for test1 component.
    * @param Register address value (U32T).
    * @param Transaction port (transactionPortType).
    * @param Register data value (U32T).
    * @param Register data mask (U32T).
    */
    void test1::write(transactionPortType transactionPort, U32T address, U32T data, U32T dataMask)
    {
        switch (transactionPort)
        {
            // test1_intf
            case test1_INTF_TRANSACTION_PORT:
            writetest1_intf(address, (U32T)data, (U32T)dataMask);
            break;
            // Default
            default:
            break;
        }
        return;
    }
    
    /**
    * Read access function for sec1regname_0 at address 0x0
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_0()
    {
        return  m_loctest1_intfsec1regname_0->read();
    }
    
    /**
    * Read access function for sec1regname_1 at address 0x4
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_1()
    {
        return  m_loctest1_intfsec1regname_1->read();
    }
    
    /**
    * Read access function for sec1regname_2 at address 0x8
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_2()
    {
        return  m_loctest1_intfsec1regname_2->read();
    }
    
    /**
    * Read access function for sec1regname_3 at address 0xc
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_3()
    {
        return  m_loctest1_intfsec1regname_3->read();
    }
    
    /**
    * Read access function for sec1regname_4 at address 0x10
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_4()
    {
        return  m_loctest1_intfsec1regname_4->read();
    }
    
    /**
    * Read access function for sec1regname_5 at address 0x14
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_5()
    {
        return  m_loctest1_intfsec1regname_5->read();
    }
    
    /**
    * Read access function for sec1regname_6 at address 0x18
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_6()
    {
        return  m_loctest1_intfsec1regname_6->read();
    }
    
    /**
    * Read access function for sec1regname_7 at address 0x1c
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_7()
    {
        return  m_loctest1_intfsec1regname_7->read();
    }
    
    /**
    * Read access function for sec1regname_8 at address 0x20
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_8()
    {
        return  m_loctest1_intfsec1regname_8->read();
    }
    
    /**
    * Read access function for sec1regname_9 at address 0x24
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_9()
    {
        return  m_loctest1_intfsec1regname_9->read();
    }
    
    /**
    * Read access function for sec1regname_10 at address 0x28
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_10()
    {
        return  m_loctest1_intfsec1regname_10->read();
    }
    
    /**
    * Read access function for sec1regname_11 at address 0x2c
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_11()
    {
        return  m_loctest1_intfsec1regname_11->read();
    }
    
    /**
    * Read access function for sec1regname_12 at address 0x30
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_12()
    {
        return  m_loctest1_intfsec1regname_12->read();
    }
    
    /**
    * Read access function for sec1regname_13 at address 0x34
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_13()
    {
        return  m_loctest1_intfsec1regname_13->read();
    }
    
    /**
    * Read access function for sec1regname_14 at address 0x38
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_14()
    {
        return  m_loctest1_intfsec1regname_14->read();
    }
    
    /**
    * Read access function for sec1regname_15 at address 0x3c
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_15()
    {
        return  m_loctest1_intfsec1regname_15->read();
    }
    
    /**
    * Read access function for sec1regname_16 at address 0x40
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_16()
    {
        return  m_loctest1_intfsec1regname_16->read();
    }
    
    /**
    * Read access function for sec1regname_17 at address 0x44
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_17()
    {
        return  m_loctest1_intfsec1regname_17->read();
    }
    
    /**
    * Read access function for sec1regname_18 at address 0x48
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_18()
    {
        return  m_loctest1_intfsec1regname_18->read();
    }
    
    /**
    * Read access function for sec1regname_19 at address 0x4c
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_19()
    {
        return  m_loctest1_intfsec1regname_19->read();
    }
    
    /**
    * Read access function for sec1regname_20 at address 0x50
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_20()
    {
        return  m_loctest1_intfsec1regname_20->read();
    }
    
    /**
    * Read access function for sec1regname_21 at address 0x54
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_21()
    {
        return  m_loctest1_intfsec1regname_21->read();
    }
    
    /**
    * Read access function for sec1regname_22 at address 0x58
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_22()
    {
        return  m_loctest1_intfsec1regname_22->read();
    }
    
    /**
    * Read access function for sec1regname_23 at address 0x5c
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_23()
    {
        return  m_loctest1_intfsec1regname_23->read();
    }
    
    /**
    * Read access function for sec1regname_24 at address 0x60
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_24()
    {
        return  m_loctest1_intfsec1regname_24->read();
    }
    
    /**
    * Read access function for sec1regname_25 at address 0x64
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_25()
    {
        return  m_loctest1_intfsec1regname_25->read();
    }
    
    /**
    * Read access function for sec1regname_26 at address 0x68
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_26()
    {
        return  m_loctest1_intfsec1regname_26->read();
    }
    
    /**
    * Read access function for sec1regname_27 at address 0x6c
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_27()
    {
        return  m_loctest1_intfsec1regname_27->read();
    }
    
    /**
    * Read access function for sec1regname_28 at address 0x70
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_28()
    {
        return  m_loctest1_intfsec1regname_28->read();
    }
    
    /**
    * Read access function for sec1regname_29 at address 0x74
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_29()
    {
        return  m_loctest1_intfsec1regname_29->read();
    }
    
    /**
    * Read access function for sec1regname_30 at address 0x78
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_30()
    {
        return  m_loctest1_intfsec1regname_30->read();
    }
    
    /**
    * Read access function for sec1regname_31 at address 0x7c
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_31()
    {
        return  m_loctest1_intfsec1regname_31->read();
    }
    
    /**
    * Read access function for sec1regname_32 at address 0x80
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_32()
    {
        return  m_loctest1_intfsec1regname_32->read();
    }
    
    /**
    * Read access function for sec1regname_33 at address 0x84
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_33()
    {
        return  m_loctest1_intfsec1regname_33->read();
    }
    
    /**
    * Read access function for sec1regname_34 at address 0x88
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_34()
    {
        return  m_loctest1_intfsec1regname_34->read();
    }
    
    /**
    * Read access function for sec1regname_35 at address 0x8c
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_35()
    {
        return  m_loctest1_intfsec1regname_35->read();
    }
    
    /**
    * Read access function for sec1regname_36 at address 0x90
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_36()
    {
        return  m_loctest1_intfsec1regname_36->read();
    }
    
    /**
    * Read access function for sec1regname_37 at address 0x94
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_37()
    {
        return  m_loctest1_intfsec1regname_37->read();
    }
    
    /**
    * Read access function for sec1regname_38 at address 0x98
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_38()
    {
        return  m_loctest1_intfsec1regname_38->read();
    }
    
    /**
    * Read access function for sec1regname_39 at address 0x9c
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_39()
    {
        return  m_loctest1_intfsec1regname_39->read();
    }
    
    /**
    * Read access function for sec1regname_40 at address 0xa0
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_40()
    {
        return  m_loctest1_intfsec1regname_40->read();
    }
    
    /**
    * Read access function for sec1regname_41 at address 0xa4
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_41()
    {
        return  m_loctest1_intfsec1regname_41->read();
    }
    
    /**
    * Read access function for sec1regname_42 at address 0xa8
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_42()
    {
        return  m_loctest1_intfsec1regname_42->read();
    }
    
    /**
    * Read access function for sec1regname_43 at address 0xac
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_43()
    {
        return  m_loctest1_intfsec1regname_43->read();
    }
    
    /**
    * Read access function for sec1regname_44 at address 0xb0
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_44()
    {
        return  m_loctest1_intfsec1regname_44->read();
    }
    
    /**
    * Read access function for sec1regname_45 at address 0xb4
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_45()
    {
        return  m_loctest1_intfsec1regname_45->read();
    }
    
    /**
    * Read access function for sec1regname_46 at address 0xb8
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_46()
    {
        return  m_loctest1_intfsec1regname_46->read();
    }
    
    /**
    * Read access function for sec1regname_47 at address 0xbc
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_47()
    {
        return  m_loctest1_intfsec1regname_47->read();
    }
    
    /**
    * Read access function for sec1regname_48 at address 0xc0
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_48()
    {
        return  m_loctest1_intfsec1regname_48->read();
    }
    
    /**
    * Read access function for sec1regname_49 at address 0xc4
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_49()
    {
        return  m_loctest1_intfsec1regname_49->read();
    }
    
    /**
    * Read access function for sec1regname_50 at address 0xc8
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_50()
    {
        return  m_loctest1_intfsec1regname_50->read();
    }
    
    /**
    * Read access function for sec1regname_51 at address 0xcc
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_51()
    {
        return  m_loctest1_intfsec1regname_51->read();
    }
    
    /**
    * Read access function for sec1regname_52 at address 0xd0
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_52()
    {
        return  m_loctest1_intfsec1regname_52->read();
    }
    
    /**
    * Read access function for sec1regname_53 at address 0xd4
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_53()
    {
        return  m_loctest1_intfsec1regname_53->read();
    }
    
    /**
    * Read access function for sec1regname_54 at address 0xd8
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_54()
    {
        return  m_loctest1_intfsec1regname_54->read();
    }
    
    /**
    * Read access function for sec1regname_55 at address 0xdc
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_55()
    {
        return  m_loctest1_intfsec1regname_55->read();
    }
    
    /**
    * Read access function for sec1regname_56 at address 0xe0
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_56()
    {
        return  m_loctest1_intfsec1regname_56->read();
    }
    
    /**
    * Read access function for sec1regname_57 at address 0xe4
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_57()
    {
        return  m_loctest1_intfsec1regname_57->read();
    }
    
    /**
    * Read access function for sec1regname_58 at address 0xe8
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_58()
    {
        return  m_loctest1_intfsec1regname_58->read();
    }
    
    /**
    * Read access function for sec1regname_59 at address 0xec
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_59()
    {
        return  m_loctest1_intfsec1regname_59->read();
    }
    
    /**
    * Read access function for sec1regname_60 at address 0xf0
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_60()
    {
        return  m_loctest1_intfsec1regname_60->read();
    }
    
    /**
    * Read access function for sec1regname_61 at address 0xf4
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_61()
    {
        return  m_loctest1_intfsec1regname_61->read();
    }
    
    /**
    * Read access function for sec1regname_62 at address 0xf8
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_62()
    {
        return  m_loctest1_intfsec1regname_62->read();
    }
    
    /**
    * Read access function for sec1regname_63 at address 0xfc
    * @return Register data value (U32T).
    */
    U32T test1::readtest1_intfsec1regname_63()
    {
        return  m_loctest1_intfsec1regname_63->read();
    }
    
    /**
    * Read access function for regname223 at address 0x100
    * @return Register data value (U8T).
    */
    U8T test1::readtest1_intfregname223()
    {
        return  m_loctest1_intfregname223->read();
    }
    
    /**
    * Read access function for regname2 at address 0x101
    * @return Register data value (U8T).
    */
    U8T test1::readtest1_intfregname2()
    {
        return  m_loctest1_intfregname2->read();
    }
    
    /**
    * Read access function for regname22222 at address 0x102
    * @return Register data value (U8T).
    */
    U8T test1::readtest1_intfregname22222()
    {
        return  m_loctest1_intfregname22222->read();
    }
    
    /**
    * Read access function for regname22 at address 0x103
    * @return Register data value (U8T).
    */
    U8T test1::readtest1_intfregname22()
    {
        return  m_loctest1_intfregname22->read();
    }
    
    /**
    * Read access function for shadowregname_0 at address 0x104
    * @return Register data value (U16T).
    */
    U16T test1::readtest1_intfshadowregname_0()
    {
        return  m_loctest1_intfshadowregname_0->read();
    }
    
    /**
    * Read access function for test1_intf component test1_intf transaction target.
    * @param Register address value (U32T).
    * @retrun Register data value (U32T).
    */
    U32T test1::readtest1_intf(U32T address )
    {
        // Initialise return value
        U32T retVal = 0;
        switch (address)
        {
            // test1_intfsec1regname_0
            case TEST1_INTF_SEC1REGNAME_0_ADDRESS:
            retVal = readtest1_intfsec1regname_0();
            break;
            // test1_intfsec1regname_1
            case TEST1_INTF_SEC1REGNAME_1_ADDRESS:
            retVal = readtest1_intfsec1regname_1();
            break;
            // test1_intfsec1regname_2
            case TEST1_INTF_SEC1REGNAME_2_ADDRESS:
            retVal = readtest1_intfsec1regname_2();
            break;
            // test1_intfsec1regname_3
            case TEST1_INTF_SEC1REGNAME_3_ADDRESS:
            retVal = readtest1_intfsec1regname_3();
            break;
            // test1_intfsec1regname_4
            case TEST1_INTF_SEC1REGNAME_4_ADDRESS:
            retVal = readtest1_intfsec1regname_4();
            break;
            // test1_intfsec1regname_5
            case TEST1_INTF_SEC1REGNAME_5_ADDRESS:
            retVal = readtest1_intfsec1regname_5();
            break;
            // test1_intfsec1regname_6
            case TEST1_INTF_SEC1REGNAME_6_ADDRESS:
            retVal = readtest1_intfsec1regname_6();
            break;
            // test1_intfsec1regname_7
            case TEST1_INTF_SEC1REGNAME_7_ADDRESS:
            retVal = readtest1_intfsec1regname_7();
            break;
            // test1_intfsec1regname_8
            case TEST1_INTF_SEC1REGNAME_8_ADDRESS:
            retVal = readtest1_intfsec1regname_8();
            break;
            // test1_intfsec1regname_9
            case TEST1_INTF_SEC1REGNAME_9_ADDRESS:
            retVal = readtest1_intfsec1regname_9();
            break;
            // test1_intfsec1regname_10
            case TEST1_INTF_SEC1REGNAME_10_ADDRESS:
            retVal = readtest1_intfsec1regname_10();
            break;
            // test1_intfsec1regname_11
            case TEST1_INTF_SEC1REGNAME_11_ADDRESS:
            retVal = readtest1_intfsec1regname_11();
            break;
            // test1_intfsec1regname_12
            case TEST1_INTF_SEC1REGNAME_12_ADDRESS:
            retVal = readtest1_intfsec1regname_12();
            break;
            // test1_intfsec1regname_13
            case TEST1_INTF_SEC1REGNAME_13_ADDRESS:
            retVal = readtest1_intfsec1regname_13();
            break;
            // test1_intfsec1regname_14
            case TEST1_INTF_SEC1REGNAME_14_ADDRESS:
            retVal = readtest1_intfsec1regname_14();
            break;
            // test1_intfsec1regname_15
            case TEST1_INTF_SEC1REGNAME_15_ADDRESS:
            retVal = readtest1_intfsec1regname_15();
            break;
            // test1_intfsec1regname_16
            case TEST1_INTF_SEC1REGNAME_16_ADDRESS:
            retVal = readtest1_intfsec1regname_16();
            break;
            // test1_intfsec1regname_17
            case TEST1_INTF_SEC1REGNAME_17_ADDRESS:
            retVal = readtest1_intfsec1regname_17();
            break;
            // test1_intfsec1regname_18
            case TEST1_INTF_SEC1REGNAME_18_ADDRESS:
            retVal = readtest1_intfsec1regname_18();
            break;
            // test1_intfsec1regname_19
            case TEST1_INTF_SEC1REGNAME_19_ADDRESS:
            retVal = readtest1_intfsec1regname_19();
            break;
            // test1_intfsec1regname_20
            case TEST1_INTF_SEC1REGNAME_20_ADDRESS:
            retVal = readtest1_intfsec1regname_20();
            break;
            // test1_intfsec1regname_21
            case TEST1_INTF_SEC1REGNAME_21_ADDRESS:
            retVal = readtest1_intfsec1regname_21();
            break;
            // test1_intfsec1regname_22
            case TEST1_INTF_SEC1REGNAME_22_ADDRESS:
            retVal = readtest1_intfsec1regname_22();
            break;
            // test1_intfsec1regname_23
            case TEST1_INTF_SEC1REGNAME_23_ADDRESS:
            retVal = readtest1_intfsec1regname_23();
            break;
            // test1_intfsec1regname_24
            case TEST1_INTF_SEC1REGNAME_24_ADDRESS:
            retVal = readtest1_intfsec1regname_24();
            break;
            // test1_intfsec1regname_25
            case TEST1_INTF_SEC1REGNAME_25_ADDRESS:
            retVal = readtest1_intfsec1regname_25();
            break;
            // test1_intfsec1regname_26
            case TEST1_INTF_SEC1REGNAME_26_ADDRESS:
            retVal = readtest1_intfsec1regname_26();
            break;
            // test1_intfsec1regname_27
            case TEST1_INTF_SEC1REGNAME_27_ADDRESS:
            retVal = readtest1_intfsec1regname_27();
            break;
            // test1_intfsec1regname_28
            case TEST1_INTF_SEC1REGNAME_28_ADDRESS:
            retVal = readtest1_intfsec1regname_28();
            break;
            // test1_intfsec1regname_29
            case TEST1_INTF_SEC1REGNAME_29_ADDRESS:
            retVal = readtest1_intfsec1regname_29();
            break;
            // test1_intfsec1regname_30
            case TEST1_INTF_SEC1REGNAME_30_ADDRESS:
            retVal = readtest1_intfsec1regname_30();
            break;
            // test1_intfsec1regname_31
            case TEST1_INTF_SEC1REGNAME_31_ADDRESS:
            retVal = readtest1_intfsec1regname_31();
            break;
            // test1_intfsec1regname_32
            case TEST1_INTF_SEC1REGNAME_32_ADDRESS:
            retVal = readtest1_intfsec1regname_32();
            break;
            // test1_intfsec1regname_33
            case TEST1_INTF_SEC1REGNAME_33_ADDRESS:
            retVal = readtest1_intfsec1regname_33();
            break;
            // test1_intfsec1regname_34
            case TEST1_INTF_SEC1REGNAME_34_ADDRESS:
            retVal = readtest1_intfsec1regname_34();
            break;
            // test1_intfsec1regname_35
            case TEST1_INTF_SEC1REGNAME_35_ADDRESS:
            retVal = readtest1_intfsec1regname_35();
            break;
            // test1_intfsec1regname_36
            case TEST1_INTF_SEC1REGNAME_36_ADDRESS:
            retVal = readtest1_intfsec1regname_36();
            break;
            // test1_intfsec1regname_37
            case TEST1_INTF_SEC1REGNAME_37_ADDRESS:
            retVal = readtest1_intfsec1regname_37();
            break;
            // test1_intfsec1regname_38
            case TEST1_INTF_SEC1REGNAME_38_ADDRESS:
            retVal = readtest1_intfsec1regname_38();
            break;
            // test1_intfsec1regname_39
            case TEST1_INTF_SEC1REGNAME_39_ADDRESS:
            retVal = readtest1_intfsec1regname_39();
            break;
            // test1_intfsec1regname_40
            case TEST1_INTF_SEC1REGNAME_40_ADDRESS:
            retVal = readtest1_intfsec1regname_40();
            break;
            // test1_intfsec1regname_41
            case TEST1_INTF_SEC1REGNAME_41_ADDRESS:
            retVal = readtest1_intfsec1regname_41();
            break;
            // test1_intfsec1regname_42
            case TEST1_INTF_SEC1REGNAME_42_ADDRESS:
            retVal = readtest1_intfsec1regname_42();
            break;
            // test1_intfsec1regname_43
            case TEST1_INTF_SEC1REGNAME_43_ADDRESS:
            retVal = readtest1_intfsec1regname_43();
            break;
            // test1_intfsec1regname_44
            case TEST1_INTF_SEC1REGNAME_44_ADDRESS:
            retVal = readtest1_intfsec1regname_44();
            break;
            // test1_intfsec1regname_45
            case TEST1_INTF_SEC1REGNAME_45_ADDRESS:
            retVal = readtest1_intfsec1regname_45();
            break;
            // test1_intfsec1regname_46
            case TEST1_INTF_SEC1REGNAME_46_ADDRESS:
            retVal = readtest1_intfsec1regname_46();
            break;
            // test1_intfsec1regname_47
            case TEST1_INTF_SEC1REGNAME_47_ADDRESS:
            retVal = readtest1_intfsec1regname_47();
            break;
            // test1_intfsec1regname_48
            case TEST1_INTF_SEC1REGNAME_48_ADDRESS:
            retVal = readtest1_intfsec1regname_48();
            break;
            // test1_intfsec1regname_49
            case TEST1_INTF_SEC1REGNAME_49_ADDRESS:
            retVal = readtest1_intfsec1regname_49();
            break;
            // test1_intfsec1regname_50
            case TEST1_INTF_SEC1REGNAME_50_ADDRESS:
            retVal = readtest1_intfsec1regname_50();
            break;
            // test1_intfsec1regname_51
            case TEST1_INTF_SEC1REGNAME_51_ADDRESS:
            retVal = readtest1_intfsec1regname_51();
            break;
            // test1_intfsec1regname_52
            case TEST1_INTF_SEC1REGNAME_52_ADDRESS:
            retVal = readtest1_intfsec1regname_52();
            break;
            // test1_intfsec1regname_53
            case TEST1_INTF_SEC1REGNAME_53_ADDRESS:
            retVal = readtest1_intfsec1regname_53();
            break;
            // test1_intfsec1regname_54
            case TEST1_INTF_SEC1REGNAME_54_ADDRESS:
            retVal = readtest1_intfsec1regname_54();
            break;
            // test1_intfsec1regname_55
            case TEST1_INTF_SEC1REGNAME_55_ADDRESS:
            retVal = readtest1_intfsec1regname_55();
            break;
            // test1_intfsec1regname_56
            case TEST1_INTF_SEC1REGNAME_56_ADDRESS:
            retVal = readtest1_intfsec1regname_56();
            break;
            // test1_intfsec1regname_57
            case TEST1_INTF_SEC1REGNAME_57_ADDRESS:
            retVal = readtest1_intfsec1regname_57();
            break;
            // test1_intfsec1regname_58
            case TEST1_INTF_SEC1REGNAME_58_ADDRESS:
            retVal = readtest1_intfsec1regname_58();
            break;
            // test1_intfsec1regname_59
            case TEST1_INTF_SEC1REGNAME_59_ADDRESS:
            retVal = readtest1_intfsec1regname_59();
            break;
            // test1_intfsec1regname_60
            case TEST1_INTF_SEC1REGNAME_60_ADDRESS:
            retVal = readtest1_intfsec1regname_60();
            break;
            // test1_intfsec1regname_61
            case TEST1_INTF_SEC1REGNAME_61_ADDRESS:
            retVal = readtest1_intfsec1regname_61();
            break;
            // test1_intfsec1regname_62
            case TEST1_INTF_SEC1REGNAME_62_ADDRESS:
            retVal = readtest1_intfsec1regname_62();
            break;
            // test1_intfsec1regname_63
            case TEST1_INTF_SEC1REGNAME_63_ADDRESS:
            retVal = readtest1_intfsec1regname_63();
            break;
            // test1_intfregname223
            case TEST1_INTF_REGNAME223_ADDRESS:
            retVal = readtest1_intfregname223();
            break;
            // test1_intfregname2
            case TEST1_INTF_REGNAME2_ADDRESS:
            retVal = readtest1_intfregname2();
            break;
            // test1_intfregname22222
            case TEST1_INTF_REGNAME22222_ADDRESS:
            retVal = readtest1_intfregname22222();
            break;
            // test1_intfregname22
            case TEST1_INTF_REGNAME22_ADDRESS:
            retVal = readtest1_intfregname22();
            break;
            // test1_intfshadowregname_0
            case TEST1_INTF_SHADOWREGNAME_0_ADDRESS:
            retVal = readtest1_intfshadowregname_0();
            break;
            // Default
            default:
            break;
        }
        return retVal;
    }
    
    /**
    * Read byte lanes access function for test1 component test1_intf transaction target.
    * @param Register address value (U32T).
    * @param Byte lane enable (U8T).
    * @param Register data value (U32T).
    */
    U32T test1::readByteLanestest1_intf(U32T address, U8T BE)
    {
        // Initialise return value
        U32T retVal = 0;
        
        // Determine data mask
        U32T dataMask = 0;
        for (int i = 0; i < 4; i++)
        {
            if (((BE >> i) % 2) == 1)
            {
                dataMask |= (U32T)0xff << (i * 8);
            }
        }
        
        // test1_intfregname_0 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_0() & (U32T)dataMask);
        }
        
        // test1_intfregname_1 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_1_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_1() & (U32T)dataMask);
        }
        
        // test1_intfregname_2 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_2_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_2() & (U32T)dataMask);
        }
        
        // test1_intfregname_3 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_3_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_3() & (U32T)dataMask);
        }
        
        // test1_intfregname_4 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_4_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_4() & (U32T)dataMask);
        }
        
        // test1_intfregname_5 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_5_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_5() & (U32T)dataMask);
        }
        
        // test1_intfregname_6 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_6_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_6() & (U32T)dataMask);
        }
        
        // test1_intfregname_7 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_7_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_7() & (U32T)dataMask);
        }
        
        // test1_intfregname_8 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_8_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_8() & (U32T)dataMask);
        }
        
        // test1_intfregname_9 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_9_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_9() & (U32T)dataMask);
        }
        
        // test1_intfregname_10 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_10_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_10() & (U32T)dataMask);
        }
        
        // test1_intfregname_11 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_11_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_11() & (U32T)dataMask);
        }
        
        // test1_intfregname_12 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_12_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_12() & (U32T)dataMask);
        }
        
        // test1_intfregname_13 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_13_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_13() & (U32T)dataMask);
        }
        
        // test1_intfregname_14 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_14_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_14() & (U32T)dataMask);
        }
        
        // test1_intfregname_15 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_15_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_15() & (U32T)dataMask);
        }
        
        // test1_intfregname_16 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_16_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_16() & (U32T)dataMask);
        }
        
        // test1_intfregname_17 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_17_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_17() & (U32T)dataMask);
        }
        
        // test1_intfregname_18 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_18_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_18() & (U32T)dataMask);
        }
        
        // test1_intfregname_19 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_19_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_19() & (U32T)dataMask);
        }
        
        // test1_intfregname_20 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_20_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_20() & (U32T)dataMask);
        }
        
        // test1_intfregname_21 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_21_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_21() & (U32T)dataMask);
        }
        
        // test1_intfregname_22 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_22_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_22() & (U32T)dataMask);
        }
        
        // test1_intfregname_23 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_23_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_23() & (U32T)dataMask);
        }
        
        // test1_intfregname_24 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_24_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_24() & (U32T)dataMask);
        }
        
        // test1_intfregname_25 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_25_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_25() & (U32T)dataMask);
        }
        
        // test1_intfregname_26 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_26_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_26() & (U32T)dataMask);
        }
        
        // test1_intfregname_27 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_27_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_27() & (U32T)dataMask);
        }
        
        // test1_intfregname_28 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_28_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_28() & (U32T)dataMask);
        }
        
        // test1_intfregname_29 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_29_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_29() & (U32T)dataMask);
        }
        
        // test1_intfregname_30 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_30_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_30() & (U32T)dataMask);
        }
        
        // test1_intfregname_31 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_31_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_31() & (U32T)dataMask);
        }
        
        // test1_intfregname_32 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_32_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_32() & (U32T)dataMask);
        }
        
        // test1_intfregname_33 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_33_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_33() & (U32T)dataMask);
        }
        
        // test1_intfregname_34 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_34_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_34() & (U32T)dataMask);
        }
        
        // test1_intfregname_35 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_35_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_35() & (U32T)dataMask);
        }
        
        // test1_intfregname_36 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_36_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_36() & (U32T)dataMask);
        }
        
        // test1_intfregname_37 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_37_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_37() & (U32T)dataMask);
        }
        
        // test1_intfregname_38 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_38_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_38() & (U32T)dataMask);
        }
        
        // test1_intfregname_39 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_39_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_39() & (U32T)dataMask);
        }
        
        // test1_intfregname_40 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_40_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_40() & (U32T)dataMask);
        }
        
        // test1_intfregname_41 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_41_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_41() & (U32T)dataMask);
        }
        
        // test1_intfregname_42 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_42_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_42() & (U32T)dataMask);
        }
        
        // test1_intfregname_43 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_43_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_43() & (U32T)dataMask);
        }
        
        // test1_intfregname_44 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_44_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_44() & (U32T)dataMask);
        }
        
        // test1_intfregname_45 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_45_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_45() & (U32T)dataMask);
        }
        
        // test1_intfregname_46 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_46_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_46() & (U32T)dataMask);
        }
        
        // test1_intfregname_47 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_47_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_47() & (U32T)dataMask);
        }
        
        // test1_intfregname_48 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_48_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_48() & (U32T)dataMask);
        }
        
        // test1_intfregname_49 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_49_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_49() & (U32T)dataMask);
        }
        
        // test1_intfregname_50 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_50_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_50() & (U32T)dataMask);
        }
        
        // test1_intfregname_51 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_51_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_51() & (U32T)dataMask);
        }
        
        // test1_intfregname_52 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_52_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_52() & (U32T)dataMask);
        }
        
        // test1_intfregname_53 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_53_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_53() & (U32T)dataMask);
        }
        
        // test1_intfregname_54 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_54_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_54() & (U32T)dataMask);
        }
        
        // test1_intfregname_55 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_55_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_55() & (U32T)dataMask);
        }
        
        // test1_intfregname_56 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_56_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_56() & (U32T)dataMask);
        }
        
        // test1_intfregname_57 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_57_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_57() & (U32T)dataMask);
        }
        
        // test1_intfregname_58 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_58_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_58() & (U32T)dataMask);
        }
        
        // test1_intfregname_59 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_59_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_59() & (U32T)dataMask);
        }
        
        // test1_intfregname_60 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_60_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_60() & (U32T)dataMask);
        }
        
        // test1_intfregname_61 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_61_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_61() & (U32T)dataMask);
        }
        
        // test1_intfregname_62 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_62_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_62() & (U32T)dataMask);
        }
        
        // test1_intfregname_63 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SEC1REGNAME_63_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U32T)(readtest1_intfsec1regname_63() & (U32T)dataMask);
        }
        
        // test1_intfregname223 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_REGNAME223_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U8T)(readtest1_intfregname223() & (U8T)dataMask);
        }
        
        // test1_intfregname2 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_REGNAME2_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U8T)(readtest1_intfregname2() & (U8T)dataMask);
        }
        
        // test1_intfregname22222 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_REGNAME22222_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U8T)(readtest1_intfregname22222() & (U8T)dataMask);
        }
        
        // test1_intfregname22 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_REGNAME22_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U8T)(readtest1_intfregname22() & (U8T)dataMask);
        }
        
        // test1_intfregname_0 (in byte lanes 0 to 3)
        if ((address == (TEST1_INTF_SHADOWREGNAME_0_ADDRESS & 0xfffffffc)) &&
        (((BE % 2) == 1) ||
        (((BE >> 1) % 2) == 1) ||
        (((BE >> 2) % 2) == 1) ||
        (((BE >> 3) % 2) == 1)))
        {
            retVal |= (U16T)(readtest1_intfshadowregname_0() & (U16T)dataMask);
        }
        
        return retVal;
    }
    
    /**
    * Read access function for test1 component.
    * @param Register address value (U32T).
    * @param Transaction port (transactionPortType).
    * @param Register data value (U32T).
    */
    U32T test1::read(transactionPortType transactionPort, U32T address)
    {
        // Initialise return value
        U32T retVal = 0;
        switch (transactionPort)
        {
            // test1_intf
            case test1_INTF_TRANSACTION_PORT:
            retVal = readtest1_intf(address);
            break;
            // Default
            default:
            break;
        }
        return retVal;
    }
    
} // namespace DUOLOG
