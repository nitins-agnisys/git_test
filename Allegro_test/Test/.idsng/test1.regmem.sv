//Agnisys, Inc. ***** Copyright 2018 All Rights Reserved. *****
//
//*** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ***
// created by        :
// generated by      : Agnisys
// generated from    : D:\AgnisysProjects\git_test\Allegro_test\Test\test1.idsng
// IDesignSpec rev   : idsbatch v4.16.26.2

//*** This code is generated with following settings ***
// Reg Width                  : 32
// Address Unit               : 8
// C++ Types int              : hwint
// Bus Type                   : PROPRIETARY
// BigEndian                  : false
// LittleEndian               : false
// Dist. Decode and Readback  : false
//---------------------------------------------------------------------------------------------------------------
/*----------------------------------------------------------------------
Class       : test1_sec1_reg_name
-----------------------------------------------------------------------*/

`ifndef CLASS_test1_sec1_reg_name
`define CLASS_test1_sec1_reg_name
class test1_sec1_reg_name extends uvm_reg;
    `uvm_object_utils(test1_sec1_reg_name)

    rand uvm_reg_field f1;
    rand uvm_reg_field f2;
    rand uvm_reg_field f12;
    rand uvm_reg_field rg2;

    // Function : new
    function new(string name = "test1_sec1_reg_name");
        super.new(name, 32, build_coverage(UVM_NO_COVERAGE));
        add_coverage(build_coverage(UVM_NO_COVERAGE));            //Added because build coverage in the line above doesn’t work due to a bug in UVM 1.1 library

    endfunction

    // Function : build
    virtual function void build();
        this.f1 = uvm_reg_field::type_id::create("f1");

        this.f2 = uvm_reg_field::type_id::create("f2");

        this.f12 = uvm_reg_field::type_id::create("f12");

        this.rg2 = uvm_reg_field::type_id::create("rg2");

        this.f1.configure(this, 3,  0, "WRC", 0, 'd0, 1, 1, 0);
        this.f2.configure(this, 5,  3, "RW", 0, 'd1, 1, 1, 0);
        this.f12.configure(this, 1,  10, "RW", 0, 'd0, 1, 1, 0);
        this.rg2.configure(this, 2,  13, "RO", 0, 'd0, 1, 1, 0);

    endfunction
endclass
`endif

/*----------------------------------------------------------------------
Class       : test1_reg_name223
-----------------------------------------------------------------------*/

`ifndef CLASS_test1_reg_name223
`define CLASS_test1_reg_name223
class test1_reg_name223 extends uvm_reg;
    `uvm_object_utils(test1_reg_name223)

    rand uvm_reg_field ft;

    // Function : new
    function new(string name = "test1_reg_name223");
        super.new(name, 8, build_coverage(UVM_NO_COVERAGE));
        add_coverage(build_coverage(UVM_NO_COVERAGE));            //Added because build coverage in the line above doesn’t work due to a bug in UVM 1.1 library

    endfunction

    // Function : build
    virtual function void build();
        this.ft = uvm_reg_field::type_id::create("ft");

        this.ft.configure(this, 7,  1, "WC", 0, 'd0, 1, 1, 0);

    endfunction
endclass
`endif

/*----------------------------------------------------------------------
Class       : test1_reg_name2
-----------------------------------------------------------------------*/

`ifndef CLASS_test1_reg_name2
`define CLASS_test1_reg_name2
class test1_reg_name2 extends uvm_reg;
    `uvm_object_utils(test1_reg_name2)

    rand uvm_reg_field ff1;
    rand uvm_reg_field ff12;
    rand uvm_reg_field f1;

    // Function : new
    function new(string name = "test1_reg_name2");
        super.new(name, 8, build_coverage(UVM_NO_COVERAGE));
        add_coverage(build_coverage(UVM_NO_COVERAGE));            //Added because build coverage in the line above doesn’t work due to a bug in UVM 1.1 library

    endfunction

    // Function : build
    virtual function void build();
        this.ff1 = uvm_reg_field::type_id::create("ff1");

        this.ff12 = uvm_reg_field::type_id::create("ff12");

        this.f1 = uvm_reg_field::type_id::create("f1");

        this.ff1.configure(this, 1,  2, "RW", 0, 'd1, 1, 1, 0);
        this.ff12.configure(this, 1,  0, "RW", 0, 'd1, 1, 1, 0);
        this.f1.configure(this, 1,  1, "RW", 0, 'd0, 1, 1, 0);

    endfunction
endclass
`endif

/*----------------------------------------------------------------------
Class       : test1_reg_name22222
-----------------------------------------------------------------------*/

`ifndef CLASS_test1_reg_name22222
`define CLASS_test1_reg_name22222
class test1_reg_name22222 extends uvm_reg;
    `uvm_object_utils(test1_reg_name22222)

    rand uvm_reg_field ff1;
    rand uvm_reg_field f1;
    rand uvm_reg_field f3;

    // Function : new
    function new(string name = "test1_reg_name22222");
        super.new(name, 8, build_coverage(UVM_NO_COVERAGE));
        add_coverage(build_coverage(UVM_NO_COVERAGE));            //Added because build coverage in the line above doesn’t work due to a bug in UVM 1.1 library

    endfunction

    // Function : build
    virtual function void build();
        this.ff1 = uvm_reg_field::type_id::create("ff1");

        this.f1 = uvm_reg_field::type_id::create("f1");

        this.f3 = uvm_reg_field::type_id::create("f3");

        this.ff1.configure(this, 1,  2, "RW", 0, 'd1, 1, 1, 0);
        this.f1.configure(this, 1,  3, "RW", 0, 'd0, 1, 1, 0);
        this.f3.configure(this, 2,  0, "RO", 0, 'd1, 1, 1, 0);

    endfunction
endclass
`endif

/*----------------------------------------------------------------------
Class       : test1_reg_name22
-----------------------------------------------------------------------*/

`ifndef CLASS_test1_reg_name22
`define CLASS_test1_reg_name22
class test1_reg_name22 extends uvm_reg;
    `uvm_object_utils(test1_reg_name22)

    rand uvm_reg_field ff1;
    rand uvm_reg_field f1;

    // Function : new
    function new(string name = "test1_reg_name22");
        super.new(name, 8, build_coverage(UVM_NO_COVERAGE));
        add_coverage(build_coverage(UVM_NO_COVERAGE));            //Added because build coverage in the line above doesn’t work due to a bug in UVM 1.1 library

    endfunction

    // Function : build
    virtual function void build();
        this.ff1 = uvm_reg_field::type_id::create("ff1");

        this.f1 = uvm_reg_field::type_id::create("f1");

        this.ff1.configure(this, 1,  0, "RW", 0, 'd1, 1, 1, 0);
        this.f1.configure(this, 1,  3, "RW", 0, 'd0, 1, 1, 0);

    endfunction
endclass
`endif

/*----------------------------------------------------------------------
Class       : test1_shadow_reg_name
-----------------------------------------------------------------------*/

`ifndef CLASS_test1_shadow_reg_name
`define CLASS_test1_shadow_reg_name
class test1_shadow_reg_name extends uvm_reg;
    `uvm_object_utils(test1_shadow_reg_name)

    rand uvm_reg_field rg1;

    // Function : new
    function new(string name = "test1_shadow_reg_name");
        super.new(name, 16, build_coverage(UVM_NO_COVERAGE));
        add_coverage(build_coverage(UVM_NO_COVERAGE));            //Added because build coverage in the line above doesn’t work due to a bug in UVM 1.1 library

    endfunction

    // Function : build
    virtual function void build();
        this.rg1 = uvm_reg_field::type_id::create("rg1");

        this.rg1.configure(this, 6,  0, "RW", 0, 'd0, 1, 1, 0);

    endfunction
endclass
`endif

/*----------------------------------------------------------------------
Class       : test1_shadow
-----------------------------------------------------------------------*/
`ifndef CLASS_test1_shadow
`define CLASS_test1_shadow
class test1_shadow extends uvm_reg_file;
    `uvm_object_utils(test1_shadow)

    rand test1_shadow_reg_name shadowreg_name;

    // Function : new
    function new(string name = "test1_shadow");
        super.new(name);
    endfunction

    // Function : build
    virtual function void build();
        //create
        shadowreg_name   =   test1_shadow_reg_name::type_id::create("shadowreg_name");

        //config
        shadowreg_name.configure(get_block(), this, "shadowreg_name");

        //build
        shadowreg_name.build();
    endfunction

    virtual function void map(uvm_reg_map mp, uvm_reg_addr_t offset);
        //add reg and regfiles
        mp.add_reg( shadowreg_name, offset +  'h0, "RW");
    endfunction

    virtual function void set_offset(uvm_reg_map mp, uvm_reg_addr_t offset);
        shadowreg_name.set_offset(mp, offset +  'h0);
    endfunction
endclass
`endif

/*----------------------------------------------------------------------
Class       : test1_sec1
-----------------------------------------------------------------------*/
`ifndef CLASS_test1_sec1
`define CLASS_test1_sec1
class test1_sec1 extends uvm_reg_file;
    `uvm_object_utils(test1_sec1)

    rand test1_sec1_reg_name sec1reg_name;

    // Function : new
    function new(string name = "test1_sec1");
        super.new(name);
    endfunction

    // Function : build
    virtual function void build();
        //create
        sec1reg_name   =   test1_sec1_reg_name::type_id::create("sec1reg_name");

        //config
        sec1reg_name.configure(get_block(), this, "sec1reg_name");

        //build
        sec1reg_name.build();
    endfunction

    virtual function void map(uvm_reg_map mp, uvm_reg_addr_t offset);
        //add reg and regfiles
        mp.add_reg( sec1reg_name, offset +  'h0, "RW");
    endfunction

    virtual function void set_offset(uvm_reg_map mp, uvm_reg_addr_t offset);
        sec1reg_name.set_offset(mp, offset +  'h0);
    endfunction
endclass
`endif

/*----------------------------------------------------------------------
Class      : test1_block
-----------------------------------------------------------------------*/
`ifndef CLASS_test1_block
`define CLASS_test1_block
class test1_block extends uvm_reg_block;
    `uvm_object_utils(test1_block)

    rand test1_reg_name223 reg_name223;

    rand test1_reg_name2 reg_name2;

    rand test1_reg_name22222 reg_name22222;

    rand test1_reg_name22 reg_name22;

    rand test1_sec1 sec1[64];
    rand test1_shadow shadow;

    // Function : new
    function new(string name = "test1_block");
        super.new(name, UVM_NO_COVERAGE);
    endfunction

    // Function : build
    virtual function void build();
        //REG_NAME223
        reg_name223   =   test1_reg_name223::type_id::create("reg_name223");
        reg_name223.configure(this, null, "reg_name223");
        reg_name223.build();

        //REG_NAME2
        reg_name2   =   test1_reg_name2::type_id::create("reg_name2");
        reg_name2.configure(this, null, "reg_name2");
        reg_name2.build();

        //REG_NAME22222
        reg_name22222   =   test1_reg_name22222::type_id::create("reg_name22222");
        reg_name22222.configure(this, null, "reg_name22222");
        reg_name22222.build();

        //REG_NAME22
        reg_name22   =   test1_reg_name22::type_id::create("reg_name22");
        reg_name22.configure(this, null, "reg_name22");
        reg_name22.build();

        //SEC1
        foreach (sec1[sec1_i])
        begin
            sec1[sec1_i] = test1_sec1::type_id::create($sformatf("sec1[%0x]", sec1_i));
            sec1[sec1_i].configure(this, null, $sformatf("sec1[%0x]", sec1_i));

            sec1[sec1_i].build();
        end

        //SHADOW
        shadow   =   test1_shadow::type_id::create("shadow");
        shadow.configure(this, null, "shadow");
        shadow.build();

        //define default map and add reg/regfiles
        default_map= create_map("default_map", 'h12345678, 4, UVM_LITTLE_ENDIAN, 1);
        default_map.add_reg( reg_name223, 'h100, "RW");
        default_map.add_reg( reg_name2, 'h101, "RW");
        default_map.add_reg( reg_name22222, 'h102, "RW");
        default_map.add_reg( reg_name22, 'h103, "RW");
        foreach (sec1[sec1_i])
        begin
            sec1[sec1_i].map(default_map, 'h0 + sec1_i * 'h4);
        end

        shadow.map( default_map, 'h104);

        lock_model();
    endfunction

endclass : test1_block
`endif
