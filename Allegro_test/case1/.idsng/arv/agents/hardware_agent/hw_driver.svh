//Agnisys, Inc. ***** Copyright 2018 All Rights Reserved. *****
//
//*** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ***
// created by        : 
// generated by      : Admin
// generated from    : C:\Users\Admin\Documents\GitHub\git_test\Allegro_test\case1\case1.idsng
// IDesignSpec rev   : idsbatch v4.16.26.2

//*** This code is generated with following settings ***
// Reg Width                  : 32
// Address Unit               : 8
// C++ Types int              : hwint
// Bus Type                   : AXI
// BigEndian                  : false
// LittleEndian               : false
// Dist. Decode and Readback  : false
//--------------------------------------------------------------------------------------------------------------- 
class chip_name_hw_driver extends uvm_driver#(hw_txn);
    `uvm_component_utils(chip_name_hw_driver)
    virtual chip_name_hw_if vif;
    config_object cfg;

    function new(string name, uvm_component parent);
        super.new(name,parent);
    endfunction : new

    function void build_phase (uvm_phase phase);
        super.build_phase(phase);
        void'(uvm_config_db#(config_object)::get(this,"","cfg",cfg));
    endfunction : build_phase

    function void connect_phase(uvm_phase phase);
        super.connect_phase(phase);
        vif = cfg.chip_name_hif;
    endfunction : connect_phase

    task run_phase(uvm_phase phase);
        hw_txn txn;
        forever
        begin
            seq_item_port.get_next_item(txn);
            case(txn.kind)
                WRITE : hw_write(txn);
                READ  : hw_read(txn);
            endcase
            seq_item_port.item_done();
        end

    endtask

    task hw_write(hw_txn txn);
        case(txn.address)
            'h78   :   write_block1_reg1 (txn.data);
            'h80   :   write_block1_reggroup1_reg1 (txn.data);
            'h81   :   write_block1_reggroup1_reg2 (txn.data);
            'h84   :   write_block2_reggroup1_reg1 (txn.data);
            'h85   :   write_block2_reggroup1_reg2 (txn.data);
            'h87   :   write_block2_ref_name_reg1 (txn.data);
            'h89   :   write_block2_ref_name_ref_name_reggroup1_reg1 (txn.data);
            'h90   :   write_block2_ref_name_ref_name_reggroup1_reg2 (txn.data);
        endcase
    endtask

    task write_block1_reg1(input uvm_reg_data_t data);
        vif.block1_idsreg1_fld_in_enb = 1'b1;
        vif.block1_idsreg1_fld_in = data [31:0];

        @(posedge vif.clk)
        vif.block1_idsreg1_fld_in_enb = 1'b0;
    endtask

    task write_block1_reggroup1_reg1(input uvm_reg_data_t data);
        vif.block1_idsreggroup1_reg1_fld_in_enb = 1'b1;
        vif.block1_idsreggroup1_reg1_fld_in = data [31:0];

        @(posedge vif.clk)
        vif.block1_idsreggroup1_reg1_fld_in_enb = 1'b0;
    endtask

    task write_block1_reggroup1_reg2(input uvm_reg_data_t data);
        vif.block1_idsreggroup1_reg2_fld1_in_enb = 1'b1;
        vif.block1_idsreggroup1_reg2_fld1_in = data [31:0];

        @(posedge vif.clk)
        vif.block1_idsreggroup1_reg2_fld1_in_enb = 1'b0;
    endtask

    task write_block2_reggroup1_reg1(input uvm_reg_data_t data);
        vif.block2_idsreggroup1_reg1_fld_in_enb = 1'b1;
        vif.block2_idsreggroup1_reg1_fld_in = data [31:0];

        @(posedge vif.clk)
        vif.block2_idsreggroup1_reg1_fld_in_enb = 1'b0;
    endtask

    task write_block2_reggroup1_reg2(input uvm_reg_data_t data);
        vif.block2_idsreggroup1_reg2_fld1_in_enb = 1'b1;
        vif.block2_idsreggroup1_reg2_fld1_in = data [31:0];

        @(posedge vif.clk)
        vif.block2_idsreggroup1_reg2_fld1_in_enb = 1'b0;
    endtask

    task write_block2_ref_name_reg1(input uvm_reg_data_t data);
        vif.block2_idsref_name_reg1_fld_in_enb = 1'b1;
        vif.block2_idsref_name_reg1_fld_in = data [31:0];

        @(posedge vif.clk)
        vif.block2_idsref_name_reg1_fld_in_enb = 1'b0;
    endtask

    task write_block2_ref_name_ref_name_reggroup1_reg1(input uvm_reg_data_t data);
        vif.block2_idsref_name_ref_name_reggroup1_reg1_fld_in_enb = 1'b1;
        vif.block2_idsref_name_ref_name_reggroup1_reg1_fld_in = data [31:0];

        @(posedge vif.clk)
        vif.block2_idsref_name_ref_name_reggroup1_reg1_fld_in_enb = 1'b0;
    endtask

    task write_block2_ref_name_ref_name_reggroup1_reg2(input uvm_reg_data_t data);
        vif.block2_idsref_name_ref_name_reggroup1_reg2_fld1_in_enb = 1'b1;
        vif.block2_idsref_name_ref_name_reggroup1_reg2_fld1_in = data [31:0];

        @(posedge vif.clk)
        vif.block2_idsref_name_ref_name_reggroup1_reg2_fld1_in_enb = 1'b0;
    endtask

    task hw_read(hw_txn txn);
        case(txn.address)
            'h78   :   read_block1_reg1 (txn);
            'h80   :   read_block1_reggroup1_reg1 (txn);
            'h81   :   read_block1_reggroup1_reg2 (txn);
            'h84   :   read_block2_reggroup1_reg1 (txn);
            'h85   :   read_block2_reggroup1_reg2 (txn);
            'h87   :   read_block2_ref_name_reg1 (txn);
            'h89   :   read_block2_ref_name_ref_name_reggroup1_reg1 (txn);
            'h90   :   read_block2_ref_name_ref_name_reggroup1_reg2 (txn);
        endcase
    endtask

    task read_block1_reg1(hw_txn txn);
        txn.data =  vif.block1_idsreg1_fld_r;
    endtask

    task read_block1_reggroup1_reg1(hw_txn txn);
        txn.data =  vif.block1_idsreggroup1_reg1_fld_r;
    endtask

    task read_block1_reggroup1_reg2(hw_txn txn);
        txn.data =  vif.block1_idsreggroup1_reg2_fld1_r;
    endtask

    task read_block2_reggroup1_reg1(hw_txn txn);
        txn.data =  vif.block2_idsreggroup1_reg1_fld_r;
    endtask

    task read_block2_reggroup1_reg2(hw_txn txn);
        txn.data =  vif.block2_idsreggroup1_reg2_fld1_r;
    endtask

    task read_block2_ref_name_reg1(hw_txn txn);
        txn.data =  vif.block2_idsref_name_reg1_fld_r;
    endtask

    task read_block2_ref_name_ref_name_reggroup1_reg1(hw_txn txn);
        txn.data =  vif.block2_idsref_name_ref_name_reggroup1_reg1_fld_r;
    endtask

    task read_block2_ref_name_ref_name_reggroup1_reg2(hw_txn txn);
        txn.data =  vif.block2_idsref_name_ref_name_reggroup1_reg2_fld1_r;
    endtask

endclass  : chip_name_hw_driver
