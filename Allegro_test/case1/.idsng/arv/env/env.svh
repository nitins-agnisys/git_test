//Agnisys, Inc. ***** Copyright 2018 All Rights Reserved. *****
//
//*** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ***
// created by        : 
// generated by      : Admin
// generated from    : C:\Users\Admin\Documents\GitHub\git_test\Allegro_test\case1\case1.idsng
// IDesignSpec rev   : idsbatch v4.16.26.2

//*** This code is generated with following settings ***
// Reg Width                  : 32
// Address Unit               : 8
// C++ Types int              : hwint
// Bus Type                   : AXI
// BigEndian                  : false
// LittleEndian               : false
// Dist. Decode and Readback  : false
//--------------------------------------------------------------------------------------------------------------- 
class chip_name_env extends uvm_env;
    `uvm_component_utils(chip_name_env)

    ambaaxi4lite_agent ambaaxi4liteagent;
    reg2ambaaxi4lite_adapter ambaaxi4liteadapter;
    topseqr v_seqr;

    config_object cfg;

    function new(string name, uvm_component parent=null);
        super.new(name,parent);
    endfunction : new

    function void build_phase(uvm_phase phase);
        super.build_phase(phase);

        if(!uvm_config_db #(config_object)::get(this,"","cfg",cfg)) begin
            `uvm_fatal("CONFIG", "config object not found");
        end

        ambaaxi4liteagent = ambaaxi4lite_agent::type_id::create("ambaaxi4liteagent",this);
        ambaaxi4liteadapter = reg2ambaaxi4lite_adapter::type_id::create("ambaaxi4liteadapter",this);
        v_seqr = topseqr::type_id::create("v_seqr",this);

        begin
            string hdl_root="top.chip_name";
            void'($value$plusargs("ROOT_HDL_PATH=%s",hdl_root));
            cfg.model.set_hdl_path_root(hdl_root);
            void'(cfg.model.set_coverage(UVM_CVR_ALL));
        end

    endfunction : build_phase

    function void connect_phase(uvm_phase phase);
        super.connect_phase(phase);

        ambaaxi4liteadapter.provides_responses = 0;

        //chip_name_hwadapter.provides_responses = 0;

        ambaaxi4liteadapter.supports_byte_enable = 1;

        //chip_name_hwadapter.supports_byte_enable = 1;

        cfg.model.default_map.set_sequencer(ambaaxi4liteagent.ambaaxi4lite_seqr, ambaaxi4liteadapter);

        cfg.model.default_map.set_auto_predict(1);

        v_seqr.ambaaxi4lite_seqr = ambaaxi4liteagent.ambaaxi4lite_seqr;

    endfunction : connect_phase
endclass : chip_name_env
