//Agnisys, Inc. ***** Copyright 2018 All Rights Reserved. *****
//
//*** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ***
// created by        : 
// generated by      : Admin
// generated from    : C:\Users\Admin\Documents\GitHub\git_test\Allegro_test\case1\case1.idsng
// IDesignSpec rev   : idsbatch v4.16.26.2

//*** This code is generated with following settings ***
// Reg Width                  : 32
// Address Unit               : 8
// C++ Types int              : hwint
// Bus Type                   : AXI
// BigEndian                  : false
// LittleEndian               : false
// Dist. Decode and Readback  : false
//--------------------------------------------------------------------------------------------------------------- 
module top;
 import uvm_pkg::*;
 import test_pkg::*;

    parameter bus_width   = 32;
    parameter addr_width  = 5;

ambaaxi4lite_if chip_name_ambaaxi4lite();
chip_name_hw_if chip_name_hw();

chip_name_ids  chip_name(
  .block1_idsreg1_enb(chip_name_hw.block1_idsreg1_enb),
  .block1_idsreg1_fld_in_enb(chip_name_hw.block1_idsreg1_fld_in_enb),
  .block1_idsreg1_fld_in(chip_name_hw.block1_idsreg1_fld_in),
  .block1_idsreg1_fld_r(chip_name_hw.block1_idsreg1_fld_r),
  .block1_idsreggroup1_reg1_enb(chip_name_hw.block1_idsreggroup1_reg1_enb),
  .block1_idsreggroup1_reg1_fld_in_enb(chip_name_hw.block1_idsreggroup1_reg1_fld_in_enb),
  .block1_idsreggroup1_reg1_fld_in(chip_name_hw.block1_idsreggroup1_reg1_fld_in),
  .block1_idsreggroup1_reg1_fld_r(chip_name_hw.block1_idsreggroup1_reg1_fld_r),
  .block1_idsreggroup1_reg2_enb(chip_name_hw.block1_idsreggroup1_reg2_enb),
  .block1_idsreggroup1_reg2_fld1_in_enb(chip_name_hw.block1_idsreggroup1_reg2_fld1_in_enb),
  .block1_idsreggroup1_reg2_fld1_in(chip_name_hw.block1_idsreggroup1_reg2_fld1_in),
  .block1_idsreggroup1_reg2_fld1_r(chip_name_hw.block1_idsreggroup1_reg2_fld1_r),
  .block2_idsreggroup1_reg1_enb(chip_name_hw.block2_idsreggroup1_reg1_enb),
  .block2_idsreggroup1_reg1_fld_in_enb(chip_name_hw.block2_idsreggroup1_reg1_fld_in_enb),
  .block2_idsreggroup1_reg1_fld_in(chip_name_hw.block2_idsreggroup1_reg1_fld_in),
  .block2_idsreggroup1_reg1_fld_r(chip_name_hw.block2_idsreggroup1_reg1_fld_r),
  .block2_idsreggroup1_reg2_enb(chip_name_hw.block2_idsreggroup1_reg2_enb),
  .block2_idsreggroup1_reg2_fld1_in_enb(chip_name_hw.block2_idsreggroup1_reg2_fld1_in_enb),
  .block2_idsreggroup1_reg2_fld1_in(chip_name_hw.block2_idsreggroup1_reg2_fld1_in),
  .block2_idsreggroup1_reg2_fld1_r(chip_name_hw.block2_idsreggroup1_reg2_fld1_r),
  .block2_idsref_name_reg1_enb(chip_name_hw.block2_idsref_name_reg1_enb),
  .block2_idsref_name_reg1_fld_in_enb(chip_name_hw.block2_idsref_name_reg1_fld_in_enb),
  .block2_idsref_name_reg1_fld_in(chip_name_hw.block2_idsref_name_reg1_fld_in),
  .block2_idsref_name_reg1_fld_r(chip_name_hw.block2_idsref_name_reg1_fld_r),
  .block2_idsref_name_ref_name_reggroup1_reg1_enb(chip_name_hw.block2_idsref_name_ref_name_reggroup1_reg1_enb),
  .block2_idsref_name_ref_name_reggroup1_reg1_fld_in_enb(chip_name_hw.block2_idsref_name_ref_name_reggroup1_reg1_fld_in_enb),
  .block2_idsref_name_ref_name_reggroup1_reg1_fld_in(chip_name_hw.block2_idsref_name_ref_name_reggroup1_reg1_fld_in),
  .block2_idsref_name_ref_name_reggroup1_reg1_fld_r(chip_name_hw.block2_idsref_name_ref_name_reggroup1_reg1_fld_r),
  .block2_idsref_name_ref_name_reggroup1_reg2_enb(chip_name_hw.block2_idsref_name_ref_name_reggroup1_reg2_enb),
  .block2_idsref_name_ref_name_reggroup1_reg2_fld1_in_enb(chip_name_hw.block2_idsref_name_ref_name_reggroup1_reg2_fld1_in_enb),
  .block2_idsref_name_ref_name_reggroup1_reg2_fld1_in(chip_name_hw.block2_idsref_name_ref_name_reggroup1_reg2_fld1_in),
  .block2_idsref_name_ref_name_reggroup1_reg2_fld1_r(chip_name_hw.block2_idsref_name_ref_name_reggroup1_reg2_fld1_r),

.aclk(chip_name_ambaaxi4lite.aclk),
.aresetn(chip_name_ambaaxi4lite.aresetn),
.awvalid(chip_name_ambaaxi4lite.awvalid),
.awready(chip_name_ambaaxi4lite.awready),
.awprot(chip_name_ambaaxi4lite.awprot),
.awaddr(chip_name_ambaaxi4lite.awaddr),
.wdata(chip_name_ambaaxi4lite.wdata),
.wstrb(chip_name_ambaaxi4lite.wstrb),
.wvalid(chip_name_ambaaxi4lite.wvalid),
.wready(chip_name_ambaaxi4lite.wready),
.bresp(chip_name_ambaaxi4lite.bresp),
.bvalid(chip_name_ambaaxi4lite.bvalid),
.bready(chip_name_ambaaxi4lite.bready),
.arvalid(chip_name_ambaaxi4lite.arvalid),
.arready(chip_name_ambaaxi4lite.arready),
.arprot(chip_name_ambaaxi4lite.arprot),
.araddr(chip_name_ambaaxi4lite.araddr),
.rdata(chip_name_ambaaxi4lite.rdata),
.rresp(chip_name_ambaaxi4lite.rresp),
.rvalid(chip_name_ambaaxi4lite.rvalid),
.rready(chip_name_ambaaxi4lite.rready)

);





  bit clk;
  assign chip_name_ambaaxi4lite.aclk = clk;
  assign chip_name_hw.clk = clk;
  always
    #5 clk = ~clk;

  initial
    begin
      clk = 1'b0;
      uvm_config_db #(virtual ambaaxi4lite_if)::set(null,"uvm_test_top*","AMBAAXI4LITE_IF",chip_name_ambaaxi4lite);
      uvm_config_db #(virtual chip_name_hw_if)::set(null,"uvm_test_top*","chip_name_hif",chip_name_hw);
      run_test("chip_name_test");
    end

endmodule 