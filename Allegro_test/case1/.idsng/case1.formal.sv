//Agnisys, Inc. ***** Copyright 2018 All Rights Reserved. *****
//
//*** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ***
// created by        :
// generated by      : Admin
// generated from    : C:\Users\Admin\Documents\GitHub\git_test\Allegro_test\case1\case1.idsng
// IDesignSpec rev   : idsbatch v4.16.26.2

//*** This code is generated with following settings ***
// Reg Width                  : 32
// Address Unit               : 8
// C++ Types int              : hwint
// Bus Type                   : AXI
// BigEndian                  : false
// LittleEndian               : false
// Dist. Decode and Readback  : false
//---------------------------------------------------------------------------------------------------------------

module chip_name_ids_assert(
    
    block1_idsreg1_wr_valid,
    
    block1_idsreg1_rd_valid,
    block1_idsreg1_fld_q,
    block1_idsreg1_fld_in,
    block1_idsreg1_fld_r,
    block1_idsreg1_fld_in_enb,
    
    
    block1_idsreggroup1_reg1_wr_valid,
    
    block1_idsreggroup1_reg1_rd_valid,
    block1_idsreggroup1_reg1_fld_q,
    block1_idsreggroup1_reg1_fld_in,
    block1_idsreggroup1_reg1_fld_r,
    block1_idsreggroup1_reg1_fld_in_enb,
    
    
    block1_idsreggroup1_reg2_wr_valid,
    
    block1_idsreggroup1_reg2_rd_valid,
    block1_idsreggroup1_reg2_fld1_q,
    block1_idsreggroup1_reg2_fld1_in,
    block1_idsreggroup1_reg2_fld1_r,
    block1_idsreggroup1_reg2_fld1_in_enb,
    
    
    block2_idsreggroup1_reg1_wr_valid,
    
    block2_idsreggroup1_reg1_rd_valid,
    block2_idsreggroup1_reg1_fld_q,
    block2_idsreggroup1_reg1_fld_in,
    block2_idsreggroup1_reg1_fld_r,
    block2_idsreggroup1_reg1_fld_in_enb,
    
    
    block2_idsreggroup1_reg2_wr_valid,
    
    block2_idsreggroup1_reg2_rd_valid,
    block2_idsreggroup1_reg2_fld1_q,
    block2_idsreggroup1_reg2_fld1_in,
    block2_idsreggroup1_reg2_fld1_r,
    block2_idsreggroup1_reg2_fld1_in_enb,
    
    
    block2_idsref_name_reg1_wr_valid,
    
    block2_idsref_name_reg1_rd_valid,
    block2_idsref_name_reg1_fld_q,
    block2_idsref_name_reg1_fld_in,
    block2_idsref_name_reg1_fld_r,
    block2_idsref_name_reg1_fld_in_enb,
    
    
    block2_idsref_name_ref_name_reggroup1_reg1_wr_valid,
    
    block2_idsref_name_ref_name_reggroup1_reg1_rd_valid,
    block2_idsref_name_ref_name_reggroup1_reg1_fld_q,
    block2_idsref_name_ref_name_reggroup1_reg1_fld_in,
    block2_idsref_name_ref_name_reggroup1_reg1_fld_r,
    block2_idsref_name_ref_name_reggroup1_reg1_fld_in_enb,
    
    
    block2_idsref_name_ref_name_reggroup1_reg2_wr_valid,
    
    block2_idsref_name_ref_name_reggroup1_reg2_rd_valid,
    block2_idsref_name_ref_name_reggroup1_reg2_fld1_q,
    block2_idsref_name_ref_name_reggroup1_reg2_fld1_in,
    block2_idsref_name_ref_name_reggroup1_reg2_fld1_r,
    block2_idsref_name_ref_name_reggroup1_reg2_fld1_in_enb,
    
    
    
    //AXI signals
    aclk,   // Bus clock
    aresetn,   // Reset
    awaddr,   // Write address
    awvalid,   // Write address valid : This signal indicates that write address is valid
    awready,   // Write address ready : This signal indicates that the slave is ready to accept an address
    awprot,   // Write Protection Type
    wdata,   // Write data
    wvalid,   // Write valid         : This signal indicates that valid write data and strobes are available
    wready,   // Write ready         : This signal indicates that the slave can accept the write data
    wstrb,   // Write Strobes
    bresp,   // Write Response
    bready,   // Response Ready
    bvalid,   // Response valid
    araddr,   // Read  address
    arvalid,   // Read address valid  : This signal indicates that the read address is valid and will remain stable until ARREADY is high
    arready,   // Read address ready  : This signal indicates that the slave is ready to accept an address
    arprot,   // Read Protection Type
    rdata,   // Read data
    rvalid,   // Read valid          : This signal indicates that the required read data is available and the read transfer can complete
    rready,   // Read ready          : This signal indicates that the master can accept the read data
    rresp   // Read Response
    );
    
    
    //  PARAMETERS
    parameter bus_width  = 32;
    
    parameter block1_ids_offset = 'h0;
    
    parameter block2_ids_offset = 'hC;
    parameter addr_width = 5;
    
    
    
    
    
    parameter chip_name_address_width = addr_width;
    
    //-----------------------------------------------------
    // REGISTER : REG1 SIGNALS
    
    
    input block1_idsreg1_wr_valid;
    
    input block1_idsreg1_rd_valid;
    
    
    // HW WRITE-ABLE SIGNAL FOR EACH FIELD
    input   block1_idsreg1_fld_in_enb ;      // FIELD : FLD
    
    // BUFFER SIGNAL FOR EACH FIELD
    input  [31 : 0] block1_idsreg1_fld_q ;      // FIELD : FLD
    
    // READ DATA SIGNAL FOR EACH FIELD
    input  [31 : 0] block1_idsreg1_fld_r ;      // FIELD : FLD
    
    // HW WRITE DATA SIGNAL FOR EACH FIELD
    input   [31 : 0] block1_idsreg1_fld_in ;      // FIELD : FLD
    
    //-----------------------------------------------------
    
    
    //-----------------------------------------------------
    // REGISTER : REG1 SIGNALS
    
    
    input block1_idsreggroup1_reg1_wr_valid;
    
    input block1_idsreggroup1_reg1_rd_valid;
    
    
    // HW WRITE-ABLE SIGNAL FOR EACH FIELD
    input   block1_idsreggroup1_reg1_fld_in_enb ;      // FIELD : FLD
    
    // BUFFER SIGNAL FOR EACH FIELD
    input  [31 : 0] block1_idsreggroup1_reg1_fld_q ;      // FIELD : FLD
    
    // READ DATA SIGNAL FOR EACH FIELD
    input  [31 : 0] block1_idsreggroup1_reg1_fld_r ;      // FIELD : FLD
    
    // HW WRITE DATA SIGNAL FOR EACH FIELD
    input   [31 : 0] block1_idsreggroup1_reg1_fld_in ;      // FIELD : FLD
    
    //-----------------------------------------------------
    
    
    //-----------------------------------------------------
    // REGISTER : REG2 SIGNALS
    
    
    input block1_idsreggroup1_reg2_wr_valid;
    
    input block1_idsreggroup1_reg2_rd_valid;
    
    
    // HW WRITE-ABLE SIGNAL FOR EACH FIELD
    input   block1_idsreggroup1_reg2_fld1_in_enb ;      // FIELD : FLD1
    
    // BUFFER SIGNAL FOR EACH FIELD
    input  [31 : 0] block1_idsreggroup1_reg2_fld1_q ;      // FIELD : FLD1
    
    // READ DATA SIGNAL FOR EACH FIELD
    input  [31 : 0] block1_idsreggroup1_reg2_fld1_r ;      // FIELD : FLD1
    
    // HW WRITE DATA SIGNAL FOR EACH FIELD
    input   [31 : 0] block1_idsreggroup1_reg2_fld1_in ;      // FIELD : FLD1
    
    //-----------------------------------------------------
    
    
    
    //-----------------------------------------------------
    // REGISTER : REG1 SIGNALS
    
    
    input block2_idsreggroup1_reg1_wr_valid;
    
    input block2_idsreggroup1_reg1_rd_valid;
    
    
    // HW WRITE-ABLE SIGNAL FOR EACH FIELD
    input   block2_idsreggroup1_reg1_fld_in_enb ;      // FIELD : FLD
    
    // BUFFER SIGNAL FOR EACH FIELD
    input  [31 : 0] block2_idsreggroup1_reg1_fld_q ;      // FIELD : FLD
    
    // READ DATA SIGNAL FOR EACH FIELD
    input  [31 : 0] block2_idsreggroup1_reg1_fld_r ;      // FIELD : FLD
    
    // HW WRITE DATA SIGNAL FOR EACH FIELD
    input   [31 : 0] block2_idsreggroup1_reg1_fld_in ;      // FIELD : FLD
    
    //-----------------------------------------------------
    
    
    //-----------------------------------------------------
    // REGISTER : REG2 SIGNALS
    
    
    input block2_idsreggroup1_reg2_wr_valid;
    
    input block2_idsreggroup1_reg2_rd_valid;
    
    
    // HW WRITE-ABLE SIGNAL FOR EACH FIELD
    input   block2_idsreggroup1_reg2_fld1_in_enb ;      // FIELD : FLD1
    
    // BUFFER SIGNAL FOR EACH FIELD
    input  [31 : 0] block2_idsreggroup1_reg2_fld1_q ;      // FIELD : FLD1
    
    // READ DATA SIGNAL FOR EACH FIELD
    input  [31 : 0] block2_idsreggroup1_reg2_fld1_r ;      // FIELD : FLD1
    
    // HW WRITE DATA SIGNAL FOR EACH FIELD
    input   [31 : 0] block2_idsreggroup1_reg2_fld1_in ;      // FIELD : FLD1
    
    //-----------------------------------------------------
    
    
    //-----------------------------------------------------
    // REGISTER : REG1 SIGNALS
    
    
    input block2_idsref_name_reg1_wr_valid;
    
    input block2_idsref_name_reg1_rd_valid;
    
    
    // HW WRITE-ABLE SIGNAL FOR EACH FIELD
    input   block2_idsref_name_reg1_fld_in_enb ;      // FIELD : FLD
    
    // BUFFER SIGNAL FOR EACH FIELD
    input  [31 : 0] block2_idsref_name_reg1_fld_q ;      // FIELD : FLD
    
    // READ DATA SIGNAL FOR EACH FIELD
    input  [31 : 0] block2_idsref_name_reg1_fld_r ;      // FIELD : FLD
    
    // HW WRITE DATA SIGNAL FOR EACH FIELD
    input   [31 : 0] block2_idsref_name_reg1_fld_in ;      // FIELD : FLD
    
    //-----------------------------------------------------
    
    
    //-----------------------------------------------------
    // REGISTER : REG1 SIGNALS
    
    
    input block2_idsref_name_ref_name_reggroup1_reg1_wr_valid;
    
    input block2_idsref_name_ref_name_reggroup1_reg1_rd_valid;
    
    
    // HW WRITE-ABLE SIGNAL FOR EACH FIELD
    input   block2_idsref_name_ref_name_reggroup1_reg1_fld_in_enb ;      // FIELD : FLD
    
    // BUFFER SIGNAL FOR EACH FIELD
    input  [31 : 0] block2_idsref_name_ref_name_reggroup1_reg1_fld_q ;      // FIELD : FLD
    
    // READ DATA SIGNAL FOR EACH FIELD
    input  [31 : 0] block2_idsref_name_ref_name_reggroup1_reg1_fld_r ;      // FIELD : FLD
    
    // HW WRITE DATA SIGNAL FOR EACH FIELD
    input   [31 : 0] block2_idsref_name_ref_name_reggroup1_reg1_fld_in ;      // FIELD : FLD
    
    //-----------------------------------------------------
    
    
    //-----------------------------------------------------
    // REGISTER : REG2 SIGNALS
    
    
    input block2_idsref_name_ref_name_reggroup1_reg2_wr_valid;
    
    input block2_idsref_name_ref_name_reggroup1_reg2_rd_valid;
    
    
    // HW WRITE-ABLE SIGNAL FOR EACH FIELD
    input   block2_idsref_name_ref_name_reggroup1_reg2_fld1_in_enb ;      // FIELD : FLD1
    
    // BUFFER SIGNAL FOR EACH FIELD
    input  [31 : 0] block2_idsref_name_ref_name_reggroup1_reg2_fld1_q ;      // FIELD : FLD1
    
    // READ DATA SIGNAL FOR EACH FIELD
    input  [31 : 0] block2_idsref_name_ref_name_reggroup1_reg2_fld1_r ;      // FIELD : FLD1
    
    // HW WRITE DATA SIGNAL FOR EACH FIELD
    input   [31 : 0] block2_idsref_name_ref_name_reggroup1_reg2_fld1_in ;      // FIELD : FLD1
    
    //-----------------------------------------------------
    
    
    
    input aclk;
    input aresetn;
    input [addr_width-1 : 0] awaddr;
    input awvalid;
    input awready;
    input [2 : 0] awprot;
    input [bus_width-1 : 0] wdata;
    input wvalid;
    input wready;
    input [bus_width/8-1 : 0] wstrb;
    input [1 : 0] bresp;
    input bready;
    input bvalid;
    input [addr_width-1 : 0] araddr;
    input arvalid;
    input arready;
    input [2 : 0] arprot;
    input [bus_width-1 : 0] rdata;
    input rvalid;
    input rready;
    input [1 : 0] rresp;
    
    
    
    
    // Sequences
    sequence axi_read(bit [addr_width-1 : 0] addr);
    (araddr == addr ##0 arvalid ##0 arready  ##1 rvalid [*0:$] ##0 rready);
    endsequence
    sequence axi_write(bit [addr_width-1 : 0] addr ,bit [3:0] wstrbin);
    ( awaddr == addr ##0 awready  ##0 awvalid ##0 wready ##0 wvalid ##0 ##0 (wstrb == wstrbin) ##0 bready == 1 ##0 $stable(wdata) );
    endsequence
    
    
    // Assertion
    
    //------------------ FIELD ACCESS - block1_idsreg1_fld - is rw------------------------
    
    property block1_idsreg1_fld_read_check;
    @(posedge aclk )disable iff (!aresetn)
    axi_read( 'h0 )
    |->
    ##2 (rdata[31:0] == $past( block1_idsreg1_fld_q,1 )) ;
    
    endproperty
    
    //------------------ FIELD ACCESS - block1_idsreg1_fld - is rw------------------------
    
    property block1_idsreg1_fld_write_check;
    @(posedge aclk )disable iff (!aresetn | block1_idsreg1_fld_in_enb)
    axi_write( 'h0,3'b010 )
    |->
    ##2 (block1_idsreg1_fld_q == $past(wdata,2)  ##0 $past(bresp,1) == 00 ##0 $past(bvalid,1) );
    
    endproperty
    
    property block1_idsreg1_fld_hw_write_check;
    @(posedge aclk) disable iff (!(aresetn))
    ( awaddr != 'h0 && block1_idsreg1_fld_in_enb )
    |=>
    ( block1_idsreg1_fld_q == $past(block1_idsreg1_fld_in,1) );
    
    endproperty
    
    property block1_idsreg1_fld_hw_read_check ;
    @(posedge aclk) disable iff (!aresetn)
    
    ( block1_idsreg1_fld_q == block1_idsreg1_fld_r );
    
    endproperty
    
    //------------------ FIELD ACCESS - block1_idsreggroup1_reg1_fld - is rw------------------------
    
    property block1_idsreggroup1_reg1_fld_read_check;
    @(posedge aclk )disable iff (!aresetn)
    axi_read( 'h04 )
    |->
    ##2 (rdata[31:0] == $past( block1_idsreggroup1_reg1_fld_q,1 )) ;
    
    endproperty
    
    //------------------ FIELD ACCESS - block1_idsreggroup1_reg1_fld - is rw------------------------
    
    property block1_idsreggroup1_reg1_fld_write_check;
    @(posedge aclk )disable iff (!aresetn | block1_idsreggroup1_reg1_fld_in_enb)
    axi_write( 'h04,3'b010 )
    |->
    ##2 (block1_idsreggroup1_reg1_fld_q == $past(wdata,2)  ##0 $past(bresp,1) == 00 ##0 $past(bvalid,1) );
    
    endproperty
    
    property block1_idsreggroup1_reg1_fld_hw_write_check;
    @(posedge aclk) disable iff (!(aresetn))
    ( awaddr != 'h04 && block1_idsreggroup1_reg1_fld_in_enb )
    |=>
    ( block1_idsreggroup1_reg1_fld_q == $past(block1_idsreggroup1_reg1_fld_in,1) );
    
    endproperty
    
    property block1_idsreggroup1_reg1_fld_hw_read_check ;
    @(posedge aclk) disable iff (!aresetn)
    
    ( block1_idsreggroup1_reg1_fld_q == block1_idsreggroup1_reg1_fld_r );
    
    endproperty
    
    //------------------ FIELD ACCESS - block1_idsreggroup1_reg2_fld1 - is rw------------------------
    
    property block1_idsreggroup1_reg2_fld1_read_check;
    @(posedge aclk )disable iff (!aresetn)
    axi_read( 'h08 )
    |->
    ##2 (rdata[31:0] == $past( block1_idsreggroup1_reg2_fld1_q,1 )) ;
    
    endproperty
    
    //------------------ FIELD ACCESS - block1_idsreggroup1_reg2_fld1 - is rw------------------------
    
    property block1_idsreggroup1_reg2_fld1_write_check;
    @(posedge aclk )disable iff (!aresetn | block1_idsreggroup1_reg2_fld1_in_enb)
    axi_write( 'h08,3'b010 )
    |->
    ##2 (block1_idsreggroup1_reg2_fld1_q == $past(wdata,2)  ##0 $past(bresp,1) == 00 ##0 $past(bvalid,1) );
    
    endproperty
    
    property block1_idsreggroup1_reg2_fld1_hw_write_check;
    @(posedge aclk) disable iff (!(aresetn))
    ( awaddr != 'h08 && block1_idsreggroup1_reg2_fld1_in_enb )
    |=>
    ( block1_idsreggroup1_reg2_fld1_q == $past(block1_idsreggroup1_reg2_fld1_in,1) );
    
    endproperty
    
    property block1_idsreggroup1_reg2_fld1_hw_read_check ;
    @(posedge aclk) disable iff (!aresetn)
    
    ( block1_idsreggroup1_reg2_fld1_q == block1_idsreggroup1_reg2_fld1_r );
    
    endproperty
    
    property chip_name_idsblock1_reset_low_posedge_sync_check;
    @(posedge aclk)
    (aresetn==0)
    |=>
    (block1_idsreg1_fld_q == 32'd0 && block1_idsreggroup1_reg1_fld_q == 32'd0 && block1_idsreggroup1_reg2_fld1_q == 32'd0);
    endproperty
    
    
    //------------------ FIELD ACCESS - block2_idsreggroup1_reg1_fld - is rw------------------------
    
    property block2_idsreggroup1_reg1_fld_read_check;
    @(posedge aclk )disable iff (!aresetn)
    axi_read( 'h0C )
    |->
    ##2 (rdata[31:0] == $past( block2_idsreggroup1_reg1_fld_q,1 )) ;
    
    endproperty
    
    //------------------ FIELD ACCESS - block2_idsreggroup1_reg1_fld - is rw------------------------
    
    property block2_idsreggroup1_reg1_fld_write_check;
    @(posedge aclk )disable iff (!aresetn | block2_idsreggroup1_reg1_fld_in_enb)
    axi_write( 'h0C,3'b010 )
    |->
    ##2 (block2_idsreggroup1_reg1_fld_q == $past(wdata,2)  ##0 $past(bresp,1) == 00 ##0 $past(bvalid,1) );
    
    endproperty
    
    property block2_idsreggroup1_reg1_fld_hw_write_check;
    @(posedge aclk) disable iff (!(aresetn))
    ( awaddr != 'h0C && block2_idsreggroup1_reg1_fld_in_enb )
    |=>
    ( block2_idsreggroup1_reg1_fld_q == $past(block2_idsreggroup1_reg1_fld_in,1) );
    
    endproperty
    
    property block2_idsreggroup1_reg1_fld_hw_read_check ;
    @(posedge aclk) disable iff (!aresetn)
    
    ( block2_idsreggroup1_reg1_fld_q == block2_idsreggroup1_reg1_fld_r );
    
    endproperty
    
    //------------------ FIELD ACCESS - block2_idsreggroup1_reg2_fld1 - is rw------------------------
    
    property block2_idsreggroup1_reg2_fld1_read_check;
    @(posedge aclk )disable iff (!aresetn)
    axi_read( 'h010 )
    |->
    ##2 (rdata[31:0] == $past( block2_idsreggroup1_reg2_fld1_q,1 )) ;
    
    endproperty
    
    //------------------ FIELD ACCESS - block2_idsreggroup1_reg2_fld1 - is rw------------------------
    
    property block2_idsreggroup1_reg2_fld1_write_check;
    @(posedge aclk )disable iff (!aresetn | block2_idsreggroup1_reg2_fld1_in_enb)
    axi_write( 'h010,3'b010 )
    |->
    ##2 (block2_idsreggroup1_reg2_fld1_q == $past(wdata,2)  ##0 $past(bresp,1) == 00 ##0 $past(bvalid,1) );
    
    endproperty
    
    property block2_idsreggroup1_reg2_fld1_hw_write_check;
    @(posedge aclk) disable iff (!(aresetn))
    ( awaddr != 'h010 && block2_idsreggroup1_reg2_fld1_in_enb )
    |=>
    ( block2_idsreggroup1_reg2_fld1_q == $past(block2_idsreggroup1_reg2_fld1_in,1) );
    
    endproperty
    
    property block2_idsreggroup1_reg2_fld1_hw_read_check ;
    @(posedge aclk) disable iff (!aresetn)
    
    ( block2_idsreggroup1_reg2_fld1_q == block2_idsreggroup1_reg2_fld1_r );
    
    endproperty
    
    //------------------ FIELD ACCESS - block2_idsref_name_reg1_fld - is rw------------------------
    
    property block2_idsref_name_reg1_fld_read_check;
    @(posedge aclk )disable iff (!aresetn)
    axi_read( 'h014 )
    |->
    ##2 (rdata[31:0] == $past( block2_idsref_name_reg1_fld_q,1 )) ;
    
    endproperty
    
    //------------------ FIELD ACCESS - block2_idsref_name_reg1_fld - is rw------------------------
    
    property block2_idsref_name_reg1_fld_write_check;
    @(posedge aclk )disable iff (!aresetn | block2_idsref_name_reg1_fld_in_enb)
    axi_write( 'h014,3'b010 )
    |->
    ##2 (block2_idsref_name_reg1_fld_q == $past(wdata,2)  ##0 $past(bresp,1) == 00 ##0 $past(bvalid,1) );
    
    endproperty
    
    property block2_idsref_name_reg1_fld_hw_write_check;
    @(posedge aclk) disable iff (!(aresetn))
    ( awaddr != 'h014 && block2_idsref_name_reg1_fld_in_enb )
    |=>
    ( block2_idsref_name_reg1_fld_q == $past(block2_idsref_name_reg1_fld_in,1) );
    
    endproperty
    
    property block2_idsref_name_reg1_fld_hw_read_check ;
    @(posedge aclk) disable iff (!aresetn)
    
    ( block2_idsref_name_reg1_fld_q == block2_idsref_name_reg1_fld_r );
    
    endproperty
    
    //------------------ FIELD ACCESS - block2_idsref_name_ref_name_reggroup1_reg1_fld - is rw------------------------
    
    property block2_idsref_name_ref_name_reggroup1_reg1_fld_read_check;
    @(posedge aclk )disable iff (!aresetn)
    axi_read( 'h018 )
    |->
    ##2 (rdata[31:0] == $past( block2_idsref_name_ref_name_reggroup1_reg1_fld_q,1 )) ;
    
    endproperty
    
    //------------------ FIELD ACCESS - block2_idsref_name_ref_name_reggroup1_reg1_fld - is rw------------------------
    
    property block2_idsref_name_ref_name_reggroup1_reg1_fld_write_check;
    @(posedge aclk )disable iff (!aresetn | block2_idsref_name_ref_name_reggroup1_reg1_fld_in_enb)
    axi_write( 'h018,3'b010 )
    |->
    ##2 (block2_idsref_name_ref_name_reggroup1_reg1_fld_q == $past(wdata,2)  ##0 $past(bresp,1) == 00 ##0 $past(bvalid,1) );
    
    endproperty
    
    property block2_idsref_name_ref_name_reggroup1_reg1_fld_hw_write_check;
    @(posedge aclk) disable iff (!(aresetn))
    ( awaddr != 'h018 && block2_idsref_name_ref_name_reggroup1_reg1_fld_in_enb )
    |=>
    ( block2_idsref_name_ref_name_reggroup1_reg1_fld_q == $past(block2_idsref_name_ref_name_reggroup1_reg1_fld_in,1) );
    
    endproperty
    
    property block2_idsref_name_ref_name_reggroup1_reg1_fld_hw_read_check ;
    @(posedge aclk) disable iff (!aresetn)
    
    ( block2_idsref_name_ref_name_reggroup1_reg1_fld_q == block2_idsref_name_ref_name_reggroup1_reg1_fld_r );
    
    endproperty
    
    //------------------ FIELD ACCESS - block2_idsref_name_ref_name_reggroup1_reg2_fld1 - is rw------------------------
    
    property block2_idsref_name_ref_name_reggroup1_reg2_fld1_read_check;
    @(posedge aclk )disable iff (!aresetn)
    axi_read( 'h01C )
    |->
    ##2 (rdata[31:0] == $past( block2_idsref_name_ref_name_reggroup1_reg2_fld1_q,1 )) ;
    
    endproperty
    
    //------------------ FIELD ACCESS - block2_idsref_name_ref_name_reggroup1_reg2_fld1 - is rw------------------------
    
    property block2_idsref_name_ref_name_reggroup1_reg2_fld1_write_check;
    @(posedge aclk )disable iff (!aresetn | block2_idsref_name_ref_name_reggroup1_reg2_fld1_in_enb)
    axi_write( 'h01C,3'b010 )
    |->
    ##2 (block2_idsref_name_ref_name_reggroup1_reg2_fld1_q == $past(wdata,2)  ##0 $past(bresp,1) == 00 ##0 $past(bvalid,1) );
    
    endproperty
    
    property block2_idsref_name_ref_name_reggroup1_reg2_fld1_hw_write_check;
    @(posedge aclk) disable iff (!(aresetn))
    ( awaddr != 'h01C && block2_idsref_name_ref_name_reggroup1_reg2_fld1_in_enb )
    |=>
    ( block2_idsref_name_ref_name_reggroup1_reg2_fld1_q == $past(block2_idsref_name_ref_name_reggroup1_reg2_fld1_in,1) );
    
    endproperty
    
    property block2_idsref_name_ref_name_reggroup1_reg2_fld1_hw_read_check ;
    @(posedge aclk) disable iff (!aresetn)
    
    ( block2_idsref_name_ref_name_reggroup1_reg2_fld1_q == block2_idsref_name_ref_name_reggroup1_reg2_fld1_r );
    
    endproperty
    
    property chip_name_idsblock2_reset_low_posedge_sync_check;
    @(posedge aclk)
    (aresetn==0)
    |=>
    (block2_idsreggroup1_reg1_fld_q == 32'd0 && block2_idsreggroup1_reg2_fld1_q == 32'd0 && block2_idsref_name_reg1_fld_q == 32'd0 && block2_idsref_name_ref_name_reggroup1_reg1_fld_q == 32'd0 && block2_idsref_name_ref_name_reggroup1_reg2_fld1_q == 32'd0);
    endproperty
    
    block1_idsreggroup1_reg1_fld_hw_write_check_assert : assert property(block1_idsreggroup1_reg1_fld_hw_write_check);
    block1_idsreggroup1_reg1_fld_hw_read_check_assert : assert property(block1_idsreggroup1_reg1_fld_hw_read_check);
    block1_idsreggroup1_reg1_fld_read_check_assert : assert property (block1_idsreggroup1_reg1_fld_read_check);
    block1_idsreggroup1_reg1_fld_write_check_assert : assert property(block1_idsreggroup1_reg1_fld_write_check);
    block1_idsreggroup1_reg2_fld1_hw_write_check_assert : assert property(block1_idsreggroup1_reg2_fld1_hw_write_check);
    block1_idsreggroup1_reg2_fld1_hw_read_check_assert : assert property(block1_idsreggroup1_reg2_fld1_hw_read_check);
    block1_idsreggroup1_reg2_fld1_read_check_assert : assert property (block1_idsreggroup1_reg2_fld1_read_check);
    block1_idsreggroup1_reg2_fld1_write_check_assert : assert property(block1_idsreggroup1_reg2_fld1_write_check);
    block1_idsreg1_fld_hw_write_check_assert : assert property(block1_idsreg1_fld_hw_write_check);
    block1_idsreg1_fld_hw_read_check_assert : assert property(block1_idsreg1_fld_hw_read_check);
    block1_idsreg1_fld_read_check_assert : assert property (block1_idsreg1_fld_read_check);
    block1_idsreg1_fld_write_check_assert : assert property(block1_idsreg1_fld_write_check);
    chip_name_idsblock1_reset_low_posedge_sync_check_assert :  assert property (chip_name_idsblock1_reset_low_posedge_sync_check) ;
    block2_idsreggroup1_reg1_fld_hw_write_check_assert : assert property(block2_idsreggroup1_reg1_fld_hw_write_check);
    block2_idsreggroup1_reg1_fld_hw_read_check_assert : assert property(block2_idsreggroup1_reg1_fld_hw_read_check);
    block2_idsreggroup1_reg1_fld_read_check_assert : assert property (block2_idsreggroup1_reg1_fld_read_check);
    block2_idsreggroup1_reg1_fld_write_check_assert : assert property(block2_idsreggroup1_reg1_fld_write_check);
    block2_idsreggroup1_reg2_fld1_hw_write_check_assert : assert property(block2_idsreggroup1_reg2_fld1_hw_write_check);
    block2_idsreggroup1_reg2_fld1_hw_read_check_assert : assert property(block2_idsreggroup1_reg2_fld1_hw_read_check);
    block2_idsreggroup1_reg2_fld1_read_check_assert : assert property (block2_idsreggroup1_reg2_fld1_read_check);
    block2_idsreggroup1_reg2_fld1_write_check_assert : assert property(block2_idsreggroup1_reg2_fld1_write_check);
    block2_idsref_name_ref_name_reggroup1_reg1_fld_hw_write_check_assert : assert property(block2_idsref_name_ref_name_reggroup1_reg1_fld_hw_write_check);
    block2_idsref_name_ref_name_reggroup1_reg1_fld_hw_read_check_assert : assert property(block2_idsref_name_ref_name_reggroup1_reg1_fld_hw_read_check);
    block2_idsref_name_ref_name_reggroup1_reg1_fld_read_check_assert : assert property (block2_idsref_name_ref_name_reggroup1_reg1_fld_read_check);
    block2_idsref_name_ref_name_reggroup1_reg1_fld_write_check_assert : assert property(block2_idsref_name_ref_name_reggroup1_reg1_fld_write_check);
    block2_idsref_name_ref_name_reggroup1_reg2_fld1_hw_write_check_assert : assert property(block2_idsref_name_ref_name_reggroup1_reg2_fld1_hw_write_check);
    block2_idsref_name_ref_name_reggroup1_reg2_fld1_hw_read_check_assert : assert property(block2_idsref_name_ref_name_reggroup1_reg2_fld1_hw_read_check);
    block2_idsref_name_ref_name_reggroup1_reg2_fld1_read_check_assert : assert property (block2_idsref_name_ref_name_reggroup1_reg2_fld1_read_check);
    block2_idsref_name_ref_name_reggroup1_reg2_fld1_write_check_assert : assert property(block2_idsref_name_ref_name_reggroup1_reg2_fld1_write_check);
    block2_idsref_name_reg1_fld_hw_write_check_assert : assert property(block2_idsref_name_reg1_fld_hw_write_check);
    block2_idsref_name_reg1_fld_hw_read_check_assert : assert property(block2_idsref_name_reg1_fld_hw_read_check);
    block2_idsref_name_reg1_fld_read_check_assert : assert property (block2_idsref_name_reg1_fld_read_check);
    block2_idsref_name_reg1_fld_write_check_assert : assert property(block2_idsref_name_reg1_fld_write_check);
    chip_name_idsblock2_reset_low_posedge_sync_check_assert :  assert property (chip_name_idsblock2_reset_low_posedge_sync_check) ;
    
    
    
    
endmodule
