//Agnisys, Inc. ***** Copyright 2018 All Rights Reserved. *****
//
//*** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ***
// created by        : 
// generated by      : Admin
// generated from    : C:\Users\Admin\Documents\GitHub\git_test\Allegro_test\case1\case1.idsng
// IDesignSpec rev   : idsbatch v4.16.26.2

//*** This code is generated with following settings ***
// Reg Width                  : 32
// Address Unit               : 8
// C++ Types int              : hwint
// Bus Type                   : AXI
// BigEndian                  : false
// LittleEndian               : false
// Dist. Decode and Readback  : false
//--------------------------------------------------------------------------------------------------------------- 
 //chip-name : chip_name
      
package chip_name_register_pkg;
import ovm_pkg::*;
import ovm_register_pkg::*;  
`include "ovm_register_macros.svh"   
      
    
// block-name: block1
      
      
          
 typedef struct packed {
   bit [31:0] fld; 
 } block1_reg1_t;      
  
      
         
         
          
 typedef struct packed {
   bit [31:0] fld; 
 } block1_reggroup1_reg1_t;      
  
         
          
 typedef struct packed {
   bit [31:0] fld1; 
 } block1_reggroup1_reg2_t;      
  
      
     
 class block1_reg1 extends ovm_register #(block1_reg1_t);
        
   
   covergroup block1_reg1_cg;
     fld : coverpoint data.fld; 
   endgroup 
   
   function void sample();
     block1_reg1_cg.sample();
   endfunction
   
   `ovm_register_begin_fields
     `ovm_register_field(fld)  
       
   `ovm_register_end_fields   
  
   
   function new(string name, ovm_named_object p);
     super.new(name, p);
     block1_reg1_cg = new();
     add_field("fld", 0, "RW");
     
     UNPREDICTABLEMASK = 'b00000000000000000000000000000000;
   endfunction
 endclass
      
 class block1_reggroup1_reg1 extends ovm_register #(block1_reggroup1_reg1_t);
        
   
   covergroup block1_reggroup1_reg1_cg;
     fld : coverpoint data.fld; 
   endgroup 
   
   function void sample();
     block1_reggroup1_reg1_cg.sample();
   endfunction
   
   `ovm_register_begin_fields
     `ovm_register_field(fld)  
       
   `ovm_register_end_fields   
  
   
   function new(string name, ovm_named_object p);
     super.new(name, p);
     block1_reggroup1_reg1_cg = new();
     add_field("fld", 0, "RW");
     
     UNPREDICTABLEMASK = 'b00000000000000000000000000000000;
   endfunction
 endclass
      
 class block1_reggroup1_reg2 extends ovm_register #(block1_reggroup1_reg2_t);
        
   
   covergroup block1_reggroup1_reg2_cg;
     fld1 : coverpoint data.fld1; 
   endgroup 
   
   function void sample();
     block1_reggroup1_reg2_cg.sample();
   endfunction
   
   `ovm_register_begin_fields
     `ovm_register_field(fld1)  
       
   `ovm_register_end_fields   
  
   
   function new(string name, ovm_named_object p);
     super.new(name, p);
     block1_reggroup1_reg2_cg = new();
     add_field("fld1", 0, "RW");
     
     UNPREDICTABLEMASK = 'b00000000000000000000000000000000;
   endfunction
 endclass
    
class block1_register_file extends ovm_register_file;
    
block1_reg1                                                  block1_reg1_reg;
block1_reggroup1_reg1                                        block1_reggroup1_reg1_reg[1];
block1_reggroup1_reg2                                        block1_reggroup1_reg2_reg[1];

    // ----------------------
   function new(string name, ovm_named_object p);
     super.new(name, p);
     ovm_report_info("block1_register_file", "new()");
   // -----------------------
   // Construct the registers
   // -----------------------
 
    
           block1_reg1_reg  = new("block1_reg1",this);
           add_register(
                block1_reg1_reg.get_fullname(),
                'h0,block1_reg1_reg);
             
        foreach (block1_reggroup1_reg1_reg[reggroup1_i]) begin
            block1_reggroup1_reg1_reg[reggroup1_i] = new ($psprintf("block1_reggroup1_reg1[%0x]", reggroup1_i), this);
            add_register(
                block1_reggroup1_reg1_reg[reggroup1_i].get_fullname(),
                'h4 + 'h0,block1_reggroup1_reg1_reg[reggroup1_i]);   
        end
             
        foreach (block1_reggroup1_reg2_reg[reggroup1_i]) begin
            block1_reggroup1_reg2_reg[reggroup1_i] = new ($psprintf("block1_reggroup1_reg2[%0x]", reggroup1_i), this);
            add_register(
                block1_reggroup1_reg2_reg[reggroup1_i].get_fullname(),
                'h4 + 'h4,block1_reggroup1_reg2_reg[reggroup1_i]);   
        end
            
    endfunction
 endclass     
    
// block-name: block2
      
      
         
         
          
 typedef struct packed {
   bit [31:0] fld; 
 } block2_reggroup1_reg1_t;      
  
         
          
 typedef struct packed {
   bit [31:0] fld1; 
 } block2_reggroup1_reg2_t;      
  
      
      
         
         
         
          
 typedef struct packed {
   bit [31:0] fld; 
 } block2_ref_name_reg1_t;      
  
         
            
            
          
 typedef struct packed {
   bit [31:0] fld; 
 } block2_ref_name_ref_name_reggroup1_reg1_t;      
  
            
          
 typedef struct packed {
   bit [31:0] fld1; 
 } block2_ref_name_ref_name_reggroup1_reg2_t;      
  
         
      
     
 class block2_reggroup1_reg1 extends ovm_register #(block2_reggroup1_reg1_t);
        
   
   covergroup block2_reggroup1_reg1_cg;
     fld : coverpoint data.fld; 
   endgroup 
   
   function void sample();
     block2_reggroup1_reg1_cg.sample();
   endfunction
   
   `ovm_register_begin_fields
     `ovm_register_field(fld)  
       
   `ovm_register_end_fields   
  
   
   function new(string name, ovm_named_object p);
     super.new(name, p);
     block2_reggroup1_reg1_cg = new();
     add_field("fld", 0, "RW");
     
     UNPREDICTABLEMASK = 'b00000000000000000000000000000000;
   endfunction
 endclass
      
 class block2_reggroup1_reg2 extends ovm_register #(block2_reggroup1_reg2_t);
        
   
   covergroup block2_reggroup1_reg2_cg;
     fld1 : coverpoint data.fld1; 
   endgroup 
   
   function void sample();
     block2_reggroup1_reg2_cg.sample();
   endfunction
   
   `ovm_register_begin_fields
     `ovm_register_field(fld1)  
       
   `ovm_register_end_fields   
  
   
   function new(string name, ovm_named_object p);
     super.new(name, p);
     block2_reggroup1_reg2_cg = new();
     add_field("fld1", 0, "RW");
     
     UNPREDICTABLEMASK = 'b00000000000000000000000000000000;
   endfunction
 endclass
      
 class block2_ref_name_reg1 extends ovm_register #(block2_ref_name_reg1_t);
        
   
   covergroup block2_ref_name_reg1_cg;
     fld : coverpoint data.fld; 
   endgroup 
   
   function void sample();
     block2_ref_name_reg1_cg.sample();
   endfunction
   
   `ovm_register_begin_fields
     `ovm_register_field(fld)  
       
   `ovm_register_end_fields   
  
   
   function new(string name, ovm_named_object p);
     super.new(name, p);
     block2_ref_name_reg1_cg = new();
     add_field("fld", 0, "RW");
     
     UNPREDICTABLEMASK = 'b00000000000000000000000000000000;
   endfunction
 endclass
      
 class block2_ref_name_ref_name_reggroup1_reg1 extends ovm_register #(block2_ref_name_ref_name_reggroup1_reg1_t);
        
   
   covergroup block2_ref_name_ref_name_reggroup1_reg1_cg;
     fld : coverpoint data.fld; 
   endgroup 
   
   function void sample();
     block2_ref_name_ref_name_reggroup1_reg1_cg.sample();
   endfunction
   
   `ovm_register_begin_fields
     `ovm_register_field(fld)  
       
   `ovm_register_end_fields   
  
   
   function new(string name, ovm_named_object p);
     super.new(name, p);
     block2_ref_name_ref_name_reggroup1_reg1_cg = new();
     add_field("fld", 0, "RW");
     
     UNPREDICTABLEMASK = 'b00000000000000000000000000000000;
   endfunction
 endclass
      
 class block2_ref_name_ref_name_reggroup1_reg2 extends ovm_register #(block2_ref_name_ref_name_reggroup1_reg2_t);
        
   
   covergroup block2_ref_name_ref_name_reggroup1_reg2_cg;
     fld1 : coverpoint data.fld1; 
   endgroup 
   
   function void sample();
     block2_ref_name_ref_name_reggroup1_reg2_cg.sample();
   endfunction
   
   `ovm_register_begin_fields
     `ovm_register_field(fld1)  
       
   `ovm_register_end_fields   
  
   
   function new(string name, ovm_named_object p);
     super.new(name, p);
     block2_ref_name_ref_name_reggroup1_reg2_cg = new();
     add_field("fld1", 0, "RW");
     
     UNPREDICTABLEMASK = 'b00000000000000000000000000000000;
   endfunction
 endclass
    
class block2_register_file extends ovm_register_file;
    
block2_reggroup1_reg1                                        block2_reggroup1_reg1_reg[1];
block2_reggroup1_reg2                                        block2_reggroup1_reg2_reg[1];
block2_ref_name_reg1                                         block2_ref_name_reg1_reg[1];
block2_ref_name_ref_name_reggroup1_reg1                      block2_ref_name_ref_name_reggroup1_reg1_reg[1][1];
block2_ref_name_ref_name_reggroup1_reg2                      block2_ref_name_ref_name_reggroup1_reg2_reg[1][1];

    // ----------------------
   function new(string name, ovm_named_object p);
     super.new(name, p);
     ovm_report_info("block2_register_file", "new()");
   // -----------------------
   // Construct the registers
   // -----------------------
 
     
        foreach (block2_reggroup1_reg1_reg[reggroup1_i]) begin
            block2_reggroup1_reg1_reg[reggroup1_i] = new ($psprintf("block2_reggroup1_reg1[%0x]", reggroup1_i), this);
            add_register(
                block2_reggroup1_reg1_reg[reggroup1_i].get_fullname(),
                'h0 + 'h0,block2_reggroup1_reg1_reg[reggroup1_i]);   
        end
             
        foreach (block2_reggroup1_reg2_reg[reggroup1_i]) begin
            block2_reggroup1_reg2_reg[reggroup1_i] = new ($psprintf("block2_reggroup1_reg2[%0x]", reggroup1_i), this);
            add_register(
                block2_reggroup1_reg2_reg[reggroup1_i].get_fullname(),
                'h0 + 'h4,block2_reggroup1_reg2_reg[reggroup1_i]);   
        end
             
        foreach (block2_ref_name_reg1_reg[ref_name_i]) begin
            block2_ref_name_reg1_reg[ref_name_i] = new ($psprintf("block2_ref_name_reg1[%0x]", ref_name_i), this);
            add_register(
                block2_ref_name_reg1_reg[ref_name_i].get_fullname(),
                'h8 + 'h0,block2_ref_name_reg1_reg[ref_name_i]);   
        end
             
        foreach (block2_ref_name_ref_name_reggroup1_reg1_reg[ref_name_i, ref_name_ref_name_reggroup1_i]) begin
            block2_ref_name_ref_name_reggroup1_reg1_reg[ref_name_i][ref_name_ref_name_reggroup1_i] = new ($psprintf("block2_ref_name_ref_name_reggroup1_reg1[%0x][%0x]", ref_name_i, ref_name_ref_name_reggroup1_i), this);
            add_register(
                block2_ref_name_ref_name_reggroup1_reg1_reg[ref_name_i][ref_name_ref_name_reggroup1_i].get_fullname(),
                'h8 + 'h4 + 'h0,block2_ref_name_ref_name_reggroup1_reg1_reg[ref_name_i][ref_name_ref_name_reggroup1_i]);   
        end
             
        foreach (block2_ref_name_ref_name_reggroup1_reg2_reg[ref_name_i, ref_name_ref_name_reggroup1_i]) begin
            block2_ref_name_ref_name_reggroup1_reg2_reg[ref_name_i][ref_name_ref_name_reggroup1_i] = new ($psprintf("block2_ref_name_ref_name_reggroup1_reg2[%0x][%0x]", ref_name_i, ref_name_ref_name_reggroup1_i), this);
            add_register(
                block2_ref_name_ref_name_reggroup1_reg2_reg[ref_name_i][ref_name_ref_name_reggroup1_i].get_fullname(),
                'h8 + 'h4 + 'h4,block2_ref_name_ref_name_reggroup1_reg2_reg[ref_name_i][ref_name_ref_name_reggroup1_i]);   
        end
            
    endfunction
 endclass     

      
 // 
 // The actual register map for this system.
 //
class chip_name_register_map extends ovm_register_map;
   
block1_register_file block11;
   block2_register_file block22;
    
  function new(string name, ovm_named_object p);
    super.new(name, p);  
    ovm_report_info("chip_name_register_map", "new()");

      block11 = new("block11", this);
      block22 = new("block22", this);
      
    add_register_file(block11, 0);
    
    add_register_file(block22, 12);
    
  endfunction
endclass
    //
    // A class to automatically load a register map. 
    
  class register_map_auto_load;
    
    // Triggers factory registration of this default
    //  sequence. Can be overriden by the user using
    //  "default_auto_register_test".
      register_sequence_all_registers   #(ovm_register_transaction, 
      ovm_register_transaction) dummy;
      static bit loaded = build_register_map();
      
      static function bit build_register_map();
      
      chip_name_register_map register_map;
    
         register_map = new("register_map", null);    
         set_config_string("*","default_auto_register_test","register_sequence_all_registers#(REQ, RSP)");
         set_config_object("*","register_map", register_map, 0);
         return 1;
      endfunction
   endclass 
 endpackage   
 