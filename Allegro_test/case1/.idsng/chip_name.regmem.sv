//Agnisys, Inc. ***** Copyright 2018 All Rights Reserved. *****
//
//*** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ***
// created by        :
// generated by      : Admin
// generated from    : C:\Users\Admin\Documents\GitHub\git_test\Allegro_test\case1\case1.idsng
// IDesignSpec rev   : idsbatch v4.16.26.2

//*** This code is generated with following settings ***
// Reg Width                  : 32
// Address Unit               : 8
// C++ Types int              : hwint
// Bus Type                   : AXI
// BigEndian                  : false
// LittleEndian               : false
// Dist. Decode and Readback  : false
//---------------------------------------------------------------------------------------------------------------

`include "block1.regmem.sv"
`include "block2.regmem.sv"

/*----------------------------------------------------------------------
Class      : chip_name_block
-----------------------------------------------------------------------*/
`ifndef CLASS_chip_name_block
`define CLASS_chip_name_block
class chip_name_block extends uvm_reg_block;
    `uvm_object_utils(chip_name_block)

    rand block1_block block1;

    rand block2_block block2;

    local uvm_reg_addr_t m_offset;
    covergroup cg_addr;

        block1 : coverpoint m_offset
        {
            bins hit =  { ['h0 : 'hB] };
        }
        block2 : coverpoint m_offset
        {
            bins hit =  { ['hC : 'h1F] };
        }

    endgroup

    // Function : new
    function new(string name = "chip_name_block");
        super.new(name, build_coverage(UVM_CVR_ADDR_MAP));

        if (has_coverage(UVM_CVR_ADDR_MAP)) begin
            cg_addr = new();
        end
    endfunction

    // Function : build
    virtual function void build();
        //BLOCK1
        block1   =   block1_block::type_id::create("block1");
        block1.configure(this, "block1");
        block1.build();

        //BLOCK2
        block2   =   block2_block::type_id::create("block2");
        block2.configure(this, "block2");
        block2.build();

        //define default map and add reg/regfiles
        default_map= create_map("default_map", 'h0, 4, UVM_LITTLE_ENDIAN, 1);
        default_map.add_submap( block1.default_map, 'h0);
        default_map.add_submap( block2.default_map, 'hC);

        block1.clear_hdl_path();
        block1.add_hdl_path("block1_idsinst");
        block2.clear_hdl_path();
        block2.add_hdl_path("block2_idsinst");

        lock_model();
    endfunction

    protected virtual function void sample(uvm_reg_addr_t offset, bit is_read, uvm_reg_map map);
        if (get_coverage(UVM_CVR_ADDR_MAP))  begin

            m_offset  = offset;
            cg_addr.sample();
            if (this.get_parent() != null) begin
                this.get_parent().sample(m_offset+'h0,is_read,map);
            end
        end

    endfunction
endclass : chip_name_block
`endif
