//Agnisys, Inc. ***** Copyright 2018 All Rights Reserved. *****
//
//*** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ***
// created by        :
// generated by      : Admin
// generated from    : C:\Users\Admin\Documents\GitHub\git_test\Allegro_test\case1\case1.idsng
// IDesignSpec rev   : idsbatch v4.16.26.2

//*** This code is generated with following settings ***
// Reg Width                  : 32
// Address Unit               : 8
// C++ Types int              : hwint
// Bus Type                   : AXI
// BigEndian                  : false
// LittleEndian               : false
// Dist. Decode and Readback  : false
//---------------------------------------------------------------------------------------------------------------

`ifndef CHIP_NAME_REGMEM
`define CHIP_NAME_REGMEM

package chip_name_regmem_pkg;
    import uvm_pkg::*;
    `include "uvm_macros.svh"

    typedef enum {
        wr_cg_vals,
        rd_cg_vals
    } cov_typ;

    class agni_reg extends uvm_reg;
        `uvm_object_utils(agni_reg)

        local string reg_access;
        local bit indirect_reg;
        local bit constraints_reg;

        virtual function int get_cov(cov_typ ct);
            return 0;
        endfunction

        function new(string name="agni_reg", int unsigned n_bits = 32, int has_coverage = 0);
            super.new(name,n_bits,has_coverage);
        endfunction

        virtual function void set_cov_mask(uvm_reg_data_t mask);
        endfunction

        function void set_indirect_reg(bit indirect);
            this.indirect_reg = indirect;
        endfunction

        function bit get_indirect_reg();
            return indirect_reg;
        endfunction

        function void set_constraints_reg(bit constraints);
            this.constraints_reg = constraints;
        endfunction

        function bit get_constraints_reg();
            return constraints_reg;
        endfunction

        function void reg_access_configure(string access);
            this.reg_access = access;
        endfunction

        function string get_reg_access();
            return reg_access;
        endfunction

    endclass

    class agni_reg_indirect_data extends uvm_reg_indirect_data;
        `uvm_object_utils(agni_reg_indirect_data)

        virtual function int get_cov(cov_typ ct);
            return 0;
        endfunction

        function new(string name="agni_reg_indirect_data", int unsigned n_bits = 32, int has_coverage = 0);
            super.new(name,n_bits,has_coverage);
        endfunction

        virtual function void set_cov_mask(uvm_reg_data_t mask);
        endfunction

    endclass

    class agni_uvm_reg_field extends uvm_reg_field;
        `uvm_object_utils(agni_uvm_reg_field)

        local string hw_access;
        local bit post_predict_done;
        local bit is_indv_acc;
        bit constraintExist = 0;
        uvm_reg rg;

        function new(string name="agni_uvm_reg_field");
            super.new(name);
        endfunction

        function void hw_configure(string access);
            this.hw_access = access;
        endfunction

        function string get_hw_access();
            return hw_access;
        endfunction

        function void set_post_predict_bit(bit onoff);
            post_predict_done = onoff;
        endfunction

        function bit get_post_predict_bit;
            return post_predict_done;
        endfunction

        function void set_is_acc_bit(bit is_acc = 0);
            is_indv_acc =  is_acc;
        endfunction

        task post_write (uvm_reg_item rw);
            if(is_indv_acc)  begin
                if (this.is_indv_accessible(rw.path,rw.local_map)) begin
                    rg = this.get_parent();
                    rg.XsampleX(rw.value[0] << this.get_lsb_pos(), -1, 0, rw.map);
                end
            end
        endtask

    endclass

    `include "chip_name.regmem.sv"

endpackage
`endif
