//Agnisys, Inc. ***** Copyright 2018 All Rights Reserved. *****
//
//*** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ***
// created by        :
// generated by      : Admin
// generated from    : C:\Users\Admin\Documents\GitHub\git_test\Allegro_test\case1\mmmm.idsng
// IDesignSpec rev   : idsbatch v4.16.26.2

//*** This code is generated with following settings ***
// Reg Width                  : 32
// Address Unit               : 8
// C++ Types int              : hwint
// Bus Type                   : AXI
// BigEndian                  : false
// LittleEndian               : false
// Dist. Decode and Readback  : false
//---------------------------------------------------------------------------------------------------------------

module chip1_ids(
    block1_idsreg1_enb,
    block1_idsreg1_fld_in_enb,
    block1_idsreg1_fld_r,
    block1_idsreg2_enb,
    block1_idsreg2_fld_in,
    block1_idsreg2_fld_in_enb,
    block1_idsreg2_fld_r,
    
    
    //Signals  : SIGNAL NAME
    s1,
    s2,
    s3,
    
    
    //AXI signals
    
    aclk,    // Bus clock
    aresetn,    // Reset
    awaddr,    // Write address
    awvalid,    // Write address valid : This signal indicates that write address is valid
    awready,    // Write address ready : This signal indicates that the slave is ready to accept an address
    awprot,    // Write Protection Type
    wdata,    // Write data
    wvalid,    // Write valid         : This signal indicates that valid write data and strobes are available
    wready,    // Write ready         : This signal indicates that the slave can accept the write data
    wstrb,    // Write Strobes
    bresp,    // Write Response
    bready,    // Response Ready
    bvalid,    // Response valid
    araddr,    // Read  address
    arvalid,    // Read address valid  : This signal indicates that the read address is valid and will remain stable until ARREADY is high
    arready,    // Read address ready  : This signal indicates that the slave is ready to accept an address
    arprot,    // Read Protection Type
    rdata,    // Read data
    rvalid,    // Read valid          : This signal indicates that the required read data is available and the read transfer can complete
    rready,    // Read ready          : This signal indicates that the master can accept the read data
    rresp    // Read Response
    
    );
    
    
    
    parameter block1_ids_offset = 'h0;
    parameter addr_width  = 3;
    parameter bus_width   = 32;
    
    //AXI signals
    input aclk;
    input aresetn;
    input [addr_width-1 : 0] awaddr;
    input awvalid;
    output awready;
    input [2 : 0] awprot;
    input [bus_width-1 : 0] wdata;
    input wvalid;
    output wready;
    input [bus_width/8-1 : 0] wstrb;
    output [1 : 0] bresp;
    input bready;
    output bvalid;
    input [addr_width-1 : 0] araddr;
    input arvalid;
    output arready;
    input [2 : 0] arprot;
    output [bus_width-1 : 0] rdata;
    output rvalid;
    input rready;
    output [1 : 0] rresp;
    
    
    //Signals  : SIGNAL NAME
    
    // Desc: S1
    //
    
    input s1;
    input s2;
    input s3;
    
    wire [1:0]slave_bresp;
    
    wire [1:0]slave_rresp;
    
    
    wire [bus_width-1:0] block1_ids_rdata;
    wire block1_ids_rvalid;
    wire block1_ids_awready;
    wire block1_ids_wready;
    wire  [1:0] block1_ids_bresp;
    wire block1_ids_bvalid;
    wire block1_ids_arready;
    wire  [1:0] block1_ids_rresp;
    
    wire invalid_address_wr;
    wire invalid_address_rd;
    
    wire wr_error;
    wire rd_error;
    
    reg awvalid_ff;
    reg wvalid_ff;
    
    reg [1:0]rresp_ff;
    reg [1:0]bresp_ff;
    
    
    wire block1_ids_select_wr;
    wire block1_ids_select_rd;
    
    wire block1_ids_wr_data_busy;
    wire block1_ids_wr_addr_busy;
    wire block1_ids_rd_busy;
    
    //Signals  : SIGNALS
    
    
    //block1_ids
    output   block1_idsreg1_enb;
    input   block1_idsreg1_fld_in_enb;
    output [31 : 0] block1_idsreg1_fld_r;
    
    output   block1_idsreg2_enb;
    input  [31 : 0] block1_idsreg2_fld_in;
    input   block1_idsreg2_fld_in_enb;
    output [31 : 0] block1_idsreg2_fld_r;
    
    
    
    
    assign block1_ids_select_wr =( (awaddr >= block1_ids_offset ) && (awaddr <= block1_ids_offset + 'h7)) ? 1'b1 : 1'b0;
    
    assign block1_ids_select_rd =( (araddr >= block1_ids_offset ) && (araddr <= block1_ids_offset + 'h7)) ? 1'b1 : 1'b0;
    
    
    block1_ids #(.addr_width(addr_width),.block_offset( block1_ids_offset)) block1_idsinst(
    .reg1_enb(block1_idsreg1_enb),
    .reg1_fld_in_enb(block1_idsreg1_fld_in_enb),
    .reg1_fld_r(block1_idsreg1_fld_r),
    .reg2_enb(block1_idsreg2_enb),
    .reg2_fld_in(block1_idsreg2_fld_in),
    .reg2_fld_in_enb(block1_idsreg2_fld_in_enb),
    .reg2_fld_r(block1_idsreg2_fld_r),
    .s3(s1),
    
    .aclk(aclk),
    .aresetn(aresetn),
    .awaddr(awaddr),
    .awvalid(awvalid  & ~(&bresp_ff & ~(bready & bvalid))),
    .awready(block1_ids_awready),
    .awprot(awprot),
    .wdata(wdata),
    .wvalid(wvalid  & ~(&bresp_ff & ~(bready & bvalid))),
    .wready(block1_ids_wready),
    .wstrb(wstrb),
    .bresp(block1_ids_bresp),
    .bready(bready),
    .bvalid(block1_ids_bvalid),
    .araddr(araddr),
    .arvalid(arvalid &  ~rd_error  & ~(&rresp_ff & ~rready)),
    .arready(block1_ids_arready),
    .arprot(arprot),
    .rdata(block1_ids_rdata),
    .rvalid(block1_ids_rvalid),
    .rready(rready),
    .rresp(block1_ids_rresp));
    
    
    assign invalid_address_wr = ~(block1_ids_select_wr) ;
    assign invalid_address_rd = ~(block1_ids_select_rd) ;
    
    
    
    assign rdata = block1_ids_rdata;
    assign rvalid = &rresp_ff | block1_ids_rvalid;
    assign awready =   &bresp_ff ?  (wvalid_ff & bready) : (block1_ids_awready);
    assign wready =   (&bresp_ff &  wvalid_ff) ? bready : (block1_ids_wready);
    assign slave_bresp = block1_ids_bresp;
    assign bresp =  (bresp_ff & {2{wvalid_ff & awvalid_ff}})  | slave_bresp ;
    assign bvalid = (&bresp_ff & (wvalid_ff & awvalid_ff)) | block1_ids_bvalid;
    assign arready =   &rresp_ff ? rready : (block1_ids_arready);
    assign slave_rresp = block1_ids_rresp;
    assign rresp =  rresp_ff  | slave_rresp ;
    
    
    
    assign wr_error = (invalid_address_wr && awvalid == 1'b1 && awready == 1'b1) ;
    assign rd_error = (invalid_address_rd && arvalid == 1'b1 && arready == 1'b1) ;
    
    
    always @(posedge aclk)
        begin
        if (!aresetn)
            begin
                bresp_ff    <= 2'b00 ;
                rresp_ff    <= 2'b00 ;
                awvalid_ff  <= 1'b0  ;
                wvalid_ff   <= 1'b0  ;
            end
        else
            begin
                awvalid_ff  <= (awvalid_ff & ~(awvalid & awready)) ?  ~(bvalid & bready) :  (awvalid & awready) ;
                wvalid_ff   <= (wvalid_ff & ~(wvalid & wready)) ?   ~(bvalid & bready) :  (wvalid & wready) ;
                rresp_ff    <= (rresp_ff == 2'b11 && rd_error  == 1'b0) ? {2{~rready}} : {2{rd_error}};
                
            if(awvalid_ff && &bresp_ff)
                begin
                    bresp_ff  <= (wr_error  == 1'b0  && wvalid_ff == 1'b1) ? {2{~bready}} : bresp_ff;
                end
            else
                begin
                    bresp_ff  <= (bresp_ff == 2'b11 && wr_error  == 1'b0) ? {2{~bready}} : {2{wr_error & ((awvalid & awready) | awvalid_ff)}};
                end
            end
    end // always clk
    
    
endmodule

//------------------------------------------------
//  BLOCK : BLOCK1 MODULE
//

module block1_ids(
    
    // REGISTER : REG1 PORT SIGNAL
    reg1_enb,
    reg1_fld_in_enb,
    reg1_fld_r,
    
    
    // REGISTER : REG2 PORT SIGNAL
    reg2_enb,
    reg2_fld_in,
    reg2_fld_in_enb,
    reg2_fld_r,
    
    
    
    //Signals  : SIGNALS
    s3,
    
    
    //AXI signals
    aclk,   // Bus clock
    aresetn,   // Reset
    awaddr,   // Write address
    awvalid,   // Write address valid : This signal indicates that write address is valid
    awready,   // Write address ready : This signal indicates that the slave is ready to accept an address
    awprot,   // Write Protection Type
    wdata,   // Write data
    wvalid,   // Write valid         : This signal indicates that valid write data and strobes are available
    wready,   // Write ready         : This signal indicates that the slave can accept the write data
    wstrb,   // Write Strobes
    bresp,   // Write Response
    bready,   // Response Ready
    bvalid,   // Response valid
    araddr,   // Read  address
    arvalid,   // Read address valid  : This signal indicates that the read address is valid and will remain stable until ARREADY is high
    arready,   // Read address ready  : This signal indicates that the slave is ready to accept an address
    arprot,   // Read Protection Type
    rdata,   // Read data
    rvalid,   // Read valid          : This signal indicates that the required read data is available and the read transfer can complete
    rready,   // Read ready          : This signal indicates that the master can accept the read data
    rresp   // Read Response
    );
    //  PARAMETERS
    parameter bus_width   = 32;
    parameter addr_width = 3;
    
    parameter block_offset  = {(addr_width){1'b0}};
    
    
    parameter block1_address_width = addr_width;
    
    
    //Signals  : SIGNALS
    input s3;
    
    //-----------------------------------------------------
    // REGISTER : REG1 SIGNALS
    
    
    wire    reg1_decode;         // Write DECODE
    wire    reg1_rdecode;        // Read  DECODE
    wire    reg1_wr_valid;       // WRITE VALID
    wire    reg1_rd_valid;       // READ VALID
    wire    [bus_width-1 : 0] reg1_rd_data;          // READ DATA
    wire    [64-1 : 0] reg1_offset;  // OFFSET
    output  reg1_enb;    // REGISTER ENABLE
    
    // HW WRITE-ABLE SIGNAL FOR EACH FIELD
    input   reg1_fld_in_enb ;      // FIELD : FLD
    
    // BUFFER SIGNAL FOR EACH FIELD
    reg [31 : 0] reg1_fld_q ;      // FIELD : FLD
    
    // READ DATA SIGNAL FOR EACH FIELD
    output  [31 : 0] reg1_fld_r ;      // FIELD : FLD
    
    // HW WRITE DATA SIGNAL FOR EACH FIELD
    
    //-----------------------------------------------------
    
    
    //-----------------------------------------------------
    // REGISTER : REG2 SIGNALS
    
    
    wire    reg2_decode;         // Write DECODE
    wire    reg2_rdecode;        // Read  DECODE
    wire    reg2_wr_valid;       // WRITE VALID
    wire    reg2_rd_valid;       // READ VALID
    wire    [bus_width-1 : 0] reg2_rd_data;          // READ DATA
    wire    [64-1 : 0] reg2_offset;  // OFFSET
    output  reg2_enb;    // REGISTER ENABLE
    
    // HW WRITE-ABLE SIGNAL FOR EACH FIELD
    input   reg2_fld_in_enb ;      // FIELD : FLD
    
    // BUFFER SIGNAL FOR EACH FIELD
    reg [31 : 0] reg2_fld_q ;      // FIELD : FLD
    
    // READ DATA SIGNAL FOR EACH FIELD
    output  [31 : 0] reg2_fld_r ;      // FIELD : FLD
    
    // HW WRITE DATA SIGNAL FOR EACH FIELD
    input   [31 : 0] reg2_fld_in ;      // FIELD : FLD
    
    //-----------------------------------------------------
    
    
    
    //AXI signals
    input aclk;
    input aresetn;
    input [addr_width-1 : 0] awaddr;
    input awvalid;
    output awready;
    input [2 : 0] awprot;
    wire  [2 : 0] awprot_i;
    input [bus_width-1 : 0] wdata;
    input wvalid;
    output wready;
    input [bus_width/8-1 : 0] wstrb;
    output [1 : 0] bresp;
    input bready;
    output bvalid;
    input [addr_width-1 : 0] araddr;
    input arvalid;
    output arready;
    input [2 : 0] arprot;
    wire  [2 : 0] arprot_i;
    output [bus_width-1 : 0] rdata;
    output rvalid;
    input rready;
    output [1 : 0] rresp;
    
    wire  clk;
    wire  reset_l;
    wire   rd_stb;
    wire   rd_wait;
    wire   wr_stb;
    wire  [addr_width-1:0]  address;
    wire  [bus_width-1:0]  wr_data;
    wire   request;
    wire  rd_data_vld;
    wire  [bus_width-1:0] rd_data;
    wire [addr_width-1 : 0] raddress;
    wire  wr_error;
    wire  rd_error;
    wire  wr_decode_error;
    wire  rd_decode_error;
    wire  wr_slave_select;
    wire  rd_slave_select;
    wire  [addr_width-1:0] slvwaddr;
    wire  [addr_width-1:0] slvraddr;
    wire [bus_width-1 : 0] reg_enb;
    wire [bus_width/8 -1 : 0] byte_enb;
    
    axi_widget #(.addr_width(addr_width), .bus_width(bus_width)) axi(
            .aclk(aclk),
            .aresetn(aresetn),
            .awaddr(awaddr),
            .awvalid(awvalid),
            .awready(awready),
            .awprot(awprot),
            .awprot_i(awprot_i),
            .wdata(wdata),
            .wvalid(wvalid),
            .wready(wready),
            .wstrb(wstrb),
            .bresp(bresp),
            .bready(bready),
            .bvalid(bvalid),
            .araddr(araddr),
            .arvalid(arvalid),
            .arready(arready),
            .arprot(arprot),
            .arprot_i(arprot_i),
            .rdata(rdata),
            .rvalid(rvalid),
            .rready(rready),
            .rresp(rresp),
            .clk(clk),
            .reset_l(reset_l),
            .request(request),
            .wr_stb(wr_stb),
            .wr_decode_error(wr_decode_error),
            .rd_decode_error(rd_decode_error),
            .wr_slave_select(wr_slave_select),
            .rd_slave_select(rd_slave_select),
            .slvwaddr(slvwaddr),
            .slvraddr(slvraddr),
            .rd_stb(rd_stb),
            .rd_wait(rd_wait),
            .wr_error(wr_error),
            .rd_error(rd_error),
            .rd_data(rd_data),
            .wr_data(wr_data),
            .address(address),
            .raddress(raddress),
            .rd_data_vld(rd_data_vld),
            .byte_enb(byte_enb));
    //end widget
    
    assign reg_enb =  {
    {8{byte_enb[3]}} ,
    {8{byte_enb[2]}} ,
    {8{byte_enb[1]}} ,
    {8{byte_enb[0]}}};
    
    
    
    
    //----------------------------------------------------------------------------------------------------
    // REGISTER      :  REG1
    // ADDRESS       :  block_offset+'h0                WIDTH : 32
    // HW ACCESS     :  READ-WRITE
    // SW ACCESS     :  READ-WRITE
    //
    // FIELDS   :
    //     31:0 : fld  ( SW : Read-Write HW : Read-Write )
    
    //-----------------------------------------------------------------------------
    // DESCRIPTION  :  NA
    //
    
    
    assign reg1_wr_valid = reg1_decode && wr_stb;
    assign reg1_rd_valid = reg1_rdecode && rd_stb;
    assign reg1_enb      = reg1_wr_valid;
    assign reg1_offset = block_offset+'h0;
    assign reg1_decode  = (address[block1_address_width-1 : 0]    == reg1_offset[block1_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    assign reg1_rdecode = (raddress[block1_address_width-1 : 0]   == reg1_offset[block1_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    
    
    //----------------------------------------------------------------------------
    // FIELD  : FLD
    // HW ACCESS  :  READ-WRITE                          WIDTH  :  32
    // SW ACCESS  :  READ-WRITE                          OFFSET :  0
    //-----------------------------------------------------------------
    // DESCRIPTION   :
    //
    
    always @(posedge clk)
        
        begin
        if (!reset_l)
            begin
                
                reg1_fld_q  <= 32'd0;
            end
        else
            begin
            if (reg1_fld_in_enb)   // FLD : HW Write
                begin
                    reg1_fld_q <= s3;
                end
            else
                begin
                    
                if (reg1_wr_valid)   // FLD : SW Write
                    begin
                        reg1_fld_q <=  ( wr_data[31 : 0] & reg_enb[31 : 0] ) | (reg1_fld_q & (~reg_enb[31 : 0]));
                    end
                    
                end  // sw_write_close
            end
    end // always clk
    
    //----------------------------------------------------------------------------
    
    
    // ===================================================
    // HW OUTPUT READ DATA FOR EACH FIELD
    assign reg1_fld_r  =  reg1_fld_q ;    // Field : FLD
    
    
    assign reg1_rd_data = reg1_rd_valid ? {reg1_fld_q} : 32'b00000000000000000000000000000000;
    
    
    //----------------------------------------------------------------------------------------------------
    // REGISTER      :  REG2
    // ADDRESS       :  block_offset+'h4                WIDTH : 32
    // HW ACCESS     :  READ-WRITE
    // SW ACCESS     :  READ-WRITE
    //
    // FIELDS   :
    //     31:0 : fld  ( SW : Read-Write HW : Read-Write )
    
    //-----------------------------------------------------------------------------
    // DESCRIPTION  :  NA
    //
    
    
    assign reg2_wr_valid = reg2_decode && wr_stb;
    assign reg2_rd_valid = reg2_rdecode && rd_stb;
    assign reg2_enb      = reg2_wr_valid;
    assign reg2_offset = block_offset+'h4;
    assign reg2_decode  = (address[block1_address_width-1 : 0]    == reg2_offset[block1_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    assign reg2_rdecode = (raddress[block1_address_width-1 : 0]   == reg2_offset[block1_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    
    
    //----------------------------------------------------------------------------
    // FIELD  : FLD
    // HW ACCESS  :  READ-WRITE                          WIDTH  :  32
    // SW ACCESS  :  READ-WRITE                          OFFSET :  0
    //-----------------------------------------------------------------
    // DESCRIPTION   :
    //
    
    always @(posedge clk)
        
        begin
        if (!reset_l)
            begin
                
                reg2_fld_q  <= 32'd0;
            end
        else
            begin
            if (reg2_fld_in_enb)   // FLD : HW Write
                begin
                    reg2_fld_q <= reg2_fld_in;
                end
            else
                begin
                    
                if (reg2_wr_valid)   // FLD : SW Write
                    begin
                        reg2_fld_q <=  ( wr_data[31 : 0] & reg_enb[31 : 0] ) | (reg2_fld_q & (~reg_enb[31 : 0]));
                    end
                    
                end  // sw_write_close
            end
    end // always clk
    
    //----------------------------------------------------------------------------
    
    
    // ===================================================
    // HW OUTPUT READ DATA FOR EACH FIELD
    assign reg2_fld_r  =  reg2_fld_q ;    // Field : FLD
    
    
    assign reg2_rd_data = reg2_rd_valid ? {reg2_fld_q} : 32'b00000000000000000000000000000000;
    
    
    
    
    assign rd_data = reg1_rd_data |
    reg2_rd_data ;
    
    
    
    assign wr_error = 0;
    
    assign rd_error = 0;
    
    assign wr_decode_error = 0;
    
    assign rd_decode_error = 0;
    
    assign request      =  1'b1;
    assign rd_data_vld   =  rd_stb;
    assign rd_wait       =  1'b1;
    
    assign wr_slave_select = ((slvwaddr[addr_width - 1 : 0]  >= block_offset) && (slvwaddr[addr_width - 1 : 0]  <= block_offset + 'h7)) ? 1'b1 : 1'b0;
    assign rd_slave_select = ((slvraddr[addr_width - 1 : 0]  >= block_offset) && (slvraddr[addr_width - 1 : 0]  <= block_offset + 'h7)) ? 1'b1 : 1'b0;
    
endmodule
