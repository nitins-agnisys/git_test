//Agnisys, Inc. ***** Copyright 2018 All Rights Reserved. *****
//
//*** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ***
// created by        :
// generated by      : Admin
// generated from    : C:\Users\Admin\Documents\GitHub\git_test\Allegro_test\sequences\chip.idsng
// IDesignSpec rev   : idsbatch v4.16.26.2

//*** This code is generated with following settings ***
// Reg Width                  : 32
// Address Unit               : 8
// C++ Types int              : hwint
// Bus Type                   : AXI
// BigEndian                  : false
// LittleEndian               : false
// Dist. Decode and Readback  : false
//---------------------------------------------------------------------------------------------------------------

module chip_name_ids(
    block_name_idsREG_SYS_LGC_GENERAL_0_enb,
    block_name_idsREG_SYS_LGC_GENERAL_0_REG_SYS_LGC_GENERAL_0_F_in,
    block_name_idsREG_SYS_LGC_GENERAL_0_REG_SYS_LGC_GENERAL_0_F_in_enb,
    block_name_idsREG_SYS_LGC_GENERAL_0_REG_SYS_LGC_GENERAL_0_F_r,
    block_name_idsREG_SYS_LGC_LDOS_SYSMOD_0_enb,
    block_name_idsREG_SYS_LGC_LDOS_SYSMOD_0_REG_SYS_LGC_LDOS_SYSMOD_0_F_in,
    block_name_idsREG_SYS_LGC_LDOS_SYSMOD_0_REG_SYS_LGC_LDOS_SYSMOD_0_F_in_enb,
    block_name_idsREG_SYS_LGC_LDOS_SYSMOD_0_REG_SYS_LGC_LDOS_SYSMOD_0_F_r,
    block_name_idsREG_DPLL_SYSTEM_CON_enb,
    block_name_idsREG_DPLL_SYSTEM_CON_REG_DPLL_SYSTEM_CON_F_in,
    block_name_idsREG_DPLL_SYSTEM_CON_REG_DPLL_SYSTEM_CON_F_in_enb,
    block_name_idsREG_DPLL_SYSTEM_CON_REG_DPLL_SYSTEM_CON_F_r,
    block_name_idsREG_DPLL_SYSTEM_CFG_enb,
    block_name_idsREG_DPLL_SYSTEM_CFG_REG_DPLL_SYSTEM_CFG_F_in,
    block_name_idsREG_DPLL_SYSTEM_CFG_REG_DPLL_SYSTEM_CFG_F_in_enb,
    block_name_idsREG_DPLL_SYSTEM_CFG_REG_DPLL_SYSTEM_CFG_F_r,
    block_name_idsREG_DPLL_SYSTEM_CFG2_enb,
    block_name_idsREG_DPLL_SYSTEM_CFG2_REG_DPLL_SYSTEM_CFG2_F_in,
    block_name_idsREG_DPLL_SYSTEM_CFG2_REG_DPLL_SYSTEM_CFG2_F_in_enb,
    block_name_idsREG_DPLL_SYSTEM_CFG2_REG_DPLL_SYSTEM_CFG2_F_r,
    block_name_idsCHA_REG_ADC_MAN_PARA10_enb,
    block_name_idsCHA_REG_ADC_MAN_PARA10_CHA_REG_ADC_MAN_PARA10_F_in,
    block_name_idsCHA_REG_ADC_MAN_PARA10_CHA_REG_ADC_MAN_PARA10_F_in_enb,
    block_name_idsCHA_REG_ADC_MAN_PARA10_CHA_REG_ADC_MAN_PARA10_F_r,
    block_name_idsCHA_REG_TX_LB_MX_CFG_enb,
    block_name_idsCHA_REG_TX_LB_MX_CFG_CHA_REG_TX_LB_MX_CFG_F_in,
    block_name_idsCHA_REG_TX_LB_MX_CFG_CHA_REG_TX_LB_MX_CFG_F_in_enb,
    block_name_idsCHA_REG_TX_LB_MX_CFG_CHA_REG_TX_LB_MX_CFG_F_r,
    block_name_idsCHA_REG_ADC_MAN_PARA102_enb,
    block_name_idsCHA_REG_ADC_MAN_PARA102_CHA_REG_ADC_MAN_PARA102_F_in,
    block_name_idsCHA_REG_ADC_MAN_PARA102_CHA_REG_ADC_MAN_PARA102_F_in_enb,
    block_name_idsCHA_REG_ADC_MAN_PARA102_CHA_REG_ADC_MAN_PARA102_F_r,
    block_name_idsREG_SYS_LGC_CM_0_enb,
    block_name_idsREG_SYS_LGC_CM_0_REG_SYS_LGC_CM_0_F_in,
    block_name_idsREG_SYS_LGC_CM_0_REG_SYS_LGC_CM_0_F_in_enb,
    block_name_idsREG_SYS_LGC_CM_0_REG_SYS_LGC_CM_0_F_r,
    block_name_idsREG_SYS_MANUAL_DFT_0_enb,
    block_name_idsREG_SYS_MANUAL_DFT_0_REG_SYS_MANUAL_DFT_0_F_in,
    block_name_idsREG_SYS_MANUAL_DFT_0_REG_SYS_MANUAL_DFT_0_F_in_enb,
    block_name_idsREG_SYS_MANUAL_DFT_0_REG_SYS_MANUAL_DFT_0_F_r,
    block_name_idsREG_SYS_LGC_COEX_0_enb,
    block_name_idsREG_SYS_LGC_COEX_0_REG_SYS_LGC_COEX_0_F_in,
    block_name_idsREG_SYS_LGC_COEX_0_REG_SYS_LGC_COEX_0_F_in_enb,
    block_name_idsREG_SYS_LGC_COEX_0_REG_SYS_LGC_COEX_0_F_r,
    block_name_idsREG_SYS_LGC_COEX_7_enb,
    block_name_idsREG_SYS_LGC_COEX_7_REG_SYS_LGC_COEX_7_F_in,
    block_name_idsREG_SYS_LGC_COEX_7_REG_SYS_LGC_COEX_7_F_in_enb,
    block_name_idsREG_SYS_LGC_COEX_7_REG_SYS_LGC_COEX_7_F_r,
    block_name_idsREG_SYS_LGC_COEX_5_enb,
    block_name_idsREG_SYS_LGC_COEX_5_REG_SYS_LGC_COEX_5_F_in,
    block_name_idsREG_SYS_LGC_COEX_5_REG_SYS_LGC_COEX_5_F_in_enb,
    block_name_idsREG_SYS_LGC_COEX_5_REG_SYS_LGC_COEX_5_F_r,
    block_name_idsREG_SYS_LGC_COEX_6_enb,
    block_name_idsREG_SYS_LGC_COEX_6_REG_SYS_LGC_COEX_6_F_in,
    block_name_idsREG_SYS_LGC_COEX_6_REG_SYS_LGC_COEX_6_F_in_enb,
    block_name_idsREG_SYS_LGC_COEX_6_REG_SYS_LGC_COEX_6_F_r,
    block_name_idsCHA_REG_DAC_ANA_DIV_enb,
    block_name_idsCHA_REG_DAC_ANA_DIV_CHA_REG_DAC_ANA_DIV_F_in,
    block_name_idsCHA_REG_DAC_ANA_DIV_CHA_REG_DAC_ANA_DIV_F_in_enb,
    block_name_idsCHA_REG_DAC_ANA_DIV_CHA_REG_DAC_ANA_DIV_F_r,
    block_name_idsREG_DPLL_ABS_enb,
    block_name_idsREG_DPLL_ABS_REG_DPLL_ABS_F_in,
    block_name_idsREG_DPLL_ABS_REG_DPLL_ABS_F_in_enb,
    block_name_idsREG_DPLL_ABS_REG_DPLL_ABS_F_r,
    block_name_idsREG_DPLL_ANALOG8_enb,
    block_name_idsREG_DPLL_ANALOG8_REG_DPLL_ANALOG8_F_in,
    block_name_idsREG_DPLL_ANALOG8_REG_DPLL_ANALOG8_F_in_enb,
    block_name_idsREG_DPLL_ANALOG8_REG_DPLL_ANALOG8_F_r,
    block_name_idsREG_DPLL_DLF1_enb,
    block_name_idsREG_DPLL_DLF1_REG_DPLL_DLF1_F_in,
    block_name_idsREG_DPLL_DLF1_REG_DPLL_DLF1_F_in_enb,
    block_name_idsREG_DPLL_DLF1_REG_DPLL_DLF1_F_r,
    block_name_idsREG_DPLL_DLF2_enb,
    block_name_idsREG_DPLL_DLF2_REG_DPLL_DLF2_F_in,
    block_name_idsREG_DPLL_DLF2_REG_DPLL_DLF2_F_in_enb,
    block_name_idsREG_DPLL_DLF2_REG_DPLL_DLF2_F_r,
    block_name_idsREG_DPLL_SFTDC_enb,
    block_name_idsREG_DPLL_SFTDC_REG_DPLL_SFTDC_F_in,
    block_name_idsREG_DPLL_SFTDC_REG_DPLL_SFTDC_F_in_enb,
    block_name_idsREG_DPLL_SFTDC_REG_DPLL_SFTDC_F_r,
    block_name_idsREG_DPLL_DLF3_enb,
    block_name_idsREG_DPLL_DLF3_REG_DPLL_DLF3_F_in,
    block_name_idsREG_DPLL_DLF3_REG_DPLL_DLF3_F_in_enb,
    block_name_idsREG_DPLL_DLF3_REG_DPLL_DLF3_F_r,
    
    
    //AXI signals
    
    aclk,    // Bus clock
    aresetn,    // Reset
    awaddr,    // Write address
    awvalid,    // Write address valid : This signal indicates that write address is valid
    awready,    // Write address ready : This signal indicates that the slave is ready to accept an address
    awprot,    // Write Protection Type
    wdata,    // Write data
    wvalid,    // Write valid         : This signal indicates that valid write data and strobes are available
    wready,    // Write ready         : This signal indicates that the slave can accept the write data
    wstrb,    // Write Strobes
    bresp,    // Write Response
    bready,    // Response Ready
    bvalid,    // Response valid
    araddr,    // Read  address
    arvalid,    // Read address valid  : This signal indicates that the read address is valid and will remain stable until ARREADY is high
    arready,    // Read address ready  : This signal indicates that the slave is ready to accept an address
    arprot,    // Read Protection Type
    rdata,    // Read data
    rvalid,    // Read valid          : This signal indicates that the required read data is available and the read transfer can complete
    rready,    // Read ready          : This signal indicates that the master can accept the read data
    rresp    // Read Response
    
    );
    
    
    
    parameter block_name_ids_offset = 'h0;
    parameter addr_width  = 7;
    parameter bus_width   = 32;
    
    //AXI signals
    input aclk;
    input aresetn;
    input [addr_width-1 : 0] awaddr;
    input awvalid;
    output awready;
    input [2 : 0] awprot;
    input [bus_width-1 : 0] wdata;
    input wvalid;
    output wready;
    input [bus_width/8-1 : 0] wstrb;
    output [1 : 0] bresp;
    input bready;
    output bvalid;
    input [addr_width-1 : 0] araddr;
    input arvalid;
    output arready;
    input [2 : 0] arprot;
    output [bus_width-1 : 0] rdata;
    output rvalid;
    input rready;
    output [1 : 0] rresp;
    wire [1:0]slave_bresp;
    
    wire [1:0]slave_rresp;
    
    
    wire [bus_width-1:0] block_name_ids_rdata;
    wire block_name_ids_rvalid;
    wire block_name_ids_awready;
    wire block_name_ids_wready;
    wire  [1:0] block_name_ids_bresp;
    wire block_name_ids_bvalid;
    wire block_name_ids_arready;
    wire  [1:0] block_name_ids_rresp;
    
    wire invalid_address_wr;
    wire invalid_address_rd;
    
    wire wr_error;
    wire rd_error;
    
    reg awvalid_ff;
    reg wvalid_ff;
    
    reg [1:0]rresp_ff;
    reg [1:0]bresp_ff;
    
    
    wire block_name_ids_select_wr;
    wire block_name_ids_select_rd;
    
    wire block_name_ids_wr_data_busy;
    wire block_name_ids_wr_addr_busy;
    wire block_name_ids_rd_busy;
    
    //block_name_ids
    output   block_name_idsREG_SYS_LGC_GENERAL_0_enb;
    input  [31 : 0] block_name_idsREG_SYS_LGC_GENERAL_0_REG_SYS_LGC_GENERAL_0_F_in;
    input   block_name_idsREG_SYS_LGC_GENERAL_0_REG_SYS_LGC_GENERAL_0_F_in_enb;
    output [31 : 0] block_name_idsREG_SYS_LGC_GENERAL_0_REG_SYS_LGC_GENERAL_0_F_r;
    
    output   block_name_idsREG_SYS_LGC_LDOS_SYSMOD_0_enb;
    input  [31 : 0] block_name_idsREG_SYS_LGC_LDOS_SYSMOD_0_REG_SYS_LGC_LDOS_SYSMOD_0_F_in;
    input   block_name_idsREG_SYS_LGC_LDOS_SYSMOD_0_REG_SYS_LGC_LDOS_SYSMOD_0_F_in_enb;
    output [31 : 0] block_name_idsREG_SYS_LGC_LDOS_SYSMOD_0_REG_SYS_LGC_LDOS_SYSMOD_0_F_r;
    
    output   block_name_idsREG_DPLL_SYSTEM_CON_enb;
    input  [31 : 0] block_name_idsREG_DPLL_SYSTEM_CON_REG_DPLL_SYSTEM_CON_F_in;
    input   block_name_idsREG_DPLL_SYSTEM_CON_REG_DPLL_SYSTEM_CON_F_in_enb;
    output [31 : 0] block_name_idsREG_DPLL_SYSTEM_CON_REG_DPLL_SYSTEM_CON_F_r;
    
    output   block_name_idsREG_DPLL_SYSTEM_CFG_enb;
    input  [31 : 0] block_name_idsREG_DPLL_SYSTEM_CFG_REG_DPLL_SYSTEM_CFG_F_in;
    input   block_name_idsREG_DPLL_SYSTEM_CFG_REG_DPLL_SYSTEM_CFG_F_in_enb;
    output [31 : 0] block_name_idsREG_DPLL_SYSTEM_CFG_REG_DPLL_SYSTEM_CFG_F_r;
    
    output   block_name_idsREG_DPLL_SYSTEM_CFG2_enb;
    input  [31 : 0] block_name_idsREG_DPLL_SYSTEM_CFG2_REG_DPLL_SYSTEM_CFG2_F_in;
    input   block_name_idsREG_DPLL_SYSTEM_CFG2_REG_DPLL_SYSTEM_CFG2_F_in_enb;
    output [31 : 0] block_name_idsREG_DPLL_SYSTEM_CFG2_REG_DPLL_SYSTEM_CFG2_F_r;
    
    output   block_name_idsCHA_REG_ADC_MAN_PARA10_enb;
    input  [31 : 0] block_name_idsCHA_REG_ADC_MAN_PARA10_CHA_REG_ADC_MAN_PARA10_F_in;
    input   block_name_idsCHA_REG_ADC_MAN_PARA10_CHA_REG_ADC_MAN_PARA10_F_in_enb;
    output [31 : 0] block_name_idsCHA_REG_ADC_MAN_PARA10_CHA_REG_ADC_MAN_PARA10_F_r;
    
    output   block_name_idsCHA_REG_TX_LB_MX_CFG_enb;
    input  [31 : 0] block_name_idsCHA_REG_TX_LB_MX_CFG_CHA_REG_TX_LB_MX_CFG_F_in;
    input   block_name_idsCHA_REG_TX_LB_MX_CFG_CHA_REG_TX_LB_MX_CFG_F_in_enb;
    output [31 : 0] block_name_idsCHA_REG_TX_LB_MX_CFG_CHA_REG_TX_LB_MX_CFG_F_r;
    
    output   block_name_idsCHA_REG_ADC_MAN_PARA102_enb;
    input  [31 : 0] block_name_idsCHA_REG_ADC_MAN_PARA102_CHA_REG_ADC_MAN_PARA102_F_in;
    input   block_name_idsCHA_REG_ADC_MAN_PARA102_CHA_REG_ADC_MAN_PARA102_F_in_enb;
    output [31 : 0] block_name_idsCHA_REG_ADC_MAN_PARA102_CHA_REG_ADC_MAN_PARA102_F_r;
    
    output   block_name_idsREG_SYS_LGC_CM_0_enb;
    input  [31 : 0] block_name_idsREG_SYS_LGC_CM_0_REG_SYS_LGC_CM_0_F_in;
    input   block_name_idsREG_SYS_LGC_CM_0_REG_SYS_LGC_CM_0_F_in_enb;
    output [31 : 0] block_name_idsREG_SYS_LGC_CM_0_REG_SYS_LGC_CM_0_F_r;
    
    output   block_name_idsREG_SYS_MANUAL_DFT_0_enb;
    input  [31 : 0] block_name_idsREG_SYS_MANUAL_DFT_0_REG_SYS_MANUAL_DFT_0_F_in;
    input   block_name_idsREG_SYS_MANUAL_DFT_0_REG_SYS_MANUAL_DFT_0_F_in_enb;
    output [31 : 0] block_name_idsREG_SYS_MANUAL_DFT_0_REG_SYS_MANUAL_DFT_0_F_r;
    
    output   block_name_idsREG_SYS_LGC_COEX_0_enb;
    input  [31 : 0] block_name_idsREG_SYS_LGC_COEX_0_REG_SYS_LGC_COEX_0_F_in;
    input   block_name_idsREG_SYS_LGC_COEX_0_REG_SYS_LGC_COEX_0_F_in_enb;
    output [31 : 0] block_name_idsREG_SYS_LGC_COEX_0_REG_SYS_LGC_COEX_0_F_r;
    
    output   block_name_idsREG_SYS_LGC_COEX_7_enb;
    input  [31 : 0] block_name_idsREG_SYS_LGC_COEX_7_REG_SYS_LGC_COEX_7_F_in;
    input   block_name_idsREG_SYS_LGC_COEX_7_REG_SYS_LGC_COEX_7_F_in_enb;
    output [31 : 0] block_name_idsREG_SYS_LGC_COEX_7_REG_SYS_LGC_COEX_7_F_r;
    
    output   block_name_idsREG_SYS_LGC_COEX_5_enb;
    input  [31 : 0] block_name_idsREG_SYS_LGC_COEX_5_REG_SYS_LGC_COEX_5_F_in;
    input   block_name_idsREG_SYS_LGC_COEX_5_REG_SYS_LGC_COEX_5_F_in_enb;
    output [31 : 0] block_name_idsREG_SYS_LGC_COEX_5_REG_SYS_LGC_COEX_5_F_r;
    
    output   block_name_idsREG_SYS_LGC_COEX_6_enb;
    input  [31 : 0] block_name_idsREG_SYS_LGC_COEX_6_REG_SYS_LGC_COEX_6_F_in;
    input   block_name_idsREG_SYS_LGC_COEX_6_REG_SYS_LGC_COEX_6_F_in_enb;
    output [31 : 0] block_name_idsREG_SYS_LGC_COEX_6_REG_SYS_LGC_COEX_6_F_r;
    
    output   block_name_idsCHA_REG_DAC_ANA_DIV_enb;
    input  [31 : 0] block_name_idsCHA_REG_DAC_ANA_DIV_CHA_REG_DAC_ANA_DIV_F_in;
    input   block_name_idsCHA_REG_DAC_ANA_DIV_CHA_REG_DAC_ANA_DIV_F_in_enb;
    output [31 : 0] block_name_idsCHA_REG_DAC_ANA_DIV_CHA_REG_DAC_ANA_DIV_F_r;
    
    output   block_name_idsREG_DPLL_ABS_enb;
    input  [31 : 0] block_name_idsREG_DPLL_ABS_REG_DPLL_ABS_F_in;
    input   block_name_idsREG_DPLL_ABS_REG_DPLL_ABS_F_in_enb;
    output [31 : 0] block_name_idsREG_DPLL_ABS_REG_DPLL_ABS_F_r;
    
    output   block_name_idsREG_DPLL_ANALOG8_enb;
    input  [31 : 0] block_name_idsREG_DPLL_ANALOG8_REG_DPLL_ANALOG8_F_in;
    input   block_name_idsREG_DPLL_ANALOG8_REG_DPLL_ANALOG8_F_in_enb;
    output [31 : 0] block_name_idsREG_DPLL_ANALOG8_REG_DPLL_ANALOG8_F_r;
    
    output   block_name_idsREG_DPLL_DLF1_enb;
    input  [31 : 0] block_name_idsREG_DPLL_DLF1_REG_DPLL_DLF1_F_in;
    input   block_name_idsREG_DPLL_DLF1_REG_DPLL_DLF1_F_in_enb;
    output [31 : 0] block_name_idsREG_DPLL_DLF1_REG_DPLL_DLF1_F_r;
    
    output   block_name_idsREG_DPLL_DLF2_enb;
    input  [31 : 0] block_name_idsREG_DPLL_DLF2_REG_DPLL_DLF2_F_in;
    input   block_name_idsREG_DPLL_DLF2_REG_DPLL_DLF2_F_in_enb;
    output [31 : 0] block_name_idsREG_DPLL_DLF2_REG_DPLL_DLF2_F_r;
    
    output   block_name_idsREG_DPLL_SFTDC_enb;
    input  [31 : 0] block_name_idsREG_DPLL_SFTDC_REG_DPLL_SFTDC_F_in;
    input   block_name_idsREG_DPLL_SFTDC_REG_DPLL_SFTDC_F_in_enb;
    output [31 : 0] block_name_idsREG_DPLL_SFTDC_REG_DPLL_SFTDC_F_r;
    
    output   block_name_idsREG_DPLL_DLF3_enb;
    input  [31 : 0] block_name_idsREG_DPLL_DLF3_REG_DPLL_DLF3_F_in;
    input   block_name_idsREG_DPLL_DLF3_REG_DPLL_DLF3_F_in_enb;
    output [31 : 0] block_name_idsREG_DPLL_DLF3_REG_DPLL_DLF3_F_r;
    
    
    
    
    assign block_name_ids_select_wr =( (awaddr >= block_name_ids_offset ) && (awaddr <= block_name_ids_offset + 'h53)) ? 1'b1 : 1'b0;
    
    assign block_name_ids_select_rd =( (araddr >= block_name_ids_offset ) && (araddr <= block_name_ids_offset + 'h53)) ? 1'b1 : 1'b0;
    
    
    block_name_ids #(.addr_width(addr_width),.block_offset( block_name_ids_offset)) block_name_idsinst(
    .REG_SYS_LGC_GENERAL_0_enb(block_name_idsREG_SYS_LGC_GENERAL_0_enb),
    .REG_SYS_LGC_GENERAL_0_REG_SYS_LGC_GENERAL_0_F_in(block_name_idsREG_SYS_LGC_GENERAL_0_REG_SYS_LGC_GENERAL_0_F_in),
    .REG_SYS_LGC_GENERAL_0_REG_SYS_LGC_GENERAL_0_F_in_enb(block_name_idsREG_SYS_LGC_GENERAL_0_REG_SYS_LGC_GENERAL_0_F_in_enb),
    .REG_SYS_LGC_GENERAL_0_REG_SYS_LGC_GENERAL_0_F_r(block_name_idsREG_SYS_LGC_GENERAL_0_REG_SYS_LGC_GENERAL_0_F_r),
    .REG_SYS_LGC_LDOS_SYSMOD_0_enb(block_name_idsREG_SYS_LGC_LDOS_SYSMOD_0_enb),
    .REG_SYS_LGC_LDOS_SYSMOD_0_REG_SYS_LGC_LDOS_SYSMOD_0_F_in(block_name_idsREG_SYS_LGC_LDOS_SYSMOD_0_REG_SYS_LGC_LDOS_SYSMOD_0_F_in),
    .REG_SYS_LGC_LDOS_SYSMOD_0_REG_SYS_LGC_LDOS_SYSMOD_0_F_in_enb(block_name_idsREG_SYS_LGC_LDOS_SYSMOD_0_REG_SYS_LGC_LDOS_SYSMOD_0_F_in_enb),
    .REG_SYS_LGC_LDOS_SYSMOD_0_REG_SYS_LGC_LDOS_SYSMOD_0_F_r(block_name_idsREG_SYS_LGC_LDOS_SYSMOD_0_REG_SYS_LGC_LDOS_SYSMOD_0_F_r),
    .REG_DPLL_SYSTEM_CON_enb(block_name_idsREG_DPLL_SYSTEM_CON_enb),
    .REG_DPLL_SYSTEM_CON_REG_DPLL_SYSTEM_CON_F_in(block_name_idsREG_DPLL_SYSTEM_CON_REG_DPLL_SYSTEM_CON_F_in),
    .REG_DPLL_SYSTEM_CON_REG_DPLL_SYSTEM_CON_F_in_enb(block_name_idsREG_DPLL_SYSTEM_CON_REG_DPLL_SYSTEM_CON_F_in_enb),
    .REG_DPLL_SYSTEM_CON_REG_DPLL_SYSTEM_CON_F_r(block_name_idsREG_DPLL_SYSTEM_CON_REG_DPLL_SYSTEM_CON_F_r),
    .REG_DPLL_SYSTEM_CFG_enb(block_name_idsREG_DPLL_SYSTEM_CFG_enb),
    .REG_DPLL_SYSTEM_CFG_REG_DPLL_SYSTEM_CFG_F_in(block_name_idsREG_DPLL_SYSTEM_CFG_REG_DPLL_SYSTEM_CFG_F_in),
    .REG_DPLL_SYSTEM_CFG_REG_DPLL_SYSTEM_CFG_F_in_enb(block_name_idsREG_DPLL_SYSTEM_CFG_REG_DPLL_SYSTEM_CFG_F_in_enb),
    .REG_DPLL_SYSTEM_CFG_REG_DPLL_SYSTEM_CFG_F_r(block_name_idsREG_DPLL_SYSTEM_CFG_REG_DPLL_SYSTEM_CFG_F_r),
    .REG_DPLL_SYSTEM_CFG2_enb(block_name_idsREG_DPLL_SYSTEM_CFG2_enb),
    .REG_DPLL_SYSTEM_CFG2_REG_DPLL_SYSTEM_CFG2_F_in(block_name_idsREG_DPLL_SYSTEM_CFG2_REG_DPLL_SYSTEM_CFG2_F_in),
    .REG_DPLL_SYSTEM_CFG2_REG_DPLL_SYSTEM_CFG2_F_in_enb(block_name_idsREG_DPLL_SYSTEM_CFG2_REG_DPLL_SYSTEM_CFG2_F_in_enb),
    .REG_DPLL_SYSTEM_CFG2_REG_DPLL_SYSTEM_CFG2_F_r(block_name_idsREG_DPLL_SYSTEM_CFG2_REG_DPLL_SYSTEM_CFG2_F_r),
    .CHA_REG_ADC_MAN_PARA10_enb(block_name_idsCHA_REG_ADC_MAN_PARA10_enb),
    .CHA_REG_ADC_MAN_PARA10_CHA_REG_ADC_MAN_PARA10_F_in(block_name_idsCHA_REG_ADC_MAN_PARA10_CHA_REG_ADC_MAN_PARA10_F_in),
    .CHA_REG_ADC_MAN_PARA10_CHA_REG_ADC_MAN_PARA10_F_in_enb(block_name_idsCHA_REG_ADC_MAN_PARA10_CHA_REG_ADC_MAN_PARA10_F_in_enb),
    .CHA_REG_ADC_MAN_PARA10_CHA_REG_ADC_MAN_PARA10_F_r(block_name_idsCHA_REG_ADC_MAN_PARA10_CHA_REG_ADC_MAN_PARA10_F_r),
    .CHA_REG_TX_LB_MX_CFG_enb(block_name_idsCHA_REG_TX_LB_MX_CFG_enb),
    .CHA_REG_TX_LB_MX_CFG_CHA_REG_TX_LB_MX_CFG_F_in(block_name_idsCHA_REG_TX_LB_MX_CFG_CHA_REG_TX_LB_MX_CFG_F_in),
    .CHA_REG_TX_LB_MX_CFG_CHA_REG_TX_LB_MX_CFG_F_in_enb(block_name_idsCHA_REG_TX_LB_MX_CFG_CHA_REG_TX_LB_MX_CFG_F_in_enb),
    .CHA_REG_TX_LB_MX_CFG_CHA_REG_TX_LB_MX_CFG_F_r(block_name_idsCHA_REG_TX_LB_MX_CFG_CHA_REG_TX_LB_MX_CFG_F_r),
    .CHA_REG_ADC_MAN_PARA102_enb(block_name_idsCHA_REG_ADC_MAN_PARA102_enb),
    .CHA_REG_ADC_MAN_PARA102_CHA_REG_ADC_MAN_PARA102_F_in(block_name_idsCHA_REG_ADC_MAN_PARA102_CHA_REG_ADC_MAN_PARA102_F_in),
    .CHA_REG_ADC_MAN_PARA102_CHA_REG_ADC_MAN_PARA102_F_in_enb(block_name_idsCHA_REG_ADC_MAN_PARA102_CHA_REG_ADC_MAN_PARA102_F_in_enb),
    .CHA_REG_ADC_MAN_PARA102_CHA_REG_ADC_MAN_PARA102_F_r(block_name_idsCHA_REG_ADC_MAN_PARA102_CHA_REG_ADC_MAN_PARA102_F_r),
    .REG_SYS_LGC_CM_0_enb(block_name_idsREG_SYS_LGC_CM_0_enb),
    .REG_SYS_LGC_CM_0_REG_SYS_LGC_CM_0_F_in(block_name_idsREG_SYS_LGC_CM_0_REG_SYS_LGC_CM_0_F_in),
    .REG_SYS_LGC_CM_0_REG_SYS_LGC_CM_0_F_in_enb(block_name_idsREG_SYS_LGC_CM_0_REG_SYS_LGC_CM_0_F_in_enb),
    .REG_SYS_LGC_CM_0_REG_SYS_LGC_CM_0_F_r(block_name_idsREG_SYS_LGC_CM_0_REG_SYS_LGC_CM_0_F_r),
    .REG_SYS_MANUAL_DFT_0_enb(block_name_idsREG_SYS_MANUAL_DFT_0_enb),
    .REG_SYS_MANUAL_DFT_0_REG_SYS_MANUAL_DFT_0_F_in(block_name_idsREG_SYS_MANUAL_DFT_0_REG_SYS_MANUAL_DFT_0_F_in),
    .REG_SYS_MANUAL_DFT_0_REG_SYS_MANUAL_DFT_0_F_in_enb(block_name_idsREG_SYS_MANUAL_DFT_0_REG_SYS_MANUAL_DFT_0_F_in_enb),
    .REG_SYS_MANUAL_DFT_0_REG_SYS_MANUAL_DFT_0_F_r(block_name_idsREG_SYS_MANUAL_DFT_0_REG_SYS_MANUAL_DFT_0_F_r),
    .REG_SYS_LGC_COEX_0_enb(block_name_idsREG_SYS_LGC_COEX_0_enb),
    .REG_SYS_LGC_COEX_0_REG_SYS_LGC_COEX_0_F_in(block_name_idsREG_SYS_LGC_COEX_0_REG_SYS_LGC_COEX_0_F_in),
    .REG_SYS_LGC_COEX_0_REG_SYS_LGC_COEX_0_F_in_enb(block_name_idsREG_SYS_LGC_COEX_0_REG_SYS_LGC_COEX_0_F_in_enb),
    .REG_SYS_LGC_COEX_0_REG_SYS_LGC_COEX_0_F_r(block_name_idsREG_SYS_LGC_COEX_0_REG_SYS_LGC_COEX_0_F_r),
    .REG_SYS_LGC_COEX_7_enb(block_name_idsREG_SYS_LGC_COEX_7_enb),
    .REG_SYS_LGC_COEX_7_REG_SYS_LGC_COEX_7_F_in(block_name_idsREG_SYS_LGC_COEX_7_REG_SYS_LGC_COEX_7_F_in),
    .REG_SYS_LGC_COEX_7_REG_SYS_LGC_COEX_7_F_in_enb(block_name_idsREG_SYS_LGC_COEX_7_REG_SYS_LGC_COEX_7_F_in_enb),
    .REG_SYS_LGC_COEX_7_REG_SYS_LGC_COEX_7_F_r(block_name_idsREG_SYS_LGC_COEX_7_REG_SYS_LGC_COEX_7_F_r),
    .REG_SYS_LGC_COEX_5_enb(block_name_idsREG_SYS_LGC_COEX_5_enb),
    .REG_SYS_LGC_COEX_5_REG_SYS_LGC_COEX_5_F_in(block_name_idsREG_SYS_LGC_COEX_5_REG_SYS_LGC_COEX_5_F_in),
    .REG_SYS_LGC_COEX_5_REG_SYS_LGC_COEX_5_F_in_enb(block_name_idsREG_SYS_LGC_COEX_5_REG_SYS_LGC_COEX_5_F_in_enb),
    .REG_SYS_LGC_COEX_5_REG_SYS_LGC_COEX_5_F_r(block_name_idsREG_SYS_LGC_COEX_5_REG_SYS_LGC_COEX_5_F_r),
    .REG_SYS_LGC_COEX_6_enb(block_name_idsREG_SYS_LGC_COEX_6_enb),
    .REG_SYS_LGC_COEX_6_REG_SYS_LGC_COEX_6_F_in(block_name_idsREG_SYS_LGC_COEX_6_REG_SYS_LGC_COEX_6_F_in),
    .REG_SYS_LGC_COEX_6_REG_SYS_LGC_COEX_6_F_in_enb(block_name_idsREG_SYS_LGC_COEX_6_REG_SYS_LGC_COEX_6_F_in_enb),
    .REG_SYS_LGC_COEX_6_REG_SYS_LGC_COEX_6_F_r(block_name_idsREG_SYS_LGC_COEX_6_REG_SYS_LGC_COEX_6_F_r),
    .CHA_REG_DAC_ANA_DIV_enb(block_name_idsCHA_REG_DAC_ANA_DIV_enb),
    .CHA_REG_DAC_ANA_DIV_CHA_REG_DAC_ANA_DIV_F_in(block_name_idsCHA_REG_DAC_ANA_DIV_CHA_REG_DAC_ANA_DIV_F_in),
    .CHA_REG_DAC_ANA_DIV_CHA_REG_DAC_ANA_DIV_F_in_enb(block_name_idsCHA_REG_DAC_ANA_DIV_CHA_REG_DAC_ANA_DIV_F_in_enb),
    .CHA_REG_DAC_ANA_DIV_CHA_REG_DAC_ANA_DIV_F_r(block_name_idsCHA_REG_DAC_ANA_DIV_CHA_REG_DAC_ANA_DIV_F_r),
    .REG_DPLL_ABS_enb(block_name_idsREG_DPLL_ABS_enb),
    .REG_DPLL_ABS_REG_DPLL_ABS_F_in(block_name_idsREG_DPLL_ABS_REG_DPLL_ABS_F_in),
    .REG_DPLL_ABS_REG_DPLL_ABS_F_in_enb(block_name_idsREG_DPLL_ABS_REG_DPLL_ABS_F_in_enb),
    .REG_DPLL_ABS_REG_DPLL_ABS_F_r(block_name_idsREG_DPLL_ABS_REG_DPLL_ABS_F_r),
    .REG_DPLL_ANALOG8_enb(block_name_idsREG_DPLL_ANALOG8_enb),
    .REG_DPLL_ANALOG8_REG_DPLL_ANALOG8_F_in(block_name_idsREG_DPLL_ANALOG8_REG_DPLL_ANALOG8_F_in),
    .REG_DPLL_ANALOG8_REG_DPLL_ANALOG8_F_in_enb(block_name_idsREG_DPLL_ANALOG8_REG_DPLL_ANALOG8_F_in_enb),
    .REG_DPLL_ANALOG8_REG_DPLL_ANALOG8_F_r(block_name_idsREG_DPLL_ANALOG8_REG_DPLL_ANALOG8_F_r),
    .REG_DPLL_DLF1_enb(block_name_idsREG_DPLL_DLF1_enb),
    .REG_DPLL_DLF1_REG_DPLL_DLF1_F_in(block_name_idsREG_DPLL_DLF1_REG_DPLL_DLF1_F_in),
    .REG_DPLL_DLF1_REG_DPLL_DLF1_F_in_enb(block_name_idsREG_DPLL_DLF1_REG_DPLL_DLF1_F_in_enb),
    .REG_DPLL_DLF1_REG_DPLL_DLF1_F_r(block_name_idsREG_DPLL_DLF1_REG_DPLL_DLF1_F_r),
    .REG_DPLL_DLF2_enb(block_name_idsREG_DPLL_DLF2_enb),
    .REG_DPLL_DLF2_REG_DPLL_DLF2_F_in(block_name_idsREG_DPLL_DLF2_REG_DPLL_DLF2_F_in),
    .REG_DPLL_DLF2_REG_DPLL_DLF2_F_in_enb(block_name_idsREG_DPLL_DLF2_REG_DPLL_DLF2_F_in_enb),
    .REG_DPLL_DLF2_REG_DPLL_DLF2_F_r(block_name_idsREG_DPLL_DLF2_REG_DPLL_DLF2_F_r),
    .REG_DPLL_SFTDC_enb(block_name_idsREG_DPLL_SFTDC_enb),
    .REG_DPLL_SFTDC_REG_DPLL_SFTDC_F_in(block_name_idsREG_DPLL_SFTDC_REG_DPLL_SFTDC_F_in),
    .REG_DPLL_SFTDC_REG_DPLL_SFTDC_F_in_enb(block_name_idsREG_DPLL_SFTDC_REG_DPLL_SFTDC_F_in_enb),
    .REG_DPLL_SFTDC_REG_DPLL_SFTDC_F_r(block_name_idsREG_DPLL_SFTDC_REG_DPLL_SFTDC_F_r),
    .REG_DPLL_DLF3_enb(block_name_idsREG_DPLL_DLF3_enb),
    .REG_DPLL_DLF3_REG_DPLL_DLF3_F_in(block_name_idsREG_DPLL_DLF3_REG_DPLL_DLF3_F_in),
    .REG_DPLL_DLF3_REG_DPLL_DLF3_F_in_enb(block_name_idsREG_DPLL_DLF3_REG_DPLL_DLF3_F_in_enb),
    .REG_DPLL_DLF3_REG_DPLL_DLF3_F_r(block_name_idsREG_DPLL_DLF3_REG_DPLL_DLF3_F_r),
    
    .aclk(aclk),
    .aresetn(aresetn),
    .awaddr(awaddr),
    .awvalid(awvalid  & ~(&bresp_ff & ~(bready & bvalid))),
    .awready(block_name_ids_awready),
    .awprot(awprot),
    .wdata(wdata),
    .wvalid(wvalid  & ~(&bresp_ff & ~(bready & bvalid))),
    .wready(block_name_ids_wready),
    .wstrb(wstrb),
    .bresp(block_name_ids_bresp),
    .bready(bready),
    .bvalid(block_name_ids_bvalid),
    .araddr(araddr),
    .arvalid(arvalid &  ~rd_error  & ~(&rresp_ff & ~rready)),
    .arready(block_name_ids_arready),
    .arprot(arprot),
    .rdata(block_name_ids_rdata),
    .rvalid(block_name_ids_rvalid),
    .rready(rready),
    .rresp(block_name_ids_rresp));
    
    
    assign invalid_address_wr = ~(block_name_ids_select_wr) ;
    assign invalid_address_rd = ~(block_name_ids_select_rd) ;
    
    
    
    assign rdata = block_name_ids_rdata;
    assign rvalid = &rresp_ff | block_name_ids_rvalid;
    assign awready =   &bresp_ff ?  (wvalid_ff & bready) : (block_name_ids_awready);
    assign wready =   (&bresp_ff &  wvalid_ff) ? bready : (block_name_ids_wready);
    assign slave_bresp = block_name_ids_bresp;
    assign bresp =  (bresp_ff & {2{wvalid_ff & awvalid_ff}})  | slave_bresp ;
    assign bvalid = (&bresp_ff & (wvalid_ff & awvalid_ff)) | block_name_ids_bvalid;
    assign arready =   &rresp_ff ? rready : (block_name_ids_arready);
    assign slave_rresp = block_name_ids_rresp;
    assign rresp =  rresp_ff  | slave_rresp ;
    
    
    
    assign wr_error = (invalid_address_wr && awvalid == 1'b1 && awready == 1'b1) ;
    assign rd_error = (invalid_address_rd && arvalid == 1'b1 && arready == 1'b1) ;
    
    
    always @(posedge aclk)
        begin
        if (!aresetn)
            begin
                bresp_ff    <= 2'b00 ;
                rresp_ff    <= 2'b00 ;
                awvalid_ff  <= 1'b0  ;
                wvalid_ff   <= 1'b0  ;
            end
        else
            begin
                awvalid_ff  <= (awvalid_ff & ~(awvalid & awready)) ?  ~(bvalid & bready) :  (awvalid & awready) ;
                wvalid_ff   <= (wvalid_ff & ~(wvalid & wready)) ?   ~(bvalid & bready) :  (wvalid & wready) ;
                rresp_ff    <= (rresp_ff == 2'b11 && rd_error  == 1'b0) ? {2{~rready}} : {2{rd_error}};
                
            if(awvalid_ff && &bresp_ff)
                begin
                    bresp_ff  <= (wr_error  == 1'b0  && wvalid_ff == 1'b1) ? {2{~bready}} : bresp_ff;
                end
            else
                begin
                    bresp_ff  <= (bresp_ff == 2'b11 && wr_error  == 1'b0) ? {2{~bready}} : {2{wr_error & ((awvalid & awready) | awvalid_ff)}};
                end
            end
    end // always clk
    
    
endmodule

//------------------------------------------------
//  BLOCK : BLOCK_NAME MODULE
//

module block_name_ids(
    
    // REGISTER : REG_SYS_LGC_GENERAL_0 PORT SIGNAL
    REG_SYS_LGC_GENERAL_0_enb,
    REG_SYS_LGC_GENERAL_0_REG_SYS_LGC_GENERAL_0_F_in,
    REG_SYS_LGC_GENERAL_0_REG_SYS_LGC_GENERAL_0_F_in_enb,
    REG_SYS_LGC_GENERAL_0_REG_SYS_LGC_GENERAL_0_F_r,
    
    
    // REGISTER : REG_SYS_LGC_LDOS_SYSMOD_0 PORT SIGNAL
    REG_SYS_LGC_LDOS_SYSMOD_0_enb,
    REG_SYS_LGC_LDOS_SYSMOD_0_REG_SYS_LGC_LDOS_SYSMOD_0_F_in,
    REG_SYS_LGC_LDOS_SYSMOD_0_REG_SYS_LGC_LDOS_SYSMOD_0_F_in_enb,
    REG_SYS_LGC_LDOS_SYSMOD_0_REG_SYS_LGC_LDOS_SYSMOD_0_F_r,
    
    
    // REGISTER : REG_DPLL_SYSTEM_CON PORT SIGNAL
    REG_DPLL_SYSTEM_CON_enb,
    REG_DPLL_SYSTEM_CON_REG_DPLL_SYSTEM_CON_F_in,
    REG_DPLL_SYSTEM_CON_REG_DPLL_SYSTEM_CON_F_in_enb,
    REG_DPLL_SYSTEM_CON_REG_DPLL_SYSTEM_CON_F_r,
    
    
    // REGISTER : REG_DPLL_SYSTEM_CFG PORT SIGNAL
    REG_DPLL_SYSTEM_CFG_enb,
    REG_DPLL_SYSTEM_CFG_REG_DPLL_SYSTEM_CFG_F_in,
    REG_DPLL_SYSTEM_CFG_REG_DPLL_SYSTEM_CFG_F_in_enb,
    REG_DPLL_SYSTEM_CFG_REG_DPLL_SYSTEM_CFG_F_r,
    
    
    // REGISTER : REG_DPLL_SYSTEM_CFG2 PORT SIGNAL
    REG_DPLL_SYSTEM_CFG2_enb,
    REG_DPLL_SYSTEM_CFG2_REG_DPLL_SYSTEM_CFG2_F_in,
    REG_DPLL_SYSTEM_CFG2_REG_DPLL_SYSTEM_CFG2_F_in_enb,
    REG_DPLL_SYSTEM_CFG2_REG_DPLL_SYSTEM_CFG2_F_r,
    
    
    // REGISTER : CHA_REG_ADC_MAN_PARA10 PORT SIGNAL
    CHA_REG_ADC_MAN_PARA10_enb,
    CHA_REG_ADC_MAN_PARA10_CHA_REG_ADC_MAN_PARA10_F_in,
    CHA_REG_ADC_MAN_PARA10_CHA_REG_ADC_MAN_PARA10_F_in_enb,
    CHA_REG_ADC_MAN_PARA10_CHA_REG_ADC_MAN_PARA10_F_r,
    
    
    // REGISTER : CHA_REG_TX_LB_MX_CFG PORT SIGNAL
    CHA_REG_TX_LB_MX_CFG_enb,
    CHA_REG_TX_LB_MX_CFG_CHA_REG_TX_LB_MX_CFG_F_in,
    CHA_REG_TX_LB_MX_CFG_CHA_REG_TX_LB_MX_CFG_F_in_enb,
    CHA_REG_TX_LB_MX_CFG_CHA_REG_TX_LB_MX_CFG_F_r,
    
    
    // REGISTER : CHA_REG_ADC_MAN_PARA102 PORT SIGNAL
    CHA_REG_ADC_MAN_PARA102_enb,
    CHA_REG_ADC_MAN_PARA102_CHA_REG_ADC_MAN_PARA102_F_in,
    CHA_REG_ADC_MAN_PARA102_CHA_REG_ADC_MAN_PARA102_F_in_enb,
    CHA_REG_ADC_MAN_PARA102_CHA_REG_ADC_MAN_PARA102_F_r,
    
    
    // REGISTER : REG_SYS_LGC_CM_0 PORT SIGNAL
    REG_SYS_LGC_CM_0_enb,
    REG_SYS_LGC_CM_0_REG_SYS_LGC_CM_0_F_in,
    REG_SYS_LGC_CM_0_REG_SYS_LGC_CM_0_F_in_enb,
    REG_SYS_LGC_CM_0_REG_SYS_LGC_CM_0_F_r,
    
    
    // REGISTER : REG_SYS_MANUAL_DFT_0 PORT SIGNAL
    REG_SYS_MANUAL_DFT_0_enb,
    REG_SYS_MANUAL_DFT_0_REG_SYS_MANUAL_DFT_0_F_in,
    REG_SYS_MANUAL_DFT_0_REG_SYS_MANUAL_DFT_0_F_in_enb,
    REG_SYS_MANUAL_DFT_0_REG_SYS_MANUAL_DFT_0_F_r,
    
    
    // REGISTER : REG_SYS_LGC_COEX_0 PORT SIGNAL
    REG_SYS_LGC_COEX_0_enb,
    REG_SYS_LGC_COEX_0_REG_SYS_LGC_COEX_0_F_in,
    REG_SYS_LGC_COEX_0_REG_SYS_LGC_COEX_0_F_in_enb,
    REG_SYS_LGC_COEX_0_REG_SYS_LGC_COEX_0_F_r,
    
    
    // REGISTER : REG_SYS_LGC_COEX_7 PORT SIGNAL
    REG_SYS_LGC_COEX_7_enb,
    REG_SYS_LGC_COEX_7_REG_SYS_LGC_COEX_7_F_in,
    REG_SYS_LGC_COEX_7_REG_SYS_LGC_COEX_7_F_in_enb,
    REG_SYS_LGC_COEX_7_REG_SYS_LGC_COEX_7_F_r,
    
    
    // REGISTER : REG_SYS_LGC_COEX_5 PORT SIGNAL
    REG_SYS_LGC_COEX_5_enb,
    REG_SYS_LGC_COEX_5_REG_SYS_LGC_COEX_5_F_in,
    REG_SYS_LGC_COEX_5_REG_SYS_LGC_COEX_5_F_in_enb,
    REG_SYS_LGC_COEX_5_REG_SYS_LGC_COEX_5_F_r,
    
    
    // REGISTER : REG_SYS_LGC_COEX_6 PORT SIGNAL
    REG_SYS_LGC_COEX_6_enb,
    REG_SYS_LGC_COEX_6_REG_SYS_LGC_COEX_6_F_in,
    REG_SYS_LGC_COEX_6_REG_SYS_LGC_COEX_6_F_in_enb,
    REG_SYS_LGC_COEX_6_REG_SYS_LGC_COEX_6_F_r,
    
    
    // REGISTER : CHA_REG_DAC_ANA_DIV PORT SIGNAL
    CHA_REG_DAC_ANA_DIV_enb,
    CHA_REG_DAC_ANA_DIV_CHA_REG_DAC_ANA_DIV_F_in,
    CHA_REG_DAC_ANA_DIV_CHA_REG_DAC_ANA_DIV_F_in_enb,
    CHA_REG_DAC_ANA_DIV_CHA_REG_DAC_ANA_DIV_F_r,
    
    
    // REGISTER : REG_DPLL_ABS PORT SIGNAL
    REG_DPLL_ABS_enb,
    REG_DPLL_ABS_REG_DPLL_ABS_F_in,
    REG_DPLL_ABS_REG_DPLL_ABS_F_in_enb,
    REG_DPLL_ABS_REG_DPLL_ABS_F_r,
    
    
    // REGISTER : REG_DPLL_ANALOG8 PORT SIGNAL
    REG_DPLL_ANALOG8_enb,
    REG_DPLL_ANALOG8_REG_DPLL_ANALOG8_F_in,
    REG_DPLL_ANALOG8_REG_DPLL_ANALOG8_F_in_enb,
    REG_DPLL_ANALOG8_REG_DPLL_ANALOG8_F_r,
    
    
    // REGISTER : REG_DPLL_DLF1 PORT SIGNAL
    REG_DPLL_DLF1_enb,
    REG_DPLL_DLF1_REG_DPLL_DLF1_F_in,
    REG_DPLL_DLF1_REG_DPLL_DLF1_F_in_enb,
    REG_DPLL_DLF1_REG_DPLL_DLF1_F_r,
    
    
    // REGISTER : REG_DPLL_DLF2 PORT SIGNAL
    REG_DPLL_DLF2_enb,
    REG_DPLL_DLF2_REG_DPLL_DLF2_F_in,
    REG_DPLL_DLF2_REG_DPLL_DLF2_F_in_enb,
    REG_DPLL_DLF2_REG_DPLL_DLF2_F_r,
    
    
    // REGISTER : REG_DPLL_SFTDC PORT SIGNAL
    REG_DPLL_SFTDC_enb,
    REG_DPLL_SFTDC_REG_DPLL_SFTDC_F_in,
    REG_DPLL_SFTDC_REG_DPLL_SFTDC_F_in_enb,
    REG_DPLL_SFTDC_REG_DPLL_SFTDC_F_r,
    
    
    // REGISTER : REG_DPLL_DLF3 PORT SIGNAL
    REG_DPLL_DLF3_enb,
    REG_DPLL_DLF3_REG_DPLL_DLF3_F_in,
    REG_DPLL_DLF3_REG_DPLL_DLF3_F_in_enb,
    REG_DPLL_DLF3_REG_DPLL_DLF3_F_r,
    
    
    
    //AXI signals
    aclk,   // Bus clock
    aresetn,   // Reset
    awaddr,   // Write address
    awvalid,   // Write address valid : This signal indicates that write address is valid
    awready,   // Write address ready : This signal indicates that the slave is ready to accept an address
    awprot,   // Write Protection Type
    wdata,   // Write data
    wvalid,   // Write valid         : This signal indicates that valid write data and strobes are available
    wready,   // Write ready         : This signal indicates that the slave can accept the write data
    wstrb,   // Write Strobes
    bresp,   // Write Response
    bready,   // Response Ready
    bvalid,   // Response valid
    araddr,   // Read  address
    arvalid,   // Read address valid  : This signal indicates that the read address is valid and will remain stable until ARREADY is high
    arready,   // Read address ready  : This signal indicates that the slave is ready to accept an address
    arprot,   // Read Protection Type
    rdata,   // Read data
    rvalid,   // Read valid          : This signal indicates that the required read data is available and the read transfer can complete
    rready,   // Read ready          : This signal indicates that the master can accept the read data
    rresp   // Read Response
    );
    //  PARAMETERS
    parameter bus_width   = 32;
    parameter addr_width = 7;
    
    parameter block_offset  = {(addr_width){1'b0}};
    
    
    parameter block_name_address_width = addr_width;
    //-----------------------------------------------------
    // REGISTER : REG_SYS_LGC_GENERAL_0 SIGNALS
    
    
    wire    REG_SYS_LGC_GENERAL_0_decode;         // Write DECODE
    wire    REG_SYS_LGC_GENERAL_0_rdecode;        // Read  DECODE
    wire    REG_SYS_LGC_GENERAL_0_wr_valid;       // WRITE VALID
    wire    REG_SYS_LGC_GENERAL_0_rd_valid;       // READ VALID
    wire    [bus_width-1 : 0] REG_SYS_LGC_GENERAL_0_rd_data;          // READ DATA
    wire    [64-1 : 0] REG_SYS_LGC_GENERAL_0_offset;  // OFFSET
    output  REG_SYS_LGC_GENERAL_0_enb;    // REGISTER ENABLE
    
    // HW WRITE-ABLE SIGNAL FOR EACH FIELD
    input   REG_SYS_LGC_GENERAL_0_REG_SYS_LGC_GENERAL_0_F_in_enb ;      // FIELD : REG_SYS_LGC_GENERAL_0_F
    
    // BUFFER SIGNAL FOR EACH FIELD
    reg [31 : 0] REG_SYS_LGC_GENERAL_0_REG_SYS_LGC_GENERAL_0_F_q ;      // FIELD : REG_SYS_LGC_GENERAL_0_F
    
    // READ DATA SIGNAL FOR EACH FIELD
    output  [31 : 0] REG_SYS_LGC_GENERAL_0_REG_SYS_LGC_GENERAL_0_F_r ;      // FIELD : REG_SYS_LGC_GENERAL_0_F
    
    // HW WRITE DATA SIGNAL FOR EACH FIELD
    input   [31 : 0] REG_SYS_LGC_GENERAL_0_REG_SYS_LGC_GENERAL_0_F_in ;      // FIELD : REG_SYS_LGC_GENERAL_0_F
    
    //-----------------------------------------------------
    
    
    //-----------------------------------------------------
    // REGISTER : REG_SYS_LGC_LDOS_SYSMOD_0 SIGNALS
    
    
    wire    REG_SYS_LGC_LDOS_SYSMOD_0_decode;         // Write DECODE
    wire    REG_SYS_LGC_LDOS_SYSMOD_0_rdecode;        // Read  DECODE
    wire    REG_SYS_LGC_LDOS_SYSMOD_0_wr_valid;       // WRITE VALID
    wire    REG_SYS_LGC_LDOS_SYSMOD_0_rd_valid;       // READ VALID
    wire    [bus_width-1 : 0] REG_SYS_LGC_LDOS_SYSMOD_0_rd_data;          // READ DATA
    wire    [64-1 : 0] REG_SYS_LGC_LDOS_SYSMOD_0_offset;  // OFFSET
    output  REG_SYS_LGC_LDOS_SYSMOD_0_enb;    // REGISTER ENABLE
    
    // HW WRITE-ABLE SIGNAL FOR EACH FIELD
    input   REG_SYS_LGC_LDOS_SYSMOD_0_REG_SYS_LGC_LDOS_SYSMOD_0_F_in_enb ;      // FIELD : REG_SYS_LGC_LDOS_SYSMOD_0_F
    
    // BUFFER SIGNAL FOR EACH FIELD
    reg [31 : 0] REG_SYS_LGC_LDOS_SYSMOD_0_REG_SYS_LGC_LDOS_SYSMOD_0_F_q ;      // FIELD : REG_SYS_LGC_LDOS_SYSMOD_0_F
    
    // READ DATA SIGNAL FOR EACH FIELD
    output  [31 : 0] REG_SYS_LGC_LDOS_SYSMOD_0_REG_SYS_LGC_LDOS_SYSMOD_0_F_r ;      // FIELD : REG_SYS_LGC_LDOS_SYSMOD_0_F
    
    // HW WRITE DATA SIGNAL FOR EACH FIELD
    input   [31 : 0] REG_SYS_LGC_LDOS_SYSMOD_0_REG_SYS_LGC_LDOS_SYSMOD_0_F_in ;      // FIELD : REG_SYS_LGC_LDOS_SYSMOD_0_F
    
    //-----------------------------------------------------
    
    
    //-----------------------------------------------------
    // REGISTER : REG_DPLL_SYSTEM_CON SIGNALS
    
    
    wire    REG_DPLL_SYSTEM_CON_decode;         // Write DECODE
    wire    REG_DPLL_SYSTEM_CON_rdecode;        // Read  DECODE
    wire    REG_DPLL_SYSTEM_CON_wr_valid;       // WRITE VALID
    wire    REG_DPLL_SYSTEM_CON_rd_valid;       // READ VALID
    wire    [bus_width-1 : 0] REG_DPLL_SYSTEM_CON_rd_data;          // READ DATA
    wire    [64-1 : 0] REG_DPLL_SYSTEM_CON_offset;  // OFFSET
    output  REG_DPLL_SYSTEM_CON_enb;    // REGISTER ENABLE
    
    // HW WRITE-ABLE SIGNAL FOR EACH FIELD
    input   REG_DPLL_SYSTEM_CON_REG_DPLL_SYSTEM_CON_F_in_enb ;      // FIELD : REG_DPLL_SYSTEM_CON_F
    
    // BUFFER SIGNAL FOR EACH FIELD
    reg [31 : 0] REG_DPLL_SYSTEM_CON_REG_DPLL_SYSTEM_CON_F_q ;      // FIELD : REG_DPLL_SYSTEM_CON_F
    
    // READ DATA SIGNAL FOR EACH FIELD
    output  [31 : 0] REG_DPLL_SYSTEM_CON_REG_DPLL_SYSTEM_CON_F_r ;      // FIELD : REG_DPLL_SYSTEM_CON_F
    
    // HW WRITE DATA SIGNAL FOR EACH FIELD
    input   [31 : 0] REG_DPLL_SYSTEM_CON_REG_DPLL_SYSTEM_CON_F_in ;      // FIELD : REG_DPLL_SYSTEM_CON_F
    
    //-----------------------------------------------------
    
    
    //-----------------------------------------------------
    // REGISTER : REG_DPLL_SYSTEM_CFG SIGNALS
    
    
    wire    REG_DPLL_SYSTEM_CFG_decode;         // Write DECODE
    wire    REG_DPLL_SYSTEM_CFG_rdecode;        // Read  DECODE
    wire    REG_DPLL_SYSTEM_CFG_wr_valid;       // WRITE VALID
    wire    REG_DPLL_SYSTEM_CFG_rd_valid;       // READ VALID
    wire    [bus_width-1 : 0] REG_DPLL_SYSTEM_CFG_rd_data;          // READ DATA
    wire    [64-1 : 0] REG_DPLL_SYSTEM_CFG_offset;  // OFFSET
    output  REG_DPLL_SYSTEM_CFG_enb;    // REGISTER ENABLE
    
    // HW WRITE-ABLE SIGNAL FOR EACH FIELD
    input   REG_DPLL_SYSTEM_CFG_REG_DPLL_SYSTEM_CFG_F_in_enb ;      // FIELD : REG_DPLL_SYSTEM_CFG_F
    
    // BUFFER SIGNAL FOR EACH FIELD
    reg [31 : 0] REG_DPLL_SYSTEM_CFG_REG_DPLL_SYSTEM_CFG_F_q ;      // FIELD : REG_DPLL_SYSTEM_CFG_F
    
    // READ DATA SIGNAL FOR EACH FIELD
    output  [31 : 0] REG_DPLL_SYSTEM_CFG_REG_DPLL_SYSTEM_CFG_F_r ;      // FIELD : REG_DPLL_SYSTEM_CFG_F
    
    // HW WRITE DATA SIGNAL FOR EACH FIELD
    input   [31 : 0] REG_DPLL_SYSTEM_CFG_REG_DPLL_SYSTEM_CFG_F_in ;      // FIELD : REG_DPLL_SYSTEM_CFG_F
    
    //-----------------------------------------------------
    
    
    //-----------------------------------------------------
    // REGISTER : REG_DPLL_SYSTEM_CFG2 SIGNALS
    
    
    wire    REG_DPLL_SYSTEM_CFG2_decode;         // Write DECODE
    wire    REG_DPLL_SYSTEM_CFG2_rdecode;        // Read  DECODE
    wire    REG_DPLL_SYSTEM_CFG2_wr_valid;       // WRITE VALID
    wire    REG_DPLL_SYSTEM_CFG2_rd_valid;       // READ VALID
    wire    [bus_width-1 : 0] REG_DPLL_SYSTEM_CFG2_rd_data;          // READ DATA
    wire    [64-1 : 0] REG_DPLL_SYSTEM_CFG2_offset;  // OFFSET
    output  REG_DPLL_SYSTEM_CFG2_enb;    // REGISTER ENABLE
    
    // HW WRITE-ABLE SIGNAL FOR EACH FIELD
    input   REG_DPLL_SYSTEM_CFG2_REG_DPLL_SYSTEM_CFG2_F_in_enb ;      // FIELD : REG_DPLL_SYSTEM_CFG2_F
    
    // BUFFER SIGNAL FOR EACH FIELD
    reg [31 : 0] REG_DPLL_SYSTEM_CFG2_REG_DPLL_SYSTEM_CFG2_F_q ;      // FIELD : REG_DPLL_SYSTEM_CFG2_F
    
    // READ DATA SIGNAL FOR EACH FIELD
    output  [31 : 0] REG_DPLL_SYSTEM_CFG2_REG_DPLL_SYSTEM_CFG2_F_r ;      // FIELD : REG_DPLL_SYSTEM_CFG2_F
    
    // HW WRITE DATA SIGNAL FOR EACH FIELD
    input   [31 : 0] REG_DPLL_SYSTEM_CFG2_REG_DPLL_SYSTEM_CFG2_F_in ;      // FIELD : REG_DPLL_SYSTEM_CFG2_F
    
    //-----------------------------------------------------
    
    
    //-----------------------------------------------------
    // REGISTER : CHA_REG_ADC_MAN_PARA10 SIGNALS
    
    
    wire    CHA_REG_ADC_MAN_PARA10_decode;         // Write DECODE
    wire    CHA_REG_ADC_MAN_PARA10_rdecode;        // Read  DECODE
    wire    CHA_REG_ADC_MAN_PARA10_wr_valid;       // WRITE VALID
    wire    CHA_REG_ADC_MAN_PARA10_rd_valid;       // READ VALID
    wire    [bus_width-1 : 0] CHA_REG_ADC_MAN_PARA10_rd_data;          // READ DATA
    wire    [64-1 : 0] CHA_REG_ADC_MAN_PARA10_offset;  // OFFSET
    output  CHA_REG_ADC_MAN_PARA10_enb;    // REGISTER ENABLE
    
    // HW WRITE-ABLE SIGNAL FOR EACH FIELD
    input   CHA_REG_ADC_MAN_PARA10_CHA_REG_ADC_MAN_PARA10_F_in_enb ;      // FIELD : CHA_REG_ADC_MAN_PARA10_F
    
    // BUFFER SIGNAL FOR EACH FIELD
    reg [31 : 0] CHA_REG_ADC_MAN_PARA10_CHA_REG_ADC_MAN_PARA10_F_q ;      // FIELD : CHA_REG_ADC_MAN_PARA10_F
    
    // READ DATA SIGNAL FOR EACH FIELD
    output  [31 : 0] CHA_REG_ADC_MAN_PARA10_CHA_REG_ADC_MAN_PARA10_F_r ;      // FIELD : CHA_REG_ADC_MAN_PARA10_F
    
    // HW WRITE DATA SIGNAL FOR EACH FIELD
    input   [31 : 0] CHA_REG_ADC_MAN_PARA10_CHA_REG_ADC_MAN_PARA10_F_in ;      // FIELD : CHA_REG_ADC_MAN_PARA10_F
    
    //-----------------------------------------------------
    
    
    //-----------------------------------------------------
    // REGISTER : CHA_REG_TX_LB_MX_CFG SIGNALS
    
    
    wire    CHA_REG_TX_LB_MX_CFG_decode;         // Write DECODE
    wire    CHA_REG_TX_LB_MX_CFG_rdecode;        // Read  DECODE
    wire    CHA_REG_TX_LB_MX_CFG_wr_valid;       // WRITE VALID
    wire    CHA_REG_TX_LB_MX_CFG_rd_valid;       // READ VALID
    wire    [bus_width-1 : 0] CHA_REG_TX_LB_MX_CFG_rd_data;          // READ DATA
    wire    [64-1 : 0] CHA_REG_TX_LB_MX_CFG_offset;  // OFFSET
    output  CHA_REG_TX_LB_MX_CFG_enb;    // REGISTER ENABLE
    
    // HW WRITE-ABLE SIGNAL FOR EACH FIELD
    input   CHA_REG_TX_LB_MX_CFG_CHA_REG_TX_LB_MX_CFG_F_in_enb ;      // FIELD : CHA_REG_TX_LB_MX_CFG_F
    
    // BUFFER SIGNAL FOR EACH FIELD
    reg [31 : 0] CHA_REG_TX_LB_MX_CFG_CHA_REG_TX_LB_MX_CFG_F_q ;      // FIELD : CHA_REG_TX_LB_MX_CFG_F
    
    // READ DATA SIGNAL FOR EACH FIELD
    output  [31 : 0] CHA_REG_TX_LB_MX_CFG_CHA_REG_TX_LB_MX_CFG_F_r ;      // FIELD : CHA_REG_TX_LB_MX_CFG_F
    
    // HW WRITE DATA SIGNAL FOR EACH FIELD
    input   [31 : 0] CHA_REG_TX_LB_MX_CFG_CHA_REG_TX_LB_MX_CFG_F_in ;      // FIELD : CHA_REG_TX_LB_MX_CFG_F
    
    //-----------------------------------------------------
    
    
    //-----------------------------------------------------
    // REGISTER : CHA_REG_ADC_MAN_PARA102 SIGNALS
    
    
    wire    CHA_REG_ADC_MAN_PARA102_decode;         // Write DECODE
    wire    CHA_REG_ADC_MAN_PARA102_rdecode;        // Read  DECODE
    wire    CHA_REG_ADC_MAN_PARA102_wr_valid;       // WRITE VALID
    wire    CHA_REG_ADC_MAN_PARA102_rd_valid;       // READ VALID
    wire    [bus_width-1 : 0] CHA_REG_ADC_MAN_PARA102_rd_data;          // READ DATA
    wire    [64-1 : 0] CHA_REG_ADC_MAN_PARA102_offset;  // OFFSET
    output  CHA_REG_ADC_MAN_PARA102_enb;    // REGISTER ENABLE
    
    // HW WRITE-ABLE SIGNAL FOR EACH FIELD
    input   CHA_REG_ADC_MAN_PARA102_CHA_REG_ADC_MAN_PARA102_F_in_enb ;      // FIELD : CHA_REG_ADC_MAN_PARA102_F
    
    // BUFFER SIGNAL FOR EACH FIELD
    reg [31 : 0] CHA_REG_ADC_MAN_PARA102_CHA_REG_ADC_MAN_PARA102_F_q ;      // FIELD : CHA_REG_ADC_MAN_PARA102_F
    
    // READ DATA SIGNAL FOR EACH FIELD
    output  [31 : 0] CHA_REG_ADC_MAN_PARA102_CHA_REG_ADC_MAN_PARA102_F_r ;      // FIELD : CHA_REG_ADC_MAN_PARA102_F
    
    // HW WRITE DATA SIGNAL FOR EACH FIELD
    input   [31 : 0] CHA_REG_ADC_MAN_PARA102_CHA_REG_ADC_MAN_PARA102_F_in ;      // FIELD : CHA_REG_ADC_MAN_PARA102_F
    
    //-----------------------------------------------------
    
    
    //-----------------------------------------------------
    // REGISTER : REG_SYS_LGC_CM_0 SIGNALS
    
    
    wire    REG_SYS_LGC_CM_0_decode;         // Write DECODE
    wire    REG_SYS_LGC_CM_0_rdecode;        // Read  DECODE
    wire    REG_SYS_LGC_CM_0_wr_valid;       // WRITE VALID
    wire    REG_SYS_LGC_CM_0_rd_valid;       // READ VALID
    wire    [bus_width-1 : 0] REG_SYS_LGC_CM_0_rd_data;          // READ DATA
    wire    [64-1 : 0] REG_SYS_LGC_CM_0_offset;  // OFFSET
    output  REG_SYS_LGC_CM_0_enb;    // REGISTER ENABLE
    
    // HW WRITE-ABLE SIGNAL FOR EACH FIELD
    input   REG_SYS_LGC_CM_0_REG_SYS_LGC_CM_0_F_in_enb ;      // FIELD : REG_SYS_LGC_CM_0_F
    
    // BUFFER SIGNAL FOR EACH FIELD
    reg [31 : 0] REG_SYS_LGC_CM_0_REG_SYS_LGC_CM_0_F_q ;      // FIELD : REG_SYS_LGC_CM_0_F
    
    // READ DATA SIGNAL FOR EACH FIELD
    output  [31 : 0] REG_SYS_LGC_CM_0_REG_SYS_LGC_CM_0_F_r ;      // FIELD : REG_SYS_LGC_CM_0_F
    
    // HW WRITE DATA SIGNAL FOR EACH FIELD
    input   [31 : 0] REG_SYS_LGC_CM_0_REG_SYS_LGC_CM_0_F_in ;      // FIELD : REG_SYS_LGC_CM_0_F
    
    //-----------------------------------------------------
    
    
    //-----------------------------------------------------
    // REGISTER : REG_SYS_MANUAL_DFT_0 SIGNALS
    
    
    wire    REG_SYS_MANUAL_DFT_0_decode;         // Write DECODE
    wire    REG_SYS_MANUAL_DFT_0_rdecode;        // Read  DECODE
    wire    REG_SYS_MANUAL_DFT_0_wr_valid;       // WRITE VALID
    wire    REG_SYS_MANUAL_DFT_0_rd_valid;       // READ VALID
    wire    [bus_width-1 : 0] REG_SYS_MANUAL_DFT_0_rd_data;          // READ DATA
    wire    [64-1 : 0] REG_SYS_MANUAL_DFT_0_offset;  // OFFSET
    output  REG_SYS_MANUAL_DFT_0_enb;    // REGISTER ENABLE
    
    // HW WRITE-ABLE SIGNAL FOR EACH FIELD
    input   REG_SYS_MANUAL_DFT_0_REG_SYS_MANUAL_DFT_0_F_in_enb ;      // FIELD : REG_SYS_MANUAL_DFT_0_F
    
    // BUFFER SIGNAL FOR EACH FIELD
    reg [31 : 0] REG_SYS_MANUAL_DFT_0_REG_SYS_MANUAL_DFT_0_F_q ;      // FIELD : REG_SYS_MANUAL_DFT_0_F
    
    // READ DATA SIGNAL FOR EACH FIELD
    output  [31 : 0] REG_SYS_MANUAL_DFT_0_REG_SYS_MANUAL_DFT_0_F_r ;      // FIELD : REG_SYS_MANUAL_DFT_0_F
    
    // HW WRITE DATA SIGNAL FOR EACH FIELD
    input   [31 : 0] REG_SYS_MANUAL_DFT_0_REG_SYS_MANUAL_DFT_0_F_in ;      // FIELD : REG_SYS_MANUAL_DFT_0_F
    
    //-----------------------------------------------------
    
    
    //-----------------------------------------------------
    // REGISTER : REG_SYS_LGC_COEX_0 SIGNALS
    
    
    wire    REG_SYS_LGC_COEX_0_decode;         // Write DECODE
    wire    REG_SYS_LGC_COEX_0_rdecode;        // Read  DECODE
    wire    REG_SYS_LGC_COEX_0_wr_valid;       // WRITE VALID
    wire    REG_SYS_LGC_COEX_0_rd_valid;       // READ VALID
    wire    [bus_width-1 : 0] REG_SYS_LGC_COEX_0_rd_data;          // READ DATA
    wire    [64-1 : 0] REG_SYS_LGC_COEX_0_offset;  // OFFSET
    output  REG_SYS_LGC_COEX_0_enb;    // REGISTER ENABLE
    
    // HW WRITE-ABLE SIGNAL FOR EACH FIELD
    input   REG_SYS_LGC_COEX_0_REG_SYS_LGC_COEX_0_F_in_enb ;      // FIELD : REG_SYS_LGC_COEX_0_F
    
    // BUFFER SIGNAL FOR EACH FIELD
    reg [31 : 0] REG_SYS_LGC_COEX_0_REG_SYS_LGC_COEX_0_F_q ;      // FIELD : REG_SYS_LGC_COEX_0_F
    
    // READ DATA SIGNAL FOR EACH FIELD
    output  [31 : 0] REG_SYS_LGC_COEX_0_REG_SYS_LGC_COEX_0_F_r ;      // FIELD : REG_SYS_LGC_COEX_0_F
    
    // HW WRITE DATA SIGNAL FOR EACH FIELD
    input   [31 : 0] REG_SYS_LGC_COEX_0_REG_SYS_LGC_COEX_0_F_in ;      // FIELD : REG_SYS_LGC_COEX_0_F
    
    //-----------------------------------------------------
    
    
    //-----------------------------------------------------
    // REGISTER : REG_SYS_LGC_COEX_7 SIGNALS
    
    
    wire    REG_SYS_LGC_COEX_7_decode;         // Write DECODE
    wire    REG_SYS_LGC_COEX_7_rdecode;        // Read  DECODE
    wire    REG_SYS_LGC_COEX_7_wr_valid;       // WRITE VALID
    wire    REG_SYS_LGC_COEX_7_rd_valid;       // READ VALID
    wire    [bus_width-1 : 0] REG_SYS_LGC_COEX_7_rd_data;          // READ DATA
    wire    [64-1 : 0] REG_SYS_LGC_COEX_7_offset;  // OFFSET
    output  REG_SYS_LGC_COEX_7_enb;    // REGISTER ENABLE
    
    // HW WRITE-ABLE SIGNAL FOR EACH FIELD
    input   REG_SYS_LGC_COEX_7_REG_SYS_LGC_COEX_7_F_in_enb ;      // FIELD : REG_SYS_LGC_COEX_7_F
    
    // BUFFER SIGNAL FOR EACH FIELD
    reg [31 : 0] REG_SYS_LGC_COEX_7_REG_SYS_LGC_COEX_7_F_q ;      // FIELD : REG_SYS_LGC_COEX_7_F
    
    // READ DATA SIGNAL FOR EACH FIELD
    output  [31 : 0] REG_SYS_LGC_COEX_7_REG_SYS_LGC_COEX_7_F_r ;      // FIELD : REG_SYS_LGC_COEX_7_F
    
    // HW WRITE DATA SIGNAL FOR EACH FIELD
    input   [31 : 0] REG_SYS_LGC_COEX_7_REG_SYS_LGC_COEX_7_F_in ;      // FIELD : REG_SYS_LGC_COEX_7_F
    
    //-----------------------------------------------------
    
    
    //-----------------------------------------------------
    // REGISTER : REG_SYS_LGC_COEX_5 SIGNALS
    
    
    wire    REG_SYS_LGC_COEX_5_decode;         // Write DECODE
    wire    REG_SYS_LGC_COEX_5_rdecode;        // Read  DECODE
    wire    REG_SYS_LGC_COEX_5_wr_valid;       // WRITE VALID
    wire    REG_SYS_LGC_COEX_5_rd_valid;       // READ VALID
    wire    [bus_width-1 : 0] REG_SYS_LGC_COEX_5_rd_data;          // READ DATA
    wire    [64-1 : 0] REG_SYS_LGC_COEX_5_offset;  // OFFSET
    output  REG_SYS_LGC_COEX_5_enb;    // REGISTER ENABLE
    
    // HW WRITE-ABLE SIGNAL FOR EACH FIELD
    input   REG_SYS_LGC_COEX_5_REG_SYS_LGC_COEX_5_F_in_enb ;      // FIELD : REG_SYS_LGC_COEX_5_F
    
    // BUFFER SIGNAL FOR EACH FIELD
    reg [31 : 0] REG_SYS_LGC_COEX_5_REG_SYS_LGC_COEX_5_F_q ;      // FIELD : REG_SYS_LGC_COEX_5_F
    
    // READ DATA SIGNAL FOR EACH FIELD
    output  [31 : 0] REG_SYS_LGC_COEX_5_REG_SYS_LGC_COEX_5_F_r ;      // FIELD : REG_SYS_LGC_COEX_5_F
    
    // HW WRITE DATA SIGNAL FOR EACH FIELD
    input   [31 : 0] REG_SYS_LGC_COEX_5_REG_SYS_LGC_COEX_5_F_in ;      // FIELD : REG_SYS_LGC_COEX_5_F
    
    //-----------------------------------------------------
    
    
    //-----------------------------------------------------
    // REGISTER : REG_SYS_LGC_COEX_6 SIGNALS
    
    
    wire    REG_SYS_LGC_COEX_6_decode;         // Write DECODE
    wire    REG_SYS_LGC_COEX_6_rdecode;        // Read  DECODE
    wire    REG_SYS_LGC_COEX_6_wr_valid;       // WRITE VALID
    wire    REG_SYS_LGC_COEX_6_rd_valid;       // READ VALID
    wire    [bus_width-1 : 0] REG_SYS_LGC_COEX_6_rd_data;          // READ DATA
    wire    [64-1 : 0] REG_SYS_LGC_COEX_6_offset;  // OFFSET
    output  REG_SYS_LGC_COEX_6_enb;    // REGISTER ENABLE
    
    // HW WRITE-ABLE SIGNAL FOR EACH FIELD
    input   REG_SYS_LGC_COEX_6_REG_SYS_LGC_COEX_6_F_in_enb ;      // FIELD : REG_SYS_LGC_COEX_6_F
    
    // BUFFER SIGNAL FOR EACH FIELD
    reg [31 : 0] REG_SYS_LGC_COEX_6_REG_SYS_LGC_COEX_6_F_q ;      // FIELD : REG_SYS_LGC_COEX_6_F
    
    // READ DATA SIGNAL FOR EACH FIELD
    output  [31 : 0] REG_SYS_LGC_COEX_6_REG_SYS_LGC_COEX_6_F_r ;      // FIELD : REG_SYS_LGC_COEX_6_F
    
    // HW WRITE DATA SIGNAL FOR EACH FIELD
    input   [31 : 0] REG_SYS_LGC_COEX_6_REG_SYS_LGC_COEX_6_F_in ;      // FIELD : REG_SYS_LGC_COEX_6_F
    
    //-----------------------------------------------------
    
    
    //-----------------------------------------------------
    // REGISTER : CHA_REG_DAC_ANA_DIV SIGNALS
    
    
    wire    CHA_REG_DAC_ANA_DIV_decode;         // Write DECODE
    wire    CHA_REG_DAC_ANA_DIV_rdecode;        // Read  DECODE
    wire    CHA_REG_DAC_ANA_DIV_wr_valid;       // WRITE VALID
    wire    CHA_REG_DAC_ANA_DIV_rd_valid;       // READ VALID
    wire    [bus_width-1 : 0] CHA_REG_DAC_ANA_DIV_rd_data;          // READ DATA
    wire    [64-1 : 0] CHA_REG_DAC_ANA_DIV_offset;  // OFFSET
    output  CHA_REG_DAC_ANA_DIV_enb;    // REGISTER ENABLE
    
    // HW WRITE-ABLE SIGNAL FOR EACH FIELD
    input   CHA_REG_DAC_ANA_DIV_CHA_REG_DAC_ANA_DIV_F_in_enb ;      // FIELD : CHA_REG_DAC_ANA_DIV_F
    
    // BUFFER SIGNAL FOR EACH FIELD
    reg [31 : 0] CHA_REG_DAC_ANA_DIV_CHA_REG_DAC_ANA_DIV_F_q ;      // FIELD : CHA_REG_DAC_ANA_DIV_F
    
    // READ DATA SIGNAL FOR EACH FIELD
    output  [31 : 0] CHA_REG_DAC_ANA_DIV_CHA_REG_DAC_ANA_DIV_F_r ;      // FIELD : CHA_REG_DAC_ANA_DIV_F
    
    // HW WRITE DATA SIGNAL FOR EACH FIELD
    input   [31 : 0] CHA_REG_DAC_ANA_DIV_CHA_REG_DAC_ANA_DIV_F_in ;      // FIELD : CHA_REG_DAC_ANA_DIV_F
    
    //-----------------------------------------------------
    
    
    //-----------------------------------------------------
    // REGISTER : REG_DPLL_ABS SIGNALS
    
    
    wire    REG_DPLL_ABS_decode;         // Write DECODE
    wire    REG_DPLL_ABS_rdecode;        // Read  DECODE
    wire    REG_DPLL_ABS_wr_valid;       // WRITE VALID
    wire    REG_DPLL_ABS_rd_valid;       // READ VALID
    wire    [bus_width-1 : 0] REG_DPLL_ABS_rd_data;          // READ DATA
    wire    [64-1 : 0] REG_DPLL_ABS_offset;  // OFFSET
    output  REG_DPLL_ABS_enb;    // REGISTER ENABLE
    
    // HW WRITE-ABLE SIGNAL FOR EACH FIELD
    input   REG_DPLL_ABS_REG_DPLL_ABS_F_in_enb ;      // FIELD : REG_DPLL_ABS_F
    
    // BUFFER SIGNAL FOR EACH FIELD
    reg [31 : 0] REG_DPLL_ABS_REG_DPLL_ABS_F_q ;      // FIELD : REG_DPLL_ABS_F
    
    // READ DATA SIGNAL FOR EACH FIELD
    output  [31 : 0] REG_DPLL_ABS_REG_DPLL_ABS_F_r ;      // FIELD : REG_DPLL_ABS_F
    
    // HW WRITE DATA SIGNAL FOR EACH FIELD
    input   [31 : 0] REG_DPLL_ABS_REG_DPLL_ABS_F_in ;      // FIELD : REG_DPLL_ABS_F
    
    //-----------------------------------------------------
    
    
    //-----------------------------------------------------
    // REGISTER : REG_DPLL_ANALOG8 SIGNALS
    
    
    wire    REG_DPLL_ANALOG8_decode;         // Write DECODE
    wire    REG_DPLL_ANALOG8_rdecode;        // Read  DECODE
    wire    REG_DPLL_ANALOG8_wr_valid;       // WRITE VALID
    wire    REG_DPLL_ANALOG8_rd_valid;       // READ VALID
    wire    [bus_width-1 : 0] REG_DPLL_ANALOG8_rd_data;          // READ DATA
    wire    [64-1 : 0] REG_DPLL_ANALOG8_offset;  // OFFSET
    output  REG_DPLL_ANALOG8_enb;    // REGISTER ENABLE
    
    // HW WRITE-ABLE SIGNAL FOR EACH FIELD
    input   REG_DPLL_ANALOG8_REG_DPLL_ANALOG8_F_in_enb ;      // FIELD : REG_DPLL_ANALOG8_F
    
    // BUFFER SIGNAL FOR EACH FIELD
    reg [31 : 0] REG_DPLL_ANALOG8_REG_DPLL_ANALOG8_F_q ;      // FIELD : REG_DPLL_ANALOG8_F
    
    // READ DATA SIGNAL FOR EACH FIELD
    output  [31 : 0] REG_DPLL_ANALOG8_REG_DPLL_ANALOG8_F_r ;      // FIELD : REG_DPLL_ANALOG8_F
    
    // HW WRITE DATA SIGNAL FOR EACH FIELD
    input   [31 : 0] REG_DPLL_ANALOG8_REG_DPLL_ANALOG8_F_in ;      // FIELD : REG_DPLL_ANALOG8_F
    
    //-----------------------------------------------------
    
    
    //-----------------------------------------------------
    // REGISTER : REG_DPLL_DLF1 SIGNALS
    
    
    wire    REG_DPLL_DLF1_decode;         // Write DECODE
    wire    REG_DPLL_DLF1_rdecode;        // Read  DECODE
    wire    REG_DPLL_DLF1_wr_valid;       // WRITE VALID
    wire    REG_DPLL_DLF1_rd_valid;       // READ VALID
    wire    [bus_width-1 : 0] REG_DPLL_DLF1_rd_data;          // READ DATA
    wire    [64-1 : 0] REG_DPLL_DLF1_offset;  // OFFSET
    output  REG_DPLL_DLF1_enb;    // REGISTER ENABLE
    
    // HW WRITE-ABLE SIGNAL FOR EACH FIELD
    input   REG_DPLL_DLF1_REG_DPLL_DLF1_F_in_enb ;      // FIELD : REG_DPLL_DLF1_F
    
    // BUFFER SIGNAL FOR EACH FIELD
    reg [31 : 0] REG_DPLL_DLF1_REG_DPLL_DLF1_F_q ;      // FIELD : REG_DPLL_DLF1_F
    
    // READ DATA SIGNAL FOR EACH FIELD
    output  [31 : 0] REG_DPLL_DLF1_REG_DPLL_DLF1_F_r ;      // FIELD : REG_DPLL_DLF1_F
    
    // HW WRITE DATA SIGNAL FOR EACH FIELD
    input   [31 : 0] REG_DPLL_DLF1_REG_DPLL_DLF1_F_in ;      // FIELD : REG_DPLL_DLF1_F
    
    //-----------------------------------------------------
    
    
    //-----------------------------------------------------
    // REGISTER : REG_DPLL_DLF2 SIGNALS
    
    
    wire    REG_DPLL_DLF2_decode;         // Write DECODE
    wire    REG_DPLL_DLF2_rdecode;        // Read  DECODE
    wire    REG_DPLL_DLF2_wr_valid;       // WRITE VALID
    wire    REG_DPLL_DLF2_rd_valid;       // READ VALID
    wire    [bus_width-1 : 0] REG_DPLL_DLF2_rd_data;          // READ DATA
    wire    [64-1 : 0] REG_DPLL_DLF2_offset;  // OFFSET
    output  REG_DPLL_DLF2_enb;    // REGISTER ENABLE
    
    // HW WRITE-ABLE SIGNAL FOR EACH FIELD
    input   REG_DPLL_DLF2_REG_DPLL_DLF2_F_in_enb ;      // FIELD : REG_DPLL_DLF2_F
    
    // BUFFER SIGNAL FOR EACH FIELD
    reg [31 : 0] REG_DPLL_DLF2_REG_DPLL_DLF2_F_q ;      // FIELD : REG_DPLL_DLF2_F
    
    // READ DATA SIGNAL FOR EACH FIELD
    output  [31 : 0] REG_DPLL_DLF2_REG_DPLL_DLF2_F_r ;      // FIELD : REG_DPLL_DLF2_F
    
    // HW WRITE DATA SIGNAL FOR EACH FIELD
    input   [31 : 0] REG_DPLL_DLF2_REG_DPLL_DLF2_F_in ;      // FIELD : REG_DPLL_DLF2_F
    
    //-----------------------------------------------------
    
    
    //-----------------------------------------------------
    // REGISTER : REG_DPLL_SFTDC SIGNALS
    
    
    wire    REG_DPLL_SFTDC_decode;         // Write DECODE
    wire    REG_DPLL_SFTDC_rdecode;        // Read  DECODE
    wire    REG_DPLL_SFTDC_wr_valid;       // WRITE VALID
    wire    REG_DPLL_SFTDC_rd_valid;       // READ VALID
    wire    [bus_width-1 : 0] REG_DPLL_SFTDC_rd_data;          // READ DATA
    wire    [64-1 : 0] REG_DPLL_SFTDC_offset;  // OFFSET
    output  REG_DPLL_SFTDC_enb;    // REGISTER ENABLE
    
    // HW WRITE-ABLE SIGNAL FOR EACH FIELD
    input   REG_DPLL_SFTDC_REG_DPLL_SFTDC_F_in_enb ;      // FIELD : REG_DPLL_SFTDC_F
    
    // BUFFER SIGNAL FOR EACH FIELD
    reg [31 : 0] REG_DPLL_SFTDC_REG_DPLL_SFTDC_F_q ;      // FIELD : REG_DPLL_SFTDC_F
    
    // READ DATA SIGNAL FOR EACH FIELD
    output  [31 : 0] REG_DPLL_SFTDC_REG_DPLL_SFTDC_F_r ;      // FIELD : REG_DPLL_SFTDC_F
    
    // HW WRITE DATA SIGNAL FOR EACH FIELD
    input   [31 : 0] REG_DPLL_SFTDC_REG_DPLL_SFTDC_F_in ;      // FIELD : REG_DPLL_SFTDC_F
    
    //-----------------------------------------------------
    
    
    //-----------------------------------------------------
    // REGISTER : REG_DPLL_DLF3 SIGNALS
    
    
    wire    REG_DPLL_DLF3_decode;         // Write DECODE
    wire    REG_DPLL_DLF3_rdecode;        // Read  DECODE
    wire    REG_DPLL_DLF3_wr_valid;       // WRITE VALID
    wire    REG_DPLL_DLF3_rd_valid;       // READ VALID
    wire    [bus_width-1 : 0] REG_DPLL_DLF3_rd_data;          // READ DATA
    wire    [64-1 : 0] REG_DPLL_DLF3_offset;  // OFFSET
    output  REG_DPLL_DLF3_enb;    // REGISTER ENABLE
    
    // HW WRITE-ABLE SIGNAL FOR EACH FIELD
    input   REG_DPLL_DLF3_REG_DPLL_DLF3_F_in_enb ;      // FIELD : REG_DPLL_DLF3_F
    
    // BUFFER SIGNAL FOR EACH FIELD
    reg [31 : 0] REG_DPLL_DLF3_REG_DPLL_DLF3_F_q ;      // FIELD : REG_DPLL_DLF3_F
    
    // READ DATA SIGNAL FOR EACH FIELD
    output  [31 : 0] REG_DPLL_DLF3_REG_DPLL_DLF3_F_r ;      // FIELD : REG_DPLL_DLF3_F
    
    // HW WRITE DATA SIGNAL FOR EACH FIELD
    input   [31 : 0] REG_DPLL_DLF3_REG_DPLL_DLF3_F_in ;      // FIELD : REG_DPLL_DLF3_F
    
    //-----------------------------------------------------
    
    
    
    //AXI signals
    input aclk;
    input aresetn;
    input [addr_width-1 : 0] awaddr;
    input awvalid;
    output awready;
    input [2 : 0] awprot;
    wire  [2 : 0] awprot_i;
    input [bus_width-1 : 0] wdata;
    input wvalid;
    output wready;
    input [bus_width/8-1 : 0] wstrb;
    output [1 : 0] bresp;
    input bready;
    output bvalid;
    input [addr_width-1 : 0] araddr;
    input arvalid;
    output arready;
    input [2 : 0] arprot;
    wire  [2 : 0] arprot_i;
    output [bus_width-1 : 0] rdata;
    output rvalid;
    input rready;
    output [1 : 0] rresp;
    
    wire  clk;
    wire  reset_l;
    wire   rd_stb;
    wire   rd_wait;
    wire   wr_stb;
    wire  [addr_width-1:0]  address;
    wire  [bus_width-1:0]  wr_data;
    wire   request;
    wire  rd_data_vld;
    wire  [bus_width-1:0] rd_data;
    wire [addr_width-1 : 0] raddress;
    wire  wr_error;
    wire  rd_error;
    wire  wr_decode_error;
    wire  rd_decode_error;
    wire  wr_slave_select;
    wire  rd_slave_select;
    wire  [addr_width-1:0] slvwaddr;
    wire  [addr_width-1:0] slvraddr;
    wire [bus_width-1 : 0] reg_enb;
    wire [bus_width/8 -1 : 0] byte_enb;
    
    axi_widget #(.addr_width(addr_width), .bus_width(bus_width)) axi(
            .aclk(aclk),
            .aresetn(aresetn),
            .awaddr(awaddr),
            .awvalid(awvalid),
            .awready(awready),
            .awprot(awprot),
            .awprot_i(awprot_i),
            .wdata(wdata),
            .wvalid(wvalid),
            .wready(wready),
            .wstrb(wstrb),
            .bresp(bresp),
            .bready(bready),
            .bvalid(bvalid),
            .araddr(araddr),
            .arvalid(arvalid),
            .arready(arready),
            .arprot(arprot),
            .arprot_i(arprot_i),
            .rdata(rdata),
            .rvalid(rvalid),
            .rready(rready),
            .rresp(rresp),
            .clk(clk),
            .reset_l(reset_l),
            .request(request),
            .wr_stb(wr_stb),
            .wr_decode_error(wr_decode_error),
            .rd_decode_error(rd_decode_error),
            .wr_slave_select(wr_slave_select),
            .rd_slave_select(rd_slave_select),
            .slvwaddr(slvwaddr),
            .slvraddr(slvraddr),
            .rd_stb(rd_stb),
            .rd_wait(rd_wait),
            .wr_error(wr_error),
            .rd_error(rd_error),
            .rd_data(rd_data),
            .wr_data(wr_data),
            .address(address),
            .raddress(raddress),
            .rd_data_vld(rd_data_vld),
            .byte_enb(byte_enb));
    //end widget
    
    assign reg_enb =  {
    {8{byte_enb[3]}} ,
    {8{byte_enb[2]}} ,
    {8{byte_enb[1]}} ,
    {8{byte_enb[0]}}};
    
    
    
    
    //----------------------------------------------------------------------------------------------------
    // REGISTER      :  REG_SYS_LGC_GENERAL_0
    // ADDRESS       :  block_offset+'h0                WIDTH : 32
    // HW ACCESS     :  READ-WRITE
    // SW ACCESS     :  READ-WRITE
    //
    // FIELDS   :
    //     31:0 : REG_SYS_LGC_GENERAL_0_F  ( SW : Read-Write HW : Read-Write )
    
    //-----------------------------------------------------------------------------
    // DESCRIPTION  :  NA
    //
    
    
    assign REG_SYS_LGC_GENERAL_0_wr_valid = REG_SYS_LGC_GENERAL_0_decode && wr_stb;
    assign REG_SYS_LGC_GENERAL_0_rd_valid = REG_SYS_LGC_GENERAL_0_rdecode && rd_stb;
    assign REG_SYS_LGC_GENERAL_0_enb      = REG_SYS_LGC_GENERAL_0_wr_valid;
    assign REG_SYS_LGC_GENERAL_0_offset = block_offset+'h0;
    assign REG_SYS_LGC_GENERAL_0_decode  = (address[block_name_address_width-1 : 0]    == REG_SYS_LGC_GENERAL_0_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    assign REG_SYS_LGC_GENERAL_0_rdecode = (raddress[block_name_address_width-1 : 0]   == REG_SYS_LGC_GENERAL_0_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    
    
    //----------------------------------------------------------------------------
    // FIELD  : REG_SYS_LGC_GENERAL_0_F
    // HW ACCESS  :  READ-WRITE                          WIDTH  :  32
    // SW ACCESS  :  READ-WRITE                          OFFSET :  0
    //-----------------------------------------------------------------
    // DESCRIPTION   :
    //
    
    always @(posedge clk)
        
        begin
        if (!reset_l)
            begin
                
                REG_SYS_LGC_GENERAL_0_REG_SYS_LGC_GENERAL_0_F_q  <= 32'd1;
            end
        else
            begin
            if (REG_SYS_LGC_GENERAL_0_REG_SYS_LGC_GENERAL_0_F_in_enb)   // REG_SYS_LGC_GENERAL_0_F : HW Write
                begin
                    REG_SYS_LGC_GENERAL_0_REG_SYS_LGC_GENERAL_0_F_q <= REG_SYS_LGC_GENERAL_0_REG_SYS_LGC_GENERAL_0_F_in;
                end
            else
                begin
                    
                if (REG_SYS_LGC_GENERAL_0_wr_valid)   // REG_SYS_LGC_GENERAL_0_F : SW Write
                    begin
                        REG_SYS_LGC_GENERAL_0_REG_SYS_LGC_GENERAL_0_F_q <=  ( wr_data[31 : 0] & reg_enb[31 : 0] ) | (REG_SYS_LGC_GENERAL_0_REG_SYS_LGC_GENERAL_0_F_q & (~reg_enb[31 : 0]));
                    end
                    
                end  // sw_write_close
            end
    end // always clk
    
    //----------------------------------------------------------------------------
    
    
    // ===================================================
    // HW OUTPUT READ DATA FOR EACH FIELD
    assign REG_SYS_LGC_GENERAL_0_REG_SYS_LGC_GENERAL_0_F_r  =  REG_SYS_LGC_GENERAL_0_REG_SYS_LGC_GENERAL_0_F_q ;    // Field : REG_SYS_LGC_GENERAL_0_F
    
    
    assign REG_SYS_LGC_GENERAL_0_rd_data = REG_SYS_LGC_GENERAL_0_rd_valid ? {REG_SYS_LGC_GENERAL_0_REG_SYS_LGC_GENERAL_0_F_q} : 32'b00000000000000000000000000000000;
    
    
    //----------------------------------------------------------------------------------------------------
    // REGISTER      :  REG_SYS_LGC_LDOS_SYSMOD_0
    // ADDRESS       :  block_offset+'h4                WIDTH : 32
    // HW ACCESS     :  READ-WRITE
    // SW ACCESS     :  READ-WRITE
    //
    // FIELDS   :
    //     31:0 : REG_SYS_LGC_LDOS_SYSMOD_0_F  ( SW : Read-Write HW : Read-Write )
    
    //-----------------------------------------------------------------------------
    // DESCRIPTION  :  NA
    //
    
    
    assign REG_SYS_LGC_LDOS_SYSMOD_0_wr_valid = REG_SYS_LGC_LDOS_SYSMOD_0_decode && wr_stb;
    assign REG_SYS_LGC_LDOS_SYSMOD_0_rd_valid = REG_SYS_LGC_LDOS_SYSMOD_0_rdecode && rd_stb;
    assign REG_SYS_LGC_LDOS_SYSMOD_0_enb      = REG_SYS_LGC_LDOS_SYSMOD_0_wr_valid;
    assign REG_SYS_LGC_LDOS_SYSMOD_0_offset = block_offset+'h4;
    assign REG_SYS_LGC_LDOS_SYSMOD_0_decode  = (address[block_name_address_width-1 : 0]    == REG_SYS_LGC_LDOS_SYSMOD_0_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    assign REG_SYS_LGC_LDOS_SYSMOD_0_rdecode = (raddress[block_name_address_width-1 : 0]   == REG_SYS_LGC_LDOS_SYSMOD_0_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    
    
    //----------------------------------------------------------------------------
    // FIELD  : REG_SYS_LGC_LDOS_SYSMOD_0_F
    // HW ACCESS  :  READ-WRITE                          WIDTH  :  32
    // SW ACCESS  :  READ-WRITE                          OFFSET :  0
    //-----------------------------------------------------------------
    // DESCRIPTION   :
    //
    
    always @(posedge clk)
        
        begin
        if (!reset_l)
            begin
                
                REG_SYS_LGC_LDOS_SYSMOD_0_REG_SYS_LGC_LDOS_SYSMOD_0_F_q  <= 32'd6;
            end
        else
            begin
            if (REG_SYS_LGC_LDOS_SYSMOD_0_REG_SYS_LGC_LDOS_SYSMOD_0_F_in_enb)   // REG_SYS_LGC_LDOS_SYSMOD_0_F : HW Write
                begin
                    REG_SYS_LGC_LDOS_SYSMOD_0_REG_SYS_LGC_LDOS_SYSMOD_0_F_q <= REG_SYS_LGC_LDOS_SYSMOD_0_REG_SYS_LGC_LDOS_SYSMOD_0_F_in;
                end
            else
                begin
                    
                if (REG_SYS_LGC_LDOS_SYSMOD_0_wr_valid)   // REG_SYS_LGC_LDOS_SYSMOD_0_F : SW Write
                    begin
                        REG_SYS_LGC_LDOS_SYSMOD_0_REG_SYS_LGC_LDOS_SYSMOD_0_F_q <=  ( wr_data[31 : 0] & reg_enb[31 : 0] ) | (REG_SYS_LGC_LDOS_SYSMOD_0_REG_SYS_LGC_LDOS_SYSMOD_0_F_q & (~reg_enb[31 : 0]));
                    end
                    
                end  // sw_write_close
            end
    end // always clk
    
    //----------------------------------------------------------------------------
    
    
    // ===================================================
    // HW OUTPUT READ DATA FOR EACH FIELD
    assign REG_SYS_LGC_LDOS_SYSMOD_0_REG_SYS_LGC_LDOS_SYSMOD_0_F_r  =  REG_SYS_LGC_LDOS_SYSMOD_0_REG_SYS_LGC_LDOS_SYSMOD_0_F_q ;    // Field : REG_SYS_LGC_LDOS_SYSMOD_0_F
    
    
    assign REG_SYS_LGC_LDOS_SYSMOD_0_rd_data = REG_SYS_LGC_LDOS_SYSMOD_0_rd_valid ? {REG_SYS_LGC_LDOS_SYSMOD_0_REG_SYS_LGC_LDOS_SYSMOD_0_F_q} : 32'b00000000000000000000000000000000;
    
    
    //----------------------------------------------------------------------------------------------------
    // REGISTER      :  REG_DPLL_SYSTEM_CON
    // ADDRESS       :  block_offset+'h8                WIDTH : 32
    // HW ACCESS     :  READ-WRITE
    // SW ACCESS     :  READ-WRITE
    //
    // FIELDS   :
    //     31:0 : REG_DPLL_SYSTEM_CON_F  ( SW : Read-Write HW : Read-Write )
    
    //-----------------------------------------------------------------------------
    // DESCRIPTION  :  NA
    //
    
    
    assign REG_DPLL_SYSTEM_CON_wr_valid = REG_DPLL_SYSTEM_CON_decode && wr_stb;
    assign REG_DPLL_SYSTEM_CON_rd_valid = REG_DPLL_SYSTEM_CON_rdecode && rd_stb;
    assign REG_DPLL_SYSTEM_CON_enb      = REG_DPLL_SYSTEM_CON_wr_valid;
    assign REG_DPLL_SYSTEM_CON_offset = block_offset+'h8;
    assign REG_DPLL_SYSTEM_CON_decode  = (address[block_name_address_width-1 : 0]    == REG_DPLL_SYSTEM_CON_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    assign REG_DPLL_SYSTEM_CON_rdecode = (raddress[block_name_address_width-1 : 0]   == REG_DPLL_SYSTEM_CON_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    
    
    //----------------------------------------------------------------------------
    // FIELD  : REG_DPLL_SYSTEM_CON_F
    // HW ACCESS  :  READ-WRITE                          WIDTH  :  32
    // SW ACCESS  :  READ-WRITE                          OFFSET :  0
    //-----------------------------------------------------------------
    // DESCRIPTION   :
    //
    
    always @(posedge clk)
        
        begin
        if (!reset_l)
            begin
                
                REG_DPLL_SYSTEM_CON_REG_DPLL_SYSTEM_CON_F_q  <= 32'd4;
            end
        else
            begin
            if (REG_DPLL_SYSTEM_CON_REG_DPLL_SYSTEM_CON_F_in_enb)   // REG_DPLL_SYSTEM_CON_F : HW Write
                begin
                    REG_DPLL_SYSTEM_CON_REG_DPLL_SYSTEM_CON_F_q <= REG_DPLL_SYSTEM_CON_REG_DPLL_SYSTEM_CON_F_in;
                end
            else
                begin
                    
                if (REG_DPLL_SYSTEM_CON_wr_valid)   // REG_DPLL_SYSTEM_CON_F : SW Write
                    begin
                        REG_DPLL_SYSTEM_CON_REG_DPLL_SYSTEM_CON_F_q <=  ( wr_data[31 : 0] & reg_enb[31 : 0] ) | (REG_DPLL_SYSTEM_CON_REG_DPLL_SYSTEM_CON_F_q & (~reg_enb[31 : 0]));
                    end
                    
                end  // sw_write_close
            end
    end // always clk
    
    //----------------------------------------------------------------------------
    
    
    // ===================================================
    // HW OUTPUT READ DATA FOR EACH FIELD
    assign REG_DPLL_SYSTEM_CON_REG_DPLL_SYSTEM_CON_F_r  =  REG_DPLL_SYSTEM_CON_REG_DPLL_SYSTEM_CON_F_q ;    // Field : REG_DPLL_SYSTEM_CON_F
    
    
    assign REG_DPLL_SYSTEM_CON_rd_data = REG_DPLL_SYSTEM_CON_rd_valid ? {REG_DPLL_SYSTEM_CON_REG_DPLL_SYSTEM_CON_F_q} : 32'b00000000000000000000000000000000;
    
    
    //----------------------------------------------------------------------------------------------------
    // REGISTER      :  REG_DPLL_SYSTEM_CFG
    // ADDRESS       :  block_offset+'hC                WIDTH : 32
    // HW ACCESS     :  READ-WRITE
    // SW ACCESS     :  READ-WRITE
    //
    // FIELDS   :
    //     31:0 : REG_DPLL_SYSTEM_CFG_F  ( SW : Read-Write HW : Read-Write )
    
    //-----------------------------------------------------------------------------
    // DESCRIPTION  :  NA
    //
    
    
    assign REG_DPLL_SYSTEM_CFG_wr_valid = REG_DPLL_SYSTEM_CFG_decode && wr_stb;
    assign REG_DPLL_SYSTEM_CFG_rd_valid = REG_DPLL_SYSTEM_CFG_rdecode && rd_stb;
    assign REG_DPLL_SYSTEM_CFG_enb      = REG_DPLL_SYSTEM_CFG_wr_valid;
    assign REG_DPLL_SYSTEM_CFG_offset = block_offset+'hC;
    assign REG_DPLL_SYSTEM_CFG_decode  = (address[block_name_address_width-1 : 0]    == REG_DPLL_SYSTEM_CFG_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    assign REG_DPLL_SYSTEM_CFG_rdecode = (raddress[block_name_address_width-1 : 0]   == REG_DPLL_SYSTEM_CFG_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    
    
    //----------------------------------------------------------------------------
    // FIELD  : REG_DPLL_SYSTEM_CFG_F
    // HW ACCESS  :  READ-WRITE                          WIDTH  :  32
    // SW ACCESS  :  READ-WRITE                          OFFSET :  0
    //-----------------------------------------------------------------
    // DESCRIPTION   :
    //
    
    always @(posedge clk)
        
        begin
        if (!reset_l)
            begin
                
                REG_DPLL_SYSTEM_CFG_REG_DPLL_SYSTEM_CFG_F_q  <= 32'd79378974;
            end
        else
            begin
            if (REG_DPLL_SYSTEM_CFG_REG_DPLL_SYSTEM_CFG_F_in_enb)   // REG_DPLL_SYSTEM_CFG_F : HW Write
                begin
                    REG_DPLL_SYSTEM_CFG_REG_DPLL_SYSTEM_CFG_F_q <= REG_DPLL_SYSTEM_CFG_REG_DPLL_SYSTEM_CFG_F_in;
                end
            else
                begin
                    
                if (REG_DPLL_SYSTEM_CFG_wr_valid)   // REG_DPLL_SYSTEM_CFG_F : SW Write
                    begin
                        REG_DPLL_SYSTEM_CFG_REG_DPLL_SYSTEM_CFG_F_q <=  ( wr_data[31 : 0] & reg_enb[31 : 0] ) | (REG_DPLL_SYSTEM_CFG_REG_DPLL_SYSTEM_CFG_F_q & (~reg_enb[31 : 0]));
                    end
                    
                end  // sw_write_close
            end
    end // always clk
    
    //----------------------------------------------------------------------------
    
    
    // ===================================================
    // HW OUTPUT READ DATA FOR EACH FIELD
    assign REG_DPLL_SYSTEM_CFG_REG_DPLL_SYSTEM_CFG_F_r  =  REG_DPLL_SYSTEM_CFG_REG_DPLL_SYSTEM_CFG_F_q ;    // Field : REG_DPLL_SYSTEM_CFG_F
    
    
    assign REG_DPLL_SYSTEM_CFG_rd_data = REG_DPLL_SYSTEM_CFG_rd_valid ? {REG_DPLL_SYSTEM_CFG_REG_DPLL_SYSTEM_CFG_F_q} : 32'b00000000000000000000000000000000;
    
    
    //----------------------------------------------------------------------------------------------------
    // REGISTER      :  REG_DPLL_SYSTEM_CFG2
    // ADDRESS       :  block_offset+'h10                WIDTH : 32
    // HW ACCESS     :  READ-WRITE
    // SW ACCESS     :  READ-WRITE
    //
    // FIELDS   :
    //     31:0 : REG_DPLL_SYSTEM_CFG2_F  ( SW : Read-Write HW : Read-Write )
    
    //-----------------------------------------------------------------------------
    // DESCRIPTION  :  NA
    //
    
    
    assign REG_DPLL_SYSTEM_CFG2_wr_valid = REG_DPLL_SYSTEM_CFG2_decode && wr_stb;
    assign REG_DPLL_SYSTEM_CFG2_rd_valid = REG_DPLL_SYSTEM_CFG2_rdecode && rd_stb;
    assign REG_DPLL_SYSTEM_CFG2_enb      = REG_DPLL_SYSTEM_CFG2_wr_valid;
    assign REG_DPLL_SYSTEM_CFG2_offset = block_offset+'h10;
    assign REG_DPLL_SYSTEM_CFG2_decode  = (address[block_name_address_width-1 : 0]    == REG_DPLL_SYSTEM_CFG2_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    assign REG_DPLL_SYSTEM_CFG2_rdecode = (raddress[block_name_address_width-1 : 0]   == REG_DPLL_SYSTEM_CFG2_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    
    
    //----------------------------------------------------------------------------
    // FIELD  : REG_DPLL_SYSTEM_CFG2_F
    // HW ACCESS  :  READ-WRITE                          WIDTH  :  32
    // SW ACCESS  :  READ-WRITE                          OFFSET :  0
    //-----------------------------------------------------------------
    // DESCRIPTION   :
    //
    
    always @(posedge clk)
        
        begin
        if (!reset_l)
            begin
                
                REG_DPLL_SYSTEM_CFG2_REG_DPLL_SYSTEM_CFG2_F_q  <= 32'd79378974;
            end
        else
            begin
            if (REG_DPLL_SYSTEM_CFG2_REG_DPLL_SYSTEM_CFG2_F_in_enb)   // REG_DPLL_SYSTEM_CFG2_F : HW Write
                begin
                    REG_DPLL_SYSTEM_CFG2_REG_DPLL_SYSTEM_CFG2_F_q <= REG_DPLL_SYSTEM_CFG2_REG_DPLL_SYSTEM_CFG2_F_in;
                end
            else
                begin
                    
                if (REG_DPLL_SYSTEM_CFG2_wr_valid)   // REG_DPLL_SYSTEM_CFG2_F : SW Write
                    begin
                        REG_DPLL_SYSTEM_CFG2_REG_DPLL_SYSTEM_CFG2_F_q <=  ( wr_data[31 : 0] & reg_enb[31 : 0] ) | (REG_DPLL_SYSTEM_CFG2_REG_DPLL_SYSTEM_CFG2_F_q & (~reg_enb[31 : 0]));
                    end
                    
                end  // sw_write_close
            end
    end // always clk
    
    //----------------------------------------------------------------------------
    
    
    // ===================================================
    // HW OUTPUT READ DATA FOR EACH FIELD
    assign REG_DPLL_SYSTEM_CFG2_REG_DPLL_SYSTEM_CFG2_F_r  =  REG_DPLL_SYSTEM_CFG2_REG_DPLL_SYSTEM_CFG2_F_q ;    // Field : REG_DPLL_SYSTEM_CFG2_F
    
    
    assign REG_DPLL_SYSTEM_CFG2_rd_data = REG_DPLL_SYSTEM_CFG2_rd_valid ? {REG_DPLL_SYSTEM_CFG2_REG_DPLL_SYSTEM_CFG2_F_q} : 32'b00000000000000000000000000000000;
    
    
    //----------------------------------------------------------------------------------------------------
    // REGISTER      :  CHA_REG_ADC_MAN_PARA10
    // ADDRESS       :  block_offset+'h14                WIDTH : 32
    // HW ACCESS     :  READ-WRITE
    // SW ACCESS     :  READ-WRITE
    //
    // FIELDS   :
    //     31:0 : CHA_REG_ADC_MAN_PARA10_F  ( SW : Read-Write HW : Read-Write )
    
    //-----------------------------------------------------------------------------
    // DESCRIPTION  :  NA
    //
    
    
    assign CHA_REG_ADC_MAN_PARA10_wr_valid = CHA_REG_ADC_MAN_PARA10_decode && wr_stb;
    assign CHA_REG_ADC_MAN_PARA10_rd_valid = CHA_REG_ADC_MAN_PARA10_rdecode && rd_stb;
    assign CHA_REG_ADC_MAN_PARA10_enb      = CHA_REG_ADC_MAN_PARA10_wr_valid;
    assign CHA_REG_ADC_MAN_PARA10_offset = block_offset+'h14;
    assign CHA_REG_ADC_MAN_PARA10_decode  = (address[block_name_address_width-1 : 0]    == CHA_REG_ADC_MAN_PARA10_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    assign CHA_REG_ADC_MAN_PARA10_rdecode = (raddress[block_name_address_width-1 : 0]   == CHA_REG_ADC_MAN_PARA10_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    
    
    //----------------------------------------------------------------------------
    // FIELD  : CHA_REG_ADC_MAN_PARA10_F
    // HW ACCESS  :  READ-WRITE                          WIDTH  :  32
    // SW ACCESS  :  READ-WRITE                          OFFSET :  0
    //-----------------------------------------------------------------
    // DESCRIPTION   :
    //
    
    always @(posedge clk)
        
        begin
        if (!reset_l)
            begin
                
                CHA_REG_ADC_MAN_PARA10_CHA_REG_ADC_MAN_PARA10_F_q  <= 32'd30720;
            end
        else
            begin
            if (CHA_REG_ADC_MAN_PARA10_CHA_REG_ADC_MAN_PARA10_F_in_enb)   // CHA_REG_ADC_MAN_PARA10_F : HW Write
                begin
                    CHA_REG_ADC_MAN_PARA10_CHA_REG_ADC_MAN_PARA10_F_q <= CHA_REG_ADC_MAN_PARA10_CHA_REG_ADC_MAN_PARA10_F_in;
                end
            else
                begin
                    
                if (CHA_REG_ADC_MAN_PARA10_wr_valid)   // CHA_REG_ADC_MAN_PARA10_F : SW Write
                    begin
                        CHA_REG_ADC_MAN_PARA10_CHA_REG_ADC_MAN_PARA10_F_q <=  ( wr_data[31 : 0] & reg_enb[31 : 0] ) | (CHA_REG_ADC_MAN_PARA10_CHA_REG_ADC_MAN_PARA10_F_q & (~reg_enb[31 : 0]));
                    end
                    
                end  // sw_write_close
            end
    end // always clk
    
    //----------------------------------------------------------------------------
    
    
    // ===================================================
    // HW OUTPUT READ DATA FOR EACH FIELD
    assign CHA_REG_ADC_MAN_PARA10_CHA_REG_ADC_MAN_PARA10_F_r  =  CHA_REG_ADC_MAN_PARA10_CHA_REG_ADC_MAN_PARA10_F_q ;    // Field : CHA_REG_ADC_MAN_PARA10_F
    
    
    assign CHA_REG_ADC_MAN_PARA10_rd_data = CHA_REG_ADC_MAN_PARA10_rd_valid ? {CHA_REG_ADC_MAN_PARA10_CHA_REG_ADC_MAN_PARA10_F_q} : 32'b00000000000000000000000000000000;
    
    
    //----------------------------------------------------------------------------------------------------
    // REGISTER      :  CHA_REG_TX_LB_MX_CFG
    // ADDRESS       :  block_offset+'h18                WIDTH : 32
    // HW ACCESS     :  READ-WRITE
    // SW ACCESS     :  READ-WRITE
    //
    // FIELDS   :
    //     31:0 : CHA_REG_TX_LB_MX_CFG_F  ( SW : Read-Write HW : Read-Write )
    
    //-----------------------------------------------------------------------------
    // DESCRIPTION  :  NA
    //
    
    
    assign CHA_REG_TX_LB_MX_CFG_wr_valid = CHA_REG_TX_LB_MX_CFG_decode && wr_stb;
    assign CHA_REG_TX_LB_MX_CFG_rd_valid = CHA_REG_TX_LB_MX_CFG_rdecode && rd_stb;
    assign CHA_REG_TX_LB_MX_CFG_enb      = CHA_REG_TX_LB_MX_CFG_wr_valid;
    assign CHA_REG_TX_LB_MX_CFG_offset = block_offset+'h18;
    assign CHA_REG_TX_LB_MX_CFG_decode  = (address[block_name_address_width-1 : 0]    == CHA_REG_TX_LB_MX_CFG_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    assign CHA_REG_TX_LB_MX_CFG_rdecode = (raddress[block_name_address_width-1 : 0]   == CHA_REG_TX_LB_MX_CFG_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    
    
    //----------------------------------------------------------------------------
    // FIELD  : CHA_REG_TX_LB_MX_CFG_F
    // HW ACCESS  :  READ-WRITE                          WIDTH  :  32
    // SW ACCESS  :  READ-WRITE                          OFFSET :  0
    //-----------------------------------------------------------------
    // DESCRIPTION   :
    //
    
    always @(posedge clk)
        
        begin
        if (!reset_l)
            begin
                
                CHA_REG_TX_LB_MX_CFG_CHA_REG_TX_LB_MX_CFG_F_q  <= 32'd4032;
            end
        else
            begin
            if (CHA_REG_TX_LB_MX_CFG_CHA_REG_TX_LB_MX_CFG_F_in_enb)   // CHA_REG_TX_LB_MX_CFG_F : HW Write
                begin
                    CHA_REG_TX_LB_MX_CFG_CHA_REG_TX_LB_MX_CFG_F_q <= CHA_REG_TX_LB_MX_CFG_CHA_REG_TX_LB_MX_CFG_F_in;
                end
            else
                begin
                    
                if (CHA_REG_TX_LB_MX_CFG_wr_valid)   // CHA_REG_TX_LB_MX_CFG_F : SW Write
                    begin
                        CHA_REG_TX_LB_MX_CFG_CHA_REG_TX_LB_MX_CFG_F_q <=  ( wr_data[31 : 0] & reg_enb[31 : 0] ) | (CHA_REG_TX_LB_MX_CFG_CHA_REG_TX_LB_MX_CFG_F_q & (~reg_enb[31 : 0]));
                    end
                    
                end  // sw_write_close
            end
    end // always clk
    
    //----------------------------------------------------------------------------
    
    
    // ===================================================
    // HW OUTPUT READ DATA FOR EACH FIELD
    assign CHA_REG_TX_LB_MX_CFG_CHA_REG_TX_LB_MX_CFG_F_r  =  CHA_REG_TX_LB_MX_CFG_CHA_REG_TX_LB_MX_CFG_F_q ;    // Field : CHA_REG_TX_LB_MX_CFG_F
    
    
    assign CHA_REG_TX_LB_MX_CFG_rd_data = CHA_REG_TX_LB_MX_CFG_rd_valid ? {CHA_REG_TX_LB_MX_CFG_CHA_REG_TX_LB_MX_CFG_F_q} : 32'b00000000000000000000000000000000;
    
    
    //----------------------------------------------------------------------------------------------------
    // REGISTER      :  CHA_REG_ADC_MAN_PARA102
    // ADDRESS       :  block_offset+'h1C                WIDTH : 32
    // HW ACCESS     :  READ-WRITE
    // SW ACCESS     :  READ-WRITE
    //
    // FIELDS   :
    //     31:0 : CHA_REG_ADC_MAN_PARA102_F  ( SW : Read-Write HW : Read-Write )
    
    //-----------------------------------------------------------------------------
    // DESCRIPTION  :  NA
    //
    
    
    assign CHA_REG_ADC_MAN_PARA102_wr_valid = CHA_REG_ADC_MAN_PARA102_decode && wr_stb;
    assign CHA_REG_ADC_MAN_PARA102_rd_valid = CHA_REG_ADC_MAN_PARA102_rdecode && rd_stb;
    assign CHA_REG_ADC_MAN_PARA102_enb      = CHA_REG_ADC_MAN_PARA102_wr_valid;
    assign CHA_REG_ADC_MAN_PARA102_offset = block_offset+'h1C;
    assign CHA_REG_ADC_MAN_PARA102_decode  = (address[block_name_address_width-1 : 0]    == CHA_REG_ADC_MAN_PARA102_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    assign CHA_REG_ADC_MAN_PARA102_rdecode = (raddress[block_name_address_width-1 : 0]   == CHA_REG_ADC_MAN_PARA102_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    
    
    //----------------------------------------------------------------------------
    // FIELD  : CHA_REG_ADC_MAN_PARA102_F
    // HW ACCESS  :  READ-WRITE                          WIDTH  :  32
    // SW ACCESS  :  READ-WRITE                          OFFSET :  0
    //-----------------------------------------------------------------
    // DESCRIPTION   :
    //
    
    always @(posedge clk)
        
        begin
        if (!reset_l)
            begin
                
                CHA_REG_ADC_MAN_PARA102_CHA_REG_ADC_MAN_PARA102_F_q  <= 32'd30720;
            end
        else
            begin
            if (CHA_REG_ADC_MAN_PARA102_CHA_REG_ADC_MAN_PARA102_F_in_enb)   // CHA_REG_ADC_MAN_PARA102_F : HW Write
                begin
                    CHA_REG_ADC_MAN_PARA102_CHA_REG_ADC_MAN_PARA102_F_q <= CHA_REG_ADC_MAN_PARA102_CHA_REG_ADC_MAN_PARA102_F_in;
                end
            else
                begin
                    
                if (CHA_REG_ADC_MAN_PARA102_wr_valid)   // CHA_REG_ADC_MAN_PARA102_F : SW Write
                    begin
                        CHA_REG_ADC_MAN_PARA102_CHA_REG_ADC_MAN_PARA102_F_q <=  ( wr_data[31 : 0] & reg_enb[31 : 0] ) | (CHA_REG_ADC_MAN_PARA102_CHA_REG_ADC_MAN_PARA102_F_q & (~reg_enb[31 : 0]));
                    end
                    
                end  // sw_write_close
            end
    end // always clk
    
    //----------------------------------------------------------------------------
    
    
    // ===================================================
    // HW OUTPUT READ DATA FOR EACH FIELD
    assign CHA_REG_ADC_MAN_PARA102_CHA_REG_ADC_MAN_PARA102_F_r  =  CHA_REG_ADC_MAN_PARA102_CHA_REG_ADC_MAN_PARA102_F_q ;    // Field : CHA_REG_ADC_MAN_PARA102_F
    
    
    assign CHA_REG_ADC_MAN_PARA102_rd_data = CHA_REG_ADC_MAN_PARA102_rd_valid ? {CHA_REG_ADC_MAN_PARA102_CHA_REG_ADC_MAN_PARA102_F_q} : 32'b00000000000000000000000000000000;
    
    
    //----------------------------------------------------------------------------------------------------
    // REGISTER      :  REG_SYS_LGC_CM_0
    // ADDRESS       :  block_offset+'h20                WIDTH : 32
    // HW ACCESS     :  READ-WRITE
    // SW ACCESS     :  READ-WRITE
    //
    // FIELDS   :
    //     31:0 : REG_SYS_LGC_CM_0_F  ( SW : Read-Write HW : Read-Write )
    
    //-----------------------------------------------------------------------------
    // DESCRIPTION  :  NA
    //
    
    
    assign REG_SYS_LGC_CM_0_wr_valid = REG_SYS_LGC_CM_0_decode && wr_stb;
    assign REG_SYS_LGC_CM_0_rd_valid = REG_SYS_LGC_CM_0_rdecode && rd_stb;
    assign REG_SYS_LGC_CM_0_enb      = REG_SYS_LGC_CM_0_wr_valid;
    assign REG_SYS_LGC_CM_0_offset = block_offset+'h20;
    assign REG_SYS_LGC_CM_0_decode  = (address[block_name_address_width-1 : 0]    == REG_SYS_LGC_CM_0_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    assign REG_SYS_LGC_CM_0_rdecode = (raddress[block_name_address_width-1 : 0]   == REG_SYS_LGC_CM_0_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    
    
    //----------------------------------------------------------------------------
    // FIELD  : REG_SYS_LGC_CM_0_F
    // HW ACCESS  :  READ-WRITE                          WIDTH  :  32
    // SW ACCESS  :  READ-WRITE                          OFFSET :  0
    //-----------------------------------------------------------------
    // DESCRIPTION   :
    //
    
    always @(posedge clk)
        
        begin
        if (!reset_l)
            begin
                
                REG_SYS_LGC_CM_0_REG_SYS_LGC_CM_0_F_q  <= 32'd8;
            end
        else
            begin
            if (REG_SYS_LGC_CM_0_REG_SYS_LGC_CM_0_F_in_enb)   // REG_SYS_LGC_CM_0_F : HW Write
                begin
                    REG_SYS_LGC_CM_0_REG_SYS_LGC_CM_0_F_q <= REG_SYS_LGC_CM_0_REG_SYS_LGC_CM_0_F_in;
                end
            else
                begin
                    
                if (REG_SYS_LGC_CM_0_wr_valid)   // REG_SYS_LGC_CM_0_F : SW Write
                    begin
                        REG_SYS_LGC_CM_0_REG_SYS_LGC_CM_0_F_q <=  ( wr_data[31 : 0] & reg_enb[31 : 0] ) | (REG_SYS_LGC_CM_0_REG_SYS_LGC_CM_0_F_q & (~reg_enb[31 : 0]));
                    end
                    
                end  // sw_write_close
            end
    end // always clk
    
    //----------------------------------------------------------------------------
    
    
    // ===================================================
    // HW OUTPUT READ DATA FOR EACH FIELD
    assign REG_SYS_LGC_CM_0_REG_SYS_LGC_CM_0_F_r  =  REG_SYS_LGC_CM_0_REG_SYS_LGC_CM_0_F_q ;    // Field : REG_SYS_LGC_CM_0_F
    
    
    assign REG_SYS_LGC_CM_0_rd_data = REG_SYS_LGC_CM_0_rd_valid ? {REG_SYS_LGC_CM_0_REG_SYS_LGC_CM_0_F_q} : 32'b00000000000000000000000000000000;
    
    
    //----------------------------------------------------------------------------------------------------
    // REGISTER      :  REG_SYS_MANUAL_DFT_0
    // ADDRESS       :  block_offset+'h24                WIDTH : 32
    // HW ACCESS     :  READ-WRITE
    // SW ACCESS     :  READ-WRITE
    //
    // FIELDS   :
    //     31:0 : REG_SYS_MANUAL_DFT_0_F  ( SW : Read-Write HW : Read-Write )
    
    //-----------------------------------------------------------------------------
    // DESCRIPTION  :  NA
    //
    
    
    assign REG_SYS_MANUAL_DFT_0_wr_valid = REG_SYS_MANUAL_DFT_0_decode && wr_stb;
    assign REG_SYS_MANUAL_DFT_0_rd_valid = REG_SYS_MANUAL_DFT_0_rdecode && rd_stb;
    assign REG_SYS_MANUAL_DFT_0_enb      = REG_SYS_MANUAL_DFT_0_wr_valid;
    assign REG_SYS_MANUAL_DFT_0_offset = block_offset+'h24;
    assign REG_SYS_MANUAL_DFT_0_decode  = (address[block_name_address_width-1 : 0]    == REG_SYS_MANUAL_DFT_0_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    assign REG_SYS_MANUAL_DFT_0_rdecode = (raddress[block_name_address_width-1 : 0]   == REG_SYS_MANUAL_DFT_0_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    
    
    //----------------------------------------------------------------------------
    // FIELD  : REG_SYS_MANUAL_DFT_0_F
    // HW ACCESS  :  READ-WRITE                          WIDTH  :  32
    // SW ACCESS  :  READ-WRITE                          OFFSET :  0
    //-----------------------------------------------------------------
    // DESCRIPTION   :
    //
    
    always @(posedge clk)
        
        begin
        if (!reset_l)
            begin
                
                REG_SYS_MANUAL_DFT_0_REG_SYS_MANUAL_DFT_0_F_q  <= 32'd192;
            end
        else
            begin
            if (REG_SYS_MANUAL_DFT_0_REG_SYS_MANUAL_DFT_0_F_in_enb)   // REG_SYS_MANUAL_DFT_0_F : HW Write
                begin
                    REG_SYS_MANUAL_DFT_0_REG_SYS_MANUAL_DFT_0_F_q <= REG_SYS_MANUAL_DFT_0_REG_SYS_MANUAL_DFT_0_F_in;
                end
            else
                begin
                    
                if (REG_SYS_MANUAL_DFT_0_wr_valid)   // REG_SYS_MANUAL_DFT_0_F : SW Write
                    begin
                        REG_SYS_MANUAL_DFT_0_REG_SYS_MANUAL_DFT_0_F_q <=  ( wr_data[31 : 0] & reg_enb[31 : 0] ) | (REG_SYS_MANUAL_DFT_0_REG_SYS_MANUAL_DFT_0_F_q & (~reg_enb[31 : 0]));
                    end
                    
                end  // sw_write_close
            end
    end // always clk
    
    //----------------------------------------------------------------------------
    
    
    // ===================================================
    // HW OUTPUT READ DATA FOR EACH FIELD
    assign REG_SYS_MANUAL_DFT_0_REG_SYS_MANUAL_DFT_0_F_r  =  REG_SYS_MANUAL_DFT_0_REG_SYS_MANUAL_DFT_0_F_q ;    // Field : REG_SYS_MANUAL_DFT_0_F
    
    
    assign REG_SYS_MANUAL_DFT_0_rd_data = REG_SYS_MANUAL_DFT_0_rd_valid ? {REG_SYS_MANUAL_DFT_0_REG_SYS_MANUAL_DFT_0_F_q} : 32'b00000000000000000000000000000000;
    
    
    //----------------------------------------------------------------------------------------------------
    // REGISTER      :  REG_SYS_LGC_COEX_0
    // ADDRESS       :  block_offset+'h28                WIDTH : 32
    // HW ACCESS     :  READ-WRITE
    // SW ACCESS     :  READ-WRITE
    //
    // FIELDS   :
    //     31:0 : REG_SYS_LGC_COEX_0_F  ( SW : Read-Write HW : Read-Write )
    
    //-----------------------------------------------------------------------------
    // DESCRIPTION  :  NA
    //
    
    
    assign REG_SYS_LGC_COEX_0_wr_valid = REG_SYS_LGC_COEX_0_decode && wr_stb;
    assign REG_SYS_LGC_COEX_0_rd_valid = REG_SYS_LGC_COEX_0_rdecode && rd_stb;
    assign REG_SYS_LGC_COEX_0_enb      = REG_SYS_LGC_COEX_0_wr_valid;
    assign REG_SYS_LGC_COEX_0_offset = block_offset+'h28;
    assign REG_SYS_LGC_COEX_0_decode  = (address[block_name_address_width-1 : 0]    == REG_SYS_LGC_COEX_0_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    assign REG_SYS_LGC_COEX_0_rdecode = (raddress[block_name_address_width-1 : 0]   == REG_SYS_LGC_COEX_0_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    
    
    //----------------------------------------------------------------------------
    // FIELD  : REG_SYS_LGC_COEX_0_F
    // HW ACCESS  :  READ-WRITE                          WIDTH  :  32
    // SW ACCESS  :  READ-WRITE                          OFFSET :  0
    //-----------------------------------------------------------------
    // DESCRIPTION   :
    //
    
    always @(posedge clk)
        
        begin
        if (!reset_l)
            begin
                
                REG_SYS_LGC_COEX_0_REG_SYS_LGC_COEX_0_F_q  <= 32'd4;
            end
        else
            begin
            if (REG_SYS_LGC_COEX_0_REG_SYS_LGC_COEX_0_F_in_enb)   // REG_SYS_LGC_COEX_0_F : HW Write
                begin
                    REG_SYS_LGC_COEX_0_REG_SYS_LGC_COEX_0_F_q <= REG_SYS_LGC_COEX_0_REG_SYS_LGC_COEX_0_F_in;
                end
            else
                begin
                    
                if (REG_SYS_LGC_COEX_0_wr_valid)   // REG_SYS_LGC_COEX_0_F : SW Write
                    begin
                        REG_SYS_LGC_COEX_0_REG_SYS_LGC_COEX_0_F_q <=  ( wr_data[31 : 0] & reg_enb[31 : 0] ) | (REG_SYS_LGC_COEX_0_REG_SYS_LGC_COEX_0_F_q & (~reg_enb[31 : 0]));
                    end
                    
                end  // sw_write_close
            end
    end // always clk
    
    //----------------------------------------------------------------------------
    
    
    // ===================================================
    // HW OUTPUT READ DATA FOR EACH FIELD
    assign REG_SYS_LGC_COEX_0_REG_SYS_LGC_COEX_0_F_r  =  REG_SYS_LGC_COEX_0_REG_SYS_LGC_COEX_0_F_q ;    // Field : REG_SYS_LGC_COEX_0_F
    
    
    assign REG_SYS_LGC_COEX_0_rd_data = REG_SYS_LGC_COEX_0_rd_valid ? {REG_SYS_LGC_COEX_0_REG_SYS_LGC_COEX_0_F_q} : 32'b00000000000000000000000000000000;
    
    
    //----------------------------------------------------------------------------------------------------
    // REGISTER      :  REG_SYS_LGC_COEX_7
    // ADDRESS       :  block_offset+'h2C                WIDTH : 32
    // HW ACCESS     :  READ-WRITE
    // SW ACCESS     :  READ-WRITE
    //
    // FIELDS   :
    //     31:0 : REG_SYS_LGC_COEX_7_F  ( SW : Read-Write HW : Read-Write )
    
    //-----------------------------------------------------------------------------
    // DESCRIPTION  :  NA
    //
    
    
    assign REG_SYS_LGC_COEX_7_wr_valid = REG_SYS_LGC_COEX_7_decode && wr_stb;
    assign REG_SYS_LGC_COEX_7_rd_valid = REG_SYS_LGC_COEX_7_rdecode && rd_stb;
    assign REG_SYS_LGC_COEX_7_enb      = REG_SYS_LGC_COEX_7_wr_valid;
    assign REG_SYS_LGC_COEX_7_offset = block_offset+'h2C;
    assign REG_SYS_LGC_COEX_7_decode  = (address[block_name_address_width-1 : 0]    == REG_SYS_LGC_COEX_7_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    assign REG_SYS_LGC_COEX_7_rdecode = (raddress[block_name_address_width-1 : 0]   == REG_SYS_LGC_COEX_7_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    
    
    //----------------------------------------------------------------------------
    // FIELD  : REG_SYS_LGC_COEX_7_F
    // HW ACCESS  :  READ-WRITE                          WIDTH  :  32
    // SW ACCESS  :  READ-WRITE                          OFFSET :  0
    //-----------------------------------------------------------------
    // DESCRIPTION   :
    //
    
    always @(posedge clk)
        
        begin
        if (!reset_l)
            begin
                
                REG_SYS_LGC_COEX_7_REG_SYS_LGC_COEX_7_F_q  <= 32'd2147483648;
            end
        else
            begin
            if (REG_SYS_LGC_COEX_7_REG_SYS_LGC_COEX_7_F_in_enb)   // REG_SYS_LGC_COEX_7_F : HW Write
                begin
                    REG_SYS_LGC_COEX_7_REG_SYS_LGC_COEX_7_F_q <= REG_SYS_LGC_COEX_7_REG_SYS_LGC_COEX_7_F_in;
                end
            else
                begin
                    
                if (REG_SYS_LGC_COEX_7_wr_valid)   // REG_SYS_LGC_COEX_7_F : SW Write
                    begin
                        REG_SYS_LGC_COEX_7_REG_SYS_LGC_COEX_7_F_q <=  ( wr_data[31 : 0] & reg_enb[31 : 0] ) | (REG_SYS_LGC_COEX_7_REG_SYS_LGC_COEX_7_F_q & (~reg_enb[31 : 0]));
                    end
                    
                end  // sw_write_close
            end
    end // always clk
    
    //----------------------------------------------------------------------------
    
    
    // ===================================================
    // HW OUTPUT READ DATA FOR EACH FIELD
    assign REG_SYS_LGC_COEX_7_REG_SYS_LGC_COEX_7_F_r  =  REG_SYS_LGC_COEX_7_REG_SYS_LGC_COEX_7_F_q ;    // Field : REG_SYS_LGC_COEX_7_F
    
    
    assign REG_SYS_LGC_COEX_7_rd_data = REG_SYS_LGC_COEX_7_rd_valid ? {REG_SYS_LGC_COEX_7_REG_SYS_LGC_COEX_7_F_q} : 32'b00000000000000000000000000000000;
    
    
    //----------------------------------------------------------------------------------------------------
    // REGISTER      :  REG_SYS_LGC_COEX_5
    // ADDRESS       :  block_offset+'h30                WIDTH : 32
    // HW ACCESS     :  READ-WRITE
    // SW ACCESS     :  READ-WRITE
    //
    // FIELDS   :
    //     31:0 : REG_SYS_LGC_COEX_5_F  ( SW : Read-Write HW : Read-Write )
    
    //-----------------------------------------------------------------------------
    // DESCRIPTION  :  NA
    //
    
    
    assign REG_SYS_LGC_COEX_5_wr_valid = REG_SYS_LGC_COEX_5_decode && wr_stb;
    assign REG_SYS_LGC_COEX_5_rd_valid = REG_SYS_LGC_COEX_5_rdecode && rd_stb;
    assign REG_SYS_LGC_COEX_5_enb      = REG_SYS_LGC_COEX_5_wr_valid;
    assign REG_SYS_LGC_COEX_5_offset = block_offset+'h30;
    assign REG_SYS_LGC_COEX_5_decode  = (address[block_name_address_width-1 : 0]    == REG_SYS_LGC_COEX_5_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    assign REG_SYS_LGC_COEX_5_rdecode = (raddress[block_name_address_width-1 : 0]   == REG_SYS_LGC_COEX_5_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    
    
    //----------------------------------------------------------------------------
    // FIELD  : REG_SYS_LGC_COEX_5_F
    // HW ACCESS  :  READ-WRITE                          WIDTH  :  32
    // SW ACCESS  :  READ-WRITE                          OFFSET :  0
    //-----------------------------------------------------------------
    // DESCRIPTION   :
    //
    
    always @(posedge clk)
        
        begin
        if (!reset_l)
            begin
                
                REG_SYS_LGC_COEX_5_REG_SYS_LGC_COEX_5_F_q  <= 32'd1;
            end
        else
            begin
            if (REG_SYS_LGC_COEX_5_REG_SYS_LGC_COEX_5_F_in_enb)   // REG_SYS_LGC_COEX_5_F : HW Write
                begin
                    REG_SYS_LGC_COEX_5_REG_SYS_LGC_COEX_5_F_q <= REG_SYS_LGC_COEX_5_REG_SYS_LGC_COEX_5_F_in;
                end
            else
                begin
                    
                if (REG_SYS_LGC_COEX_5_wr_valid)   // REG_SYS_LGC_COEX_5_F : SW Write
                    begin
                        REG_SYS_LGC_COEX_5_REG_SYS_LGC_COEX_5_F_q <=  ( wr_data[31 : 0] & reg_enb[31 : 0] ) | (REG_SYS_LGC_COEX_5_REG_SYS_LGC_COEX_5_F_q & (~reg_enb[31 : 0]));
                    end
                    
                end  // sw_write_close
            end
    end // always clk
    
    //----------------------------------------------------------------------------
    
    
    // ===================================================
    // HW OUTPUT READ DATA FOR EACH FIELD
    assign REG_SYS_LGC_COEX_5_REG_SYS_LGC_COEX_5_F_r  =  REG_SYS_LGC_COEX_5_REG_SYS_LGC_COEX_5_F_q ;    // Field : REG_SYS_LGC_COEX_5_F
    
    
    assign REG_SYS_LGC_COEX_5_rd_data = REG_SYS_LGC_COEX_5_rd_valid ? {REG_SYS_LGC_COEX_5_REG_SYS_LGC_COEX_5_F_q} : 32'b00000000000000000000000000000000;
    
    
    //----------------------------------------------------------------------------------------------------
    // REGISTER      :  REG_SYS_LGC_COEX_6
    // ADDRESS       :  block_offset+'h34                WIDTH : 32
    // HW ACCESS     :  READ-WRITE
    // SW ACCESS     :  READ-WRITE
    //
    // FIELDS   :
    //     31:0 : REG_SYS_LGC_COEX_6_F  ( SW : Read-Write HW : Read-Write )
    
    //-----------------------------------------------------------------------------
    // DESCRIPTION  :  NA
    //
    
    
    assign REG_SYS_LGC_COEX_6_wr_valid = REG_SYS_LGC_COEX_6_decode && wr_stb;
    assign REG_SYS_LGC_COEX_6_rd_valid = REG_SYS_LGC_COEX_6_rdecode && rd_stb;
    assign REG_SYS_LGC_COEX_6_enb      = REG_SYS_LGC_COEX_6_wr_valid;
    assign REG_SYS_LGC_COEX_6_offset = block_offset+'h34;
    assign REG_SYS_LGC_COEX_6_decode  = (address[block_name_address_width-1 : 0]    == REG_SYS_LGC_COEX_6_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    assign REG_SYS_LGC_COEX_6_rdecode = (raddress[block_name_address_width-1 : 0]   == REG_SYS_LGC_COEX_6_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    
    
    //----------------------------------------------------------------------------
    // FIELD  : REG_SYS_LGC_COEX_6_F
    // HW ACCESS  :  READ-WRITE                          WIDTH  :  32
    // SW ACCESS  :  READ-WRITE                          OFFSET :  0
    //-----------------------------------------------------------------
    // DESCRIPTION   :
    //
    
    always @(posedge clk)
        
        begin
        if (!reset_l)
            begin
                
                REG_SYS_LGC_COEX_6_REG_SYS_LGC_COEX_6_F_q  <= 32'd1;
            end
        else
            begin
            if (REG_SYS_LGC_COEX_6_REG_SYS_LGC_COEX_6_F_in_enb)   // REG_SYS_LGC_COEX_6_F : HW Write
                begin
                    REG_SYS_LGC_COEX_6_REG_SYS_LGC_COEX_6_F_q <= REG_SYS_LGC_COEX_6_REG_SYS_LGC_COEX_6_F_in;
                end
            else
                begin
                    
                if (REG_SYS_LGC_COEX_6_wr_valid)   // REG_SYS_LGC_COEX_6_F : SW Write
                    begin
                        REG_SYS_LGC_COEX_6_REG_SYS_LGC_COEX_6_F_q <=  ( wr_data[31 : 0] & reg_enb[31 : 0] ) | (REG_SYS_LGC_COEX_6_REG_SYS_LGC_COEX_6_F_q & (~reg_enb[31 : 0]));
                    end
                    
                end  // sw_write_close
            end
    end // always clk
    
    //----------------------------------------------------------------------------
    
    
    // ===================================================
    // HW OUTPUT READ DATA FOR EACH FIELD
    assign REG_SYS_LGC_COEX_6_REG_SYS_LGC_COEX_6_F_r  =  REG_SYS_LGC_COEX_6_REG_SYS_LGC_COEX_6_F_q ;    // Field : REG_SYS_LGC_COEX_6_F
    
    
    assign REG_SYS_LGC_COEX_6_rd_data = REG_SYS_LGC_COEX_6_rd_valid ? {REG_SYS_LGC_COEX_6_REG_SYS_LGC_COEX_6_F_q} : 32'b00000000000000000000000000000000;
    
    
    //----------------------------------------------------------------------------------------------------
    // REGISTER      :  CHA_REG_DAC_ANA_DIV
    // ADDRESS       :  block_offset+'h38                WIDTH : 32
    // HW ACCESS     :  READ-WRITE
    // SW ACCESS     :  READ-WRITE
    //
    // FIELDS   :
    //     31:0 : CHA_REG_DAC_ANA_DIV_F  ( SW : Read-Write HW : Read-Write )
    
    //-----------------------------------------------------------------------------
    // DESCRIPTION  :  NA
    //
    
    
    assign CHA_REG_DAC_ANA_DIV_wr_valid = CHA_REG_DAC_ANA_DIV_decode && wr_stb;
    assign CHA_REG_DAC_ANA_DIV_rd_valid = CHA_REG_DAC_ANA_DIV_rdecode && rd_stb;
    assign CHA_REG_DAC_ANA_DIV_enb      = CHA_REG_DAC_ANA_DIV_wr_valid;
    assign CHA_REG_DAC_ANA_DIV_offset = block_offset+'h38;
    assign CHA_REG_DAC_ANA_DIV_decode  = (address[block_name_address_width-1 : 0]    == CHA_REG_DAC_ANA_DIV_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    assign CHA_REG_DAC_ANA_DIV_rdecode = (raddress[block_name_address_width-1 : 0]   == CHA_REG_DAC_ANA_DIV_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    
    
    //----------------------------------------------------------------------------
    // FIELD  : CHA_REG_DAC_ANA_DIV_F
    // HW ACCESS  :  READ-WRITE                          WIDTH  :  32
    // SW ACCESS  :  READ-WRITE                          OFFSET :  0
    //-----------------------------------------------------------------
    // DESCRIPTION   :
    //
    
    always @(posedge clk)
        
        begin
        if (!reset_l)
            begin
                
                CHA_REG_DAC_ANA_DIV_CHA_REG_DAC_ANA_DIV_F_q  <= 32'd128;
            end
        else
            begin
            if (CHA_REG_DAC_ANA_DIV_CHA_REG_DAC_ANA_DIV_F_in_enb)   // CHA_REG_DAC_ANA_DIV_F : HW Write
                begin
                    CHA_REG_DAC_ANA_DIV_CHA_REG_DAC_ANA_DIV_F_q <= CHA_REG_DAC_ANA_DIV_CHA_REG_DAC_ANA_DIV_F_in;
                end
            else
                begin
                    
                if (CHA_REG_DAC_ANA_DIV_wr_valid)   // CHA_REG_DAC_ANA_DIV_F : SW Write
                    begin
                        CHA_REG_DAC_ANA_DIV_CHA_REG_DAC_ANA_DIV_F_q <=  ( wr_data[31 : 0] & reg_enb[31 : 0] ) | (CHA_REG_DAC_ANA_DIV_CHA_REG_DAC_ANA_DIV_F_q & (~reg_enb[31 : 0]));
                    end
                    
                end  // sw_write_close
            end
    end // always clk
    
    //----------------------------------------------------------------------------
    
    
    // ===================================================
    // HW OUTPUT READ DATA FOR EACH FIELD
    assign CHA_REG_DAC_ANA_DIV_CHA_REG_DAC_ANA_DIV_F_r  =  CHA_REG_DAC_ANA_DIV_CHA_REG_DAC_ANA_DIV_F_q ;    // Field : CHA_REG_DAC_ANA_DIV_F
    
    
    assign CHA_REG_DAC_ANA_DIV_rd_data = CHA_REG_DAC_ANA_DIV_rd_valid ? {CHA_REG_DAC_ANA_DIV_CHA_REG_DAC_ANA_DIV_F_q} : 32'b00000000000000000000000000000000;
    
    
    //----------------------------------------------------------------------------------------------------
    // REGISTER      :  REG_DPLL_ABS
    // ADDRESS       :  block_offset+'h3C                WIDTH : 32
    // HW ACCESS     :  READ-WRITE
    // SW ACCESS     :  READ-WRITE
    //
    // FIELDS   :
    //     31:0 : REG_DPLL_ABS_F  ( SW : Read-Write HW : Read-Write )
    
    //-----------------------------------------------------------------------------
    // DESCRIPTION  :  NA
    //
    
    
    assign REG_DPLL_ABS_wr_valid = REG_DPLL_ABS_decode && wr_stb;
    assign REG_DPLL_ABS_rd_valid = REG_DPLL_ABS_rdecode && rd_stb;
    assign REG_DPLL_ABS_enb      = REG_DPLL_ABS_wr_valid;
    assign REG_DPLL_ABS_offset = block_offset+'h3C;
    assign REG_DPLL_ABS_decode  = (address[block_name_address_width-1 : 0]    == REG_DPLL_ABS_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    assign REG_DPLL_ABS_rdecode = (raddress[block_name_address_width-1 : 0]   == REG_DPLL_ABS_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    
    
    //----------------------------------------------------------------------------
    // FIELD  : REG_DPLL_ABS_F
    // HW ACCESS  :  READ-WRITE                          WIDTH  :  32
    // SW ACCESS  :  READ-WRITE                          OFFSET :  0
    //-----------------------------------------------------------------
    // DESCRIPTION   :
    //
    
    always @(posedge clk)
        
        begin
        if (!reset_l)
            begin
                
                REG_DPLL_ABS_REG_DPLL_ABS_F_q  <= 32'd4804;
            end
        else
            begin
            if (REG_DPLL_ABS_REG_DPLL_ABS_F_in_enb)   // REG_DPLL_ABS_F : HW Write
                begin
                    REG_DPLL_ABS_REG_DPLL_ABS_F_q <= REG_DPLL_ABS_REG_DPLL_ABS_F_in;
                end
            else
                begin
                    
                if (REG_DPLL_ABS_wr_valid)   // REG_DPLL_ABS_F : SW Write
                    begin
                        REG_DPLL_ABS_REG_DPLL_ABS_F_q <=  ( wr_data[31 : 0] & reg_enb[31 : 0] ) | (REG_DPLL_ABS_REG_DPLL_ABS_F_q & (~reg_enb[31 : 0]));
                    end
                    
                end  // sw_write_close
            end
    end // always clk
    
    //----------------------------------------------------------------------------
    
    
    // ===================================================
    // HW OUTPUT READ DATA FOR EACH FIELD
    assign REG_DPLL_ABS_REG_DPLL_ABS_F_r  =  REG_DPLL_ABS_REG_DPLL_ABS_F_q ;    // Field : REG_DPLL_ABS_F
    
    
    assign REG_DPLL_ABS_rd_data = REG_DPLL_ABS_rd_valid ? {REG_DPLL_ABS_REG_DPLL_ABS_F_q} : 32'b00000000000000000000000000000000;
    
    
    //----------------------------------------------------------------------------------------------------
    // REGISTER      :  REG_DPLL_ANALOG8
    // ADDRESS       :  block_offset+'h40                WIDTH : 32
    // HW ACCESS     :  READ-WRITE
    // SW ACCESS     :  READ-WRITE
    //
    // FIELDS   :
    //     31:0 : REG_DPLL_ANALOG8_F  ( SW : Read-Write HW : Read-Write )
    
    //-----------------------------------------------------------------------------
    // DESCRIPTION  :  NA
    //
    
    
    assign REG_DPLL_ANALOG8_wr_valid = REG_DPLL_ANALOG8_decode && wr_stb;
    assign REG_DPLL_ANALOG8_rd_valid = REG_DPLL_ANALOG8_rdecode && rd_stb;
    assign REG_DPLL_ANALOG8_enb      = REG_DPLL_ANALOG8_wr_valid;
    assign REG_DPLL_ANALOG8_offset = block_offset+'h40;
    assign REG_DPLL_ANALOG8_decode  = (address[block_name_address_width-1 : 0]    == REG_DPLL_ANALOG8_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    assign REG_DPLL_ANALOG8_rdecode = (raddress[block_name_address_width-1 : 0]   == REG_DPLL_ANALOG8_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    
    
    //----------------------------------------------------------------------------
    // FIELD  : REG_DPLL_ANALOG8_F
    // HW ACCESS  :  READ-WRITE                          WIDTH  :  32
    // SW ACCESS  :  READ-WRITE                          OFFSET :  0
    //-----------------------------------------------------------------
    // DESCRIPTION   :
    //
    
    always @(posedge clk)
        
        begin
        if (!reset_l)
            begin
                
                REG_DPLL_ANALOG8_REG_DPLL_ANALOG8_F_q  <= 32'd55;
            end
        else
            begin
            if (REG_DPLL_ANALOG8_REG_DPLL_ANALOG8_F_in_enb)   // REG_DPLL_ANALOG8_F : HW Write
                begin
                    REG_DPLL_ANALOG8_REG_DPLL_ANALOG8_F_q <= REG_DPLL_ANALOG8_REG_DPLL_ANALOG8_F_in;
                end
            else
                begin
                    
                if (REG_DPLL_ANALOG8_wr_valid)   // REG_DPLL_ANALOG8_F : SW Write
                    begin
                        REG_DPLL_ANALOG8_REG_DPLL_ANALOG8_F_q <=  ( wr_data[31 : 0] & reg_enb[31 : 0] ) | (REG_DPLL_ANALOG8_REG_DPLL_ANALOG8_F_q & (~reg_enb[31 : 0]));
                    end
                    
                end  // sw_write_close
            end
    end // always clk
    
    //----------------------------------------------------------------------------
    
    
    // ===================================================
    // HW OUTPUT READ DATA FOR EACH FIELD
    assign REG_DPLL_ANALOG8_REG_DPLL_ANALOG8_F_r  =  REG_DPLL_ANALOG8_REG_DPLL_ANALOG8_F_q ;    // Field : REG_DPLL_ANALOG8_F
    
    
    assign REG_DPLL_ANALOG8_rd_data = REG_DPLL_ANALOG8_rd_valid ? {REG_DPLL_ANALOG8_REG_DPLL_ANALOG8_F_q} : 32'b00000000000000000000000000000000;
    
    
    //----------------------------------------------------------------------------------------------------
    // REGISTER      :  REG_DPLL_DLF1
    // ADDRESS       :  block_offset+'h44                WIDTH : 32
    // HW ACCESS     :  READ-WRITE
    // SW ACCESS     :  READ-WRITE
    //
    // FIELDS   :
    //     31:0 : REG_DPLL_DLF1_F  ( SW : Read-Write HW : Read-Write )
    
    //-----------------------------------------------------------------------------
    // DESCRIPTION  :  NA
    //
    
    
    assign REG_DPLL_DLF1_wr_valid = REG_DPLL_DLF1_decode && wr_stb;
    assign REG_DPLL_DLF1_rd_valid = REG_DPLL_DLF1_rdecode && rd_stb;
    assign REG_DPLL_DLF1_enb      = REG_DPLL_DLF1_wr_valid;
    assign REG_DPLL_DLF1_offset = block_offset+'h44;
    assign REG_DPLL_DLF1_decode  = (address[block_name_address_width-1 : 0]    == REG_DPLL_DLF1_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    assign REG_DPLL_DLF1_rdecode = (raddress[block_name_address_width-1 : 0]   == REG_DPLL_DLF1_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    
    
    //----------------------------------------------------------------------------
    // FIELD  : REG_DPLL_DLF1_F
    // HW ACCESS  :  READ-WRITE                          WIDTH  :  32
    // SW ACCESS  :  READ-WRITE                          OFFSET :  0
    //-----------------------------------------------------------------
    // DESCRIPTION   :
    //
    
    always @(posedge clk)
        
        begin
        if (!reset_l)
            begin
                
                REG_DPLL_DLF1_REG_DPLL_DLF1_F_q  <= 32'd323;
            end
        else
            begin
            if (REG_DPLL_DLF1_REG_DPLL_DLF1_F_in_enb)   // REG_DPLL_DLF1_F : HW Write
                begin
                    REG_DPLL_DLF1_REG_DPLL_DLF1_F_q <= REG_DPLL_DLF1_REG_DPLL_DLF1_F_in;
                end
            else
                begin
                    
                if (REG_DPLL_DLF1_wr_valid)   // REG_DPLL_DLF1_F : SW Write
                    begin
                        REG_DPLL_DLF1_REG_DPLL_DLF1_F_q <=  ( wr_data[31 : 0] & reg_enb[31 : 0] ) | (REG_DPLL_DLF1_REG_DPLL_DLF1_F_q & (~reg_enb[31 : 0]));
                    end
                    
                end  // sw_write_close
            end
    end // always clk
    
    //----------------------------------------------------------------------------
    
    
    // ===================================================
    // HW OUTPUT READ DATA FOR EACH FIELD
    assign REG_DPLL_DLF1_REG_DPLL_DLF1_F_r  =  REG_DPLL_DLF1_REG_DPLL_DLF1_F_q ;    // Field : REG_DPLL_DLF1_F
    
    
    assign REG_DPLL_DLF1_rd_data = REG_DPLL_DLF1_rd_valid ? {REG_DPLL_DLF1_REG_DPLL_DLF1_F_q} : 32'b00000000000000000000000000000000;
    
    
    //----------------------------------------------------------------------------------------------------
    // REGISTER      :  REG_DPLL_DLF2
    // ADDRESS       :  block_offset+'h48                WIDTH : 32
    // HW ACCESS     :  READ-WRITE
    // SW ACCESS     :  READ-WRITE
    //
    // FIELDS   :
    //     31:0 : REG_DPLL_DLF2_F  ( SW : Read-Write HW : Read-Write )
    
    //-----------------------------------------------------------------------------
    // DESCRIPTION  :  NA
    //
    
    
    assign REG_DPLL_DLF2_wr_valid = REG_DPLL_DLF2_decode && wr_stb;
    assign REG_DPLL_DLF2_rd_valid = REG_DPLL_DLF2_rdecode && rd_stb;
    assign REG_DPLL_DLF2_enb      = REG_DPLL_DLF2_wr_valid;
    assign REG_DPLL_DLF2_offset = block_offset+'h48;
    assign REG_DPLL_DLF2_decode  = (address[block_name_address_width-1 : 0]    == REG_DPLL_DLF2_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    assign REG_DPLL_DLF2_rdecode = (raddress[block_name_address_width-1 : 0]   == REG_DPLL_DLF2_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    
    
    //----------------------------------------------------------------------------
    // FIELD  : REG_DPLL_DLF2_F
    // HW ACCESS  :  READ-WRITE                          WIDTH  :  32
    // SW ACCESS  :  READ-WRITE                          OFFSET :  0
    //-----------------------------------------------------------------
    // DESCRIPTION   :
    //
    
    always @(posedge clk)
        
        begin
        if (!reset_l)
            begin
                
                REG_DPLL_DLF2_REG_DPLL_DLF2_F_q  <= 32'd26819;
            end
        else
            begin
            if (REG_DPLL_DLF2_REG_DPLL_DLF2_F_in_enb)   // REG_DPLL_DLF2_F : HW Write
                begin
                    REG_DPLL_DLF2_REG_DPLL_DLF2_F_q <= REG_DPLL_DLF2_REG_DPLL_DLF2_F_in;
                end
            else
                begin
                    
                if (REG_DPLL_DLF2_wr_valid)   // REG_DPLL_DLF2_F : SW Write
                    begin
                        REG_DPLL_DLF2_REG_DPLL_DLF2_F_q <=  ( wr_data[31 : 0] & reg_enb[31 : 0] ) | (REG_DPLL_DLF2_REG_DPLL_DLF2_F_q & (~reg_enb[31 : 0]));
                    end
                    
                end  // sw_write_close
            end
    end // always clk
    
    //----------------------------------------------------------------------------
    
    
    // ===================================================
    // HW OUTPUT READ DATA FOR EACH FIELD
    assign REG_DPLL_DLF2_REG_DPLL_DLF2_F_r  =  REG_DPLL_DLF2_REG_DPLL_DLF2_F_q ;    // Field : REG_DPLL_DLF2_F
    
    
    assign REG_DPLL_DLF2_rd_data = REG_DPLL_DLF2_rd_valid ? {REG_DPLL_DLF2_REG_DPLL_DLF2_F_q} : 32'b00000000000000000000000000000000;
    
    
    //----------------------------------------------------------------------------------------------------
    // REGISTER      :  REG_DPLL_SFTDC
    // ADDRESS       :  block_offset+'h4C                WIDTH : 32
    // HW ACCESS     :  READ-WRITE
    // SW ACCESS     :  READ-WRITE
    //
    // FIELDS   :
    //     31:0 : REG_DPLL_SFTDC_F  ( SW : Read-Write HW : Read-Write )
    
    //-----------------------------------------------------------------------------
    // DESCRIPTION  :  NA
    //
    
    
    assign REG_DPLL_SFTDC_wr_valid = REG_DPLL_SFTDC_decode && wr_stb;
    assign REG_DPLL_SFTDC_rd_valid = REG_DPLL_SFTDC_rdecode && rd_stb;
    assign REG_DPLL_SFTDC_enb      = REG_DPLL_SFTDC_wr_valid;
    assign REG_DPLL_SFTDC_offset = block_offset+'h4C;
    assign REG_DPLL_SFTDC_decode  = (address[block_name_address_width-1 : 0]    == REG_DPLL_SFTDC_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    assign REG_DPLL_SFTDC_rdecode = (raddress[block_name_address_width-1 : 0]   == REG_DPLL_SFTDC_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    
    
    //----------------------------------------------------------------------------
    // FIELD  : REG_DPLL_SFTDC_F
    // HW ACCESS  :  READ-WRITE                          WIDTH  :  32
    // SW ACCESS  :  READ-WRITE                          OFFSET :  0
    //-----------------------------------------------------------------
    // DESCRIPTION   :
    //
    
    always @(posedge clk)
        
        begin
        if (!reset_l)
            begin
                
                REG_DPLL_SFTDC_REG_DPLL_SFTDC_F_q  <= 32'd839491500;
            end
        else
            begin
            if (REG_DPLL_SFTDC_REG_DPLL_SFTDC_F_in_enb)   // REG_DPLL_SFTDC_F : HW Write
                begin
                    REG_DPLL_SFTDC_REG_DPLL_SFTDC_F_q <= REG_DPLL_SFTDC_REG_DPLL_SFTDC_F_in;
                end
            else
                begin
                    
                if (REG_DPLL_SFTDC_wr_valid)   // REG_DPLL_SFTDC_F : SW Write
                    begin
                        REG_DPLL_SFTDC_REG_DPLL_SFTDC_F_q <=  ( wr_data[31 : 0] & reg_enb[31 : 0] ) | (REG_DPLL_SFTDC_REG_DPLL_SFTDC_F_q & (~reg_enb[31 : 0]));
                    end
                    
                end  // sw_write_close
            end
    end // always clk
    
    //----------------------------------------------------------------------------
    
    
    // ===================================================
    // HW OUTPUT READ DATA FOR EACH FIELD
    assign REG_DPLL_SFTDC_REG_DPLL_SFTDC_F_r  =  REG_DPLL_SFTDC_REG_DPLL_SFTDC_F_q ;    // Field : REG_DPLL_SFTDC_F
    
    
    assign REG_DPLL_SFTDC_rd_data = REG_DPLL_SFTDC_rd_valid ? {REG_DPLL_SFTDC_REG_DPLL_SFTDC_F_q} : 32'b00000000000000000000000000000000;
    
    
    //----------------------------------------------------------------------------------------------------
    // REGISTER      :  REG_DPLL_DLF3
    // ADDRESS       :  block_offset+'h50                WIDTH : 32
    // HW ACCESS     :  READ-WRITE
    // SW ACCESS     :  READ-WRITE
    //
    // FIELDS   :
    //     31:0 : REG_DPLL_DLF3_F  ( SW : Read-Write HW : Read-Write )
    
    //-----------------------------------------------------------------------------
    // DESCRIPTION  :  NA
    //
    
    
    assign REG_DPLL_DLF3_wr_valid = REG_DPLL_DLF3_decode && wr_stb;
    assign REG_DPLL_DLF3_rd_valid = REG_DPLL_DLF3_rdecode && rd_stb;
    assign REG_DPLL_DLF3_enb      = REG_DPLL_DLF3_wr_valid;
    assign REG_DPLL_DLF3_offset = block_offset+'h50;
    assign REG_DPLL_DLF3_decode  = (address[block_name_address_width-1 : 0]    == REG_DPLL_DLF3_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    assign REG_DPLL_DLF3_rdecode = (raddress[block_name_address_width-1 : 0]   == REG_DPLL_DLF3_offset[block_name_address_width-1 : 0] ) ? 1'b1 : 1'b0;
    
    
    //----------------------------------------------------------------------------
    // FIELD  : REG_DPLL_DLF3_F
    // HW ACCESS  :  READ-WRITE                          WIDTH  :  32
    // SW ACCESS  :  READ-WRITE                          OFFSET :  0
    //-----------------------------------------------------------------
    // DESCRIPTION   :
    //
    
    always @(posedge clk)
        
        begin
        if (!reset_l)
            begin
                
                REG_DPLL_DLF3_REG_DPLL_DLF3_F_q  <= 32'd100663431;
            end
        else
            begin
            if (REG_DPLL_DLF3_REG_DPLL_DLF3_F_in_enb)   // REG_DPLL_DLF3_F : HW Write
                begin
                    REG_DPLL_DLF3_REG_DPLL_DLF3_F_q <= REG_DPLL_DLF3_REG_DPLL_DLF3_F_in;
                end
            else
                begin
                    
                if (REG_DPLL_DLF3_wr_valid)   // REG_DPLL_DLF3_F : SW Write
                    begin
                        REG_DPLL_DLF3_REG_DPLL_DLF3_F_q <=  ( wr_data[31 : 0] & reg_enb[31 : 0] ) | (REG_DPLL_DLF3_REG_DPLL_DLF3_F_q & (~reg_enb[31 : 0]));
                    end
                    
                end  // sw_write_close
            end
    end // always clk
    
    //----------------------------------------------------------------------------
    
    
    // ===================================================
    // HW OUTPUT READ DATA FOR EACH FIELD
    assign REG_DPLL_DLF3_REG_DPLL_DLF3_F_r  =  REG_DPLL_DLF3_REG_DPLL_DLF3_F_q ;    // Field : REG_DPLL_DLF3_F
    
    
    assign REG_DPLL_DLF3_rd_data = REG_DPLL_DLF3_rd_valid ? {REG_DPLL_DLF3_REG_DPLL_DLF3_F_q} : 32'b00000000000000000000000000000000;
    
    
    
    
    assign rd_data = REG_SYS_LGC_GENERAL_0_rd_data |
    REG_SYS_LGC_LDOS_SYSMOD_0_rd_data |
    REG_DPLL_SYSTEM_CON_rd_data |
    REG_DPLL_SYSTEM_CFG_rd_data |
    REG_DPLL_SYSTEM_CFG2_rd_data |
    CHA_REG_ADC_MAN_PARA10_rd_data |
    CHA_REG_TX_LB_MX_CFG_rd_data |
    CHA_REG_ADC_MAN_PARA102_rd_data |
    REG_SYS_LGC_CM_0_rd_data |
    REG_SYS_MANUAL_DFT_0_rd_data |
    REG_SYS_LGC_COEX_0_rd_data |
    REG_SYS_LGC_COEX_7_rd_data |
    REG_SYS_LGC_COEX_5_rd_data |
    REG_SYS_LGC_COEX_6_rd_data |
    CHA_REG_DAC_ANA_DIV_rd_data |
    REG_DPLL_ABS_rd_data |
    REG_DPLL_ANALOG8_rd_data |
    REG_DPLL_DLF1_rd_data |
    REG_DPLL_DLF2_rd_data |
    REG_DPLL_SFTDC_rd_data |
    REG_DPLL_DLF3_rd_data ;
    
    
    
    assign wr_error = 0;
    
    assign rd_error = 0;
    
    assign wr_decode_error = 0;
    
    assign rd_decode_error = 0;
    
    assign request      =  1'b1;
    assign rd_data_vld   =  rd_stb;
    assign rd_wait       =  1'b1;
    
    assign wr_slave_select = ((slvwaddr[addr_width - 1 : 0]  >= block_offset) && (slvwaddr[addr_width - 1 : 0]  <= block_offset + 'h53)) ? 1'b1 : 1'b0;
    assign rd_slave_select = ((slvraddr[addr_width - 1 : 0]  >= block_offset) && (slvraddr[addr_width - 1 : 0]  <= block_offset + 'h53)) ? 1'b1 : 1'b0;
    
endmodule
