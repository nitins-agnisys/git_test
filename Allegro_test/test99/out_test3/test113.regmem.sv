//*************Agnisys**************** fadfasdfsdfsd
//
//*** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ***
// created by        :
// generated by      : Saurabh
// generated from    : C:\Users\Anupam\Documents\GitHub\git_test\Allegro_test\test99\test113.idsng
// IDesignSpec rev   : idsbatch v 6.16.4.7

//*** This code is generated with following settings ***
// Reg Width                  : 32
// Address Unit               : 16
// C++ Types int              : hwint
// Bus Type                   : WISHBONE
// BigEndian                  : false
// LittleEndian               : false
// Dist. Decode and Readback  : false
//---------------------------------------------------------------------------------------------------------------
/*----------------------------------------------------------------------
Class       : b1_rg1
-----------------------------------------------------------------------*/

`ifndef CLASS_b1_rg1
`define CLASS_b1_rg1
class b1_rg1 extends uvm_reg;
    `uvm_object_utils(b1_rg1)

    /*NICE WORK*/
    rand uvm_reg_field f1;
    rand uvm_reg_field f2;
    rand uvm_reg_field f3;

    // Function : new
    function new(string name = "b1_rg1");
        super.new(name, 16, build_coverage(UVM_NO_COVERAGE));
        add_coverage(build_coverage(UVM_NO_COVERAGE));            //Added because build coverage in the line above doesn’t work due to a bug in UVM 1.1 library

    endfunction

    // Function : build
    virtual function void build();
        this.f1 = uvm_reg_field::type_id::create("f1");
        this.f2 = uvm_reg_field::type_id::create("f2");
        this.f3 = uvm_reg_field::type_id::create("f3");

        this.f1.configure(this, 8,  0, "RW", 0, 8'd0, 1, 1, 0);
        this.f2.configure(this, 3,  8, "RW", 0, 3'd0, 1, 1, 0);
        this.f3.configure(this, 3,  12, "RW", 0, 3'd0, 1, 1, 0);

    endfunction
endclass
`endif

/*----------------------------------------------------------------------
Class      : b1_block
-----------------------------------------------------------------------*/
`ifndef CLASS_b1_block
`define CLASS_b1_block
class b1_block extends uvm_reg_block;
    `uvm_object_utils(b1_block)

    rand b1_rg1 rg1;

    // Function : new
    function new(string name = "b1_block");
        super.new(name, UVM_NO_COVERAGE);
    endfunction

    // Function : build
    virtual function void build();
        //RG1
        rg1   =   b1_rg1::type_id::create("rg1");
        rg1.configure(this, null, "rg1");
        rg1.build();

        //define default map and add reg/regfiles
        default_map= create_map("default_map", 'h0, 4, UVM_LITTLE_ENDIAN, 0);
        default_map.add_reg( rg1, 'h0, "RW");

        lock_model();
    endfunction

endclass : b1_block
`endif

/*----------------------------------------------------------------------
Class       : b2_rg1
-----------------------------------------------------------------------*/

`ifndef CLASS_b2_rg1
`define CLASS_b2_rg1
class b2_rg1 extends uvm_reg;
    `uvm_object_utils(b2_rg1)

    /*NICE WORK*/
    rand uvm_reg_field f1;
    rand uvm_reg_field f2;
    rand uvm_reg_field f3;

    // Function : new
    function new(string name = "b2_rg1");
        super.new(name, 16, build_coverage(UVM_NO_COVERAGE));
        add_coverage(build_coverage(UVM_NO_COVERAGE));            //Added because build coverage in the line above doesn’t work due to a bug in UVM 1.1 library

    endfunction

    // Function : build
    virtual function void build();
        this.f1 = uvm_reg_field::type_id::create("f1");
        this.f2 = uvm_reg_field::type_id::create("f2");
        this.f3 = uvm_reg_field::type_id::create("f3");

        this.f1.configure(this, 8,  0, "RW", 0, 8'd0, 1, 1, 0);
        this.f2.configure(this, 3,  8, "RW", 0, 3'd0, 1, 1, 0);
        this.f3.configure(this, 3,  12, "RW", 0, 3'd0, 1, 1, 0);

    endfunction
endclass
`endif

/*----------------------------------------------------------------------
Class      : b2_block
-----------------------------------------------------------------------*/
`ifndef CLASS_b2_block
`define CLASS_b2_block
class b2_block extends uvm_reg_block;
    `uvm_object_utils(b2_block)

    rand b2_rg1 rg1;

    rand b2_b2 ref_sub_blk;

    // Function : new
    function new(string name = "b2_block");
        super.new(name, UVM_NO_COVERAGE);
    endfunction

    // Function : build
    virtual function void build();
        //RG1
        rg1   =   b2_rg1::type_id::create("rg1");
        rg1.configure(this, null, "rg1");
        rg1.build();

        //REF_SUB_BLK
        ref_sub_blk   =   b2_b2::type_id::create("ref_sub_blk");
        ref_sub_blk.configure(this, "ref_sub_blk");
        ref_sub_blk.build();

        //define default map and add reg/regfiles
        default_map= create_map("default_map", 'h1, 4, UVM_LITTLE_ENDIAN, 0);
        default_map.add_reg( rg1, 'h0, "RW");
        default_map.add_submap( ref_sub_blk.default_map, 'h1);

        lock_model();
    endfunction

endclass : b2_block
`endif

/*----------------------------------------------------------------------
Class      : chip_name_block
-----------------------------------------------------------------------*/
`ifndef CLASS_chip_name_block
`define CLASS_chip_name_block
class chip_name_block extends uvm_reg_block;
    `uvm_object_utils(chip_name_block)

    rand b1_block b1;

    rand b2_block b2;

    // Function : new
    function new(string name = "chip_name_block");
        super.new(name, UVM_NO_COVERAGE);
    endfunction

    // Function : build
    virtual function void build();
        //B1
        b1   =   b1_block::type_id::create("b1");
        b1.configure(this, "b1");
        b1.build();

        //B2
        b2   =   b2_block::type_id::create("b2");
        b2.configure(this, "b2");
        b2.build();

        //define default map and add reg/regfiles
        default_map= create_map("default_map", 'h0, 4, UVM_LITTLE_ENDIAN, 0);
        default_map.add_submap( b1.default_map, 'h0);
        default_map.add_submap( b2.default_map, 'h1);

        lock_model();
    endfunction

endclass : chip_name_block
`endif
