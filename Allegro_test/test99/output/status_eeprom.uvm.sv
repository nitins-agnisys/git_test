//=====================================================================================================================
//All Rights Reserved.
//*** This file is auto generated by ISequenceSpec (http://www.agnisys.com) . Please do not edit this file. ***
//Created by        :
//Generated by      : Saurabh
//Generated from    : C:\Users\Anupam\Documents\GitHub\git_test\Allegro_test\test99\sample_sequence.idsng
//IDesignSpec rev   : idsbatch v 6.16.4.7
//=====================================================================================================================

class uvm_status_eeprom_seq extends uvm_reg_sequence#(uvm_sequence#(uvm_reg_item));
    `uvm_object_utils(uvm_status_eeprom_seq)

    uvm_status_e status;

    TopC_block rm ;

    function new(string name = "uvm_status_eeprom_seq") ;
        super.new(name);
        this.init();
    endfunction

    int arg;

    function init(int arg=2);
        this.arg = arg;
    endfunction

    const int const1 = 3 ;
    const int const2 = 4 ;
    int var1 = 5 ;

    // Call Function :: uvm_Shadow_EEPROM_seq
    virtual task Shadow_EEPROM();
    endtask: Shadow_EEPROM

    task body;

        if(!$cast(rm, model)) begin
            `uvm_error("RegModel : TopC_block","cannot cast an object of type uvm_reg_sequence to rm");
        end

        if (rm == null)  begin
            `uvm_error("TopC_block", "No register model specified to run sequence on, you should specify regmodel by using property 'uvm.regmodel' in the sequence")
            return;
        end

        rm.PCIe_LINK0.boot_rom.boot_rom_mem1.write(status, 'h055, .parent(this));

        rm.PCIe_LINK0.boot_rom.write(status, const2, .parent(this));

        rm.PCIe_LINK0_CORE.flash_mem.flash_mem0.write(status, var1, .parent(this));

        rm.PCIe_LINK0_CORE.flash_mem.flash_mem1.write(status, 'hC, .parent(this));

        rm.PCIe_LINK0.boot_rom.write(status, 11, .parent(this));

        // Call Sequence :: Shadow_EEPROM
        Shadow_EEPROM_ref = uvm_shadow_eeprom_seq::type_id::create("Shadow_EEPROM_ref") ;
        Shadow_EEPROM_ref.model = model ;
        Shadow_EEPROM_ref.start(m_sequencer) ;

        rm.PCIe_LINK0.boot_rom.write(status, 4, .parent(this));

    endtask: body
endclass: uvm_status_eeprom_seq
