//Agnisys, Inc. ***** Copyright 2018 All Rights Reserved. *****
//
//*** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ***
// created by        :
// generated by      : Saurabh
// generated from    : C:\Users\Anupam\Documents\GitHub\git_test\Allegro_test\test99\test112.idsng
// IDesignSpec rev   : idsbatch v4.16.26.2

//*** This code is generated with following settings ***
// Reg Width                  : 16
// Address Unit               : 8
// C++ Types int              : hwint
// Bus Type                   : PROPRIETARY
// BigEndian                  : false
// LittleEndian               : false
// Dist. Decode and Readback  : false
//---------------------------------------------------------------------------------------------------------------
/*----------------------------------------------------------------------
Class       : test112_reg_name
-----------------------------------------------------------------------*/

`ifndef CLASS_test112_reg_name
`define CLASS_test112_reg_name
class test112_reg_name extends uvm_reg;
    `uvm_object_utils(test112_reg_name)

    /*this is OOOO*/
    rand uvm_reg_field f;

    /*this is OOOO*/
    rand uvm_reg_field f2;
    rand uvm_reg_field f3;

    // Function : new
    function new(string name = "test112_reg_name");
        super.new(name, 32, build_coverage(UVM_NO_COVERAGE));
        add_coverage(build_coverage(UVM_NO_COVERAGE));            //Added because build coverage in the line above doesn’t work due to a bug in UVM 1.1 library

    endfunction

    // Function : build
    virtual function void build();
        this.f = uvm_reg_field::type_id::create("f");

        this.f2 = uvm_reg_field::type_id::create("f2");

        this.f3 = uvm_reg_field::type_id::create("f3");

        this.f.configure(this, 1,  8, "RW", 0, 1'd1, 1, 1, 0);
        this.f2.configure(this, 1,  1, "RW", 0, 1'd0, 1, 1, 0);
        this.f3.configure(this, 6,  26, "RW", 0, 6'd1, 1, 1, 0);

    endfunction
endclass
`endif

/*----------------------------------------------------------------------
Class       : test112_reg_name2
-----------------------------------------------------------------------*/

`ifndef CLASS_test112_reg_name2
`define CLASS_test112_reg_name2
class test112_reg_name2 extends uvm_reg;
    `uvm_object_utils(test112_reg_name2)

    /*this is OOOO*/
    rand uvm_reg_field f;

    /*this is OOnre*/
    rand uvm_reg_field f2;
    rand uvm_reg_field f3;

    // Function : new
    function new(string name = "test112_reg_name2");
        super.new(name, 32, build_coverage(UVM_NO_COVERAGE));
        add_coverage(build_coverage(UVM_NO_COVERAGE));            //Added because build coverage in the line above doesn’t work due to a bug in UVM 1.1 library

    endfunction

    // Function : build
    virtual function void build();
        this.f = uvm_reg_field::type_id::create("f");

        this.f2 = uvm_reg_field::type_id::create("f2");

        this.f3 = uvm_reg_field::type_id::create("f3");

        this.f.configure(this, 1,  0, "RW", 0, 1'd1, 1, 1, 0);
        this.f2.configure(this, 1,  1, "RW", 0, 1'd0, 1, 1, 0);
        this.f3.configure(this, 6,  2, "RW", 0, 6'd1, 1, 1, 0);

    endfunction
endclass
`endif

/*----------------------------------------------------------------------
Class      : test112_block

Description : kumar
-----------------------------------------------------------------------*/
`ifndef CLASS_test112_block
`define CLASS_test112_block
class test112_block extends uvm_reg_block;
    `uvm_object_utils(test112_block)

    rand test112_reg_name reg_name;

    rand test112_reg_name2 reg_name2;

    // Function : new
    function new(string name = "test112_block");
        super.new(name, UVM_NO_COVERAGE);
    endfunction

    // Function : build
    virtual function void build();
        //REG_NAME
        reg_name   =   test112_reg_name::type_id::create("reg_name");
        reg_name.configure(this, null, "reg_name");
        reg_name.build();

        //REG_NAME2
        reg_name2   =   test112_reg_name2::type_id::create("reg_name2");
        reg_name2.configure(this, null, "reg_name2");
        reg_name2.build();

        //define default map and add reg/regfiles
        default_map= create_map("default_map", 'h0, 4, UVM_LITTLE_ENDIAN, 1);
        default_map.add_reg( reg_name, 'h0, "RW");
        default_map.add_reg( reg_name2, 'h4, "RW");

        lock_model();
    endfunction

endclass : test112_block
`endif
